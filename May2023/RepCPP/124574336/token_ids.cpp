

#define BOOST_WAVE_SOURCE 1

#include <boost/config/warning_disable.hpp>

#include <string>
#include <boost/assert.hpp>
#include <boost/static_assert.hpp>

#include <boost/wave/wave_config.hpp>
#include <boost/wave/token_ids.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#include BOOST_ABI_PREFIX
#endif

namespace boost {
namespace wave {

BOOST_WAVE_STRINGTYPE
get_token_name(token_id tokid)
{
static char const *tok_names[] = {
"AND",
"ANDAND",
"ASSIGN",
"ANDASSIGN",
"OR",
"ORASSIGN",
"XOR",
"XORASSIGN",
"COMMA",
"COLON",
"DIVIDE",
"DIVIDEASSIGN",
"DOT",
"DOTSTAR",
"ELLIPSIS",
"EQUAL",
"GREATER",
"GREATEREQUAL",
"LEFTBRACE",
"LESS",
"LESSEQUAL",
"LEFTPAREN",
"LEFTBRACKET",
"MINUS",
"MINUSASSIGN",
"MINUSMINUS",
"PERCENT",
"PERCENTASSIGN",
"NOT",
"NOTEQUAL",
"OROR",
"PLUS",
"PLUSASSIGN",
"PLUSPLUS",
"ARROW",
"ARROWSTAR",
"QUESTION_MARK",
"RIGHTBRACE",
"RIGHTPAREN",
"RIGHTBRACKET",
"COLON_COLON",
"SEMICOLON",
"SHIFTLEFT",
"SHIFTLEFTASSIGN",
"SHIFTRIGHT",
"SHIFTRIGHTASSIGN",
"STAR",
"COMPL",
"STARASSIGN",
"ASM",
"AUTO",
"BOOL",
"FALSE",
"TRUE",
"BREAK",
"CASE",
"CATCH",
"CHAR",
"CLASS",
"CONST",
"CONSTCAST",
"CONTINUE",
"DEFAULT",
"DELETE",
"DO",
"DOUBLE",
"DYNAMICCAST",
"ELSE",
"ENUM",
"EXPLICIT",
"EXPORT",
"EXTERN",
"FLOAT",
"FOR",
"FRIEND",
"GOTO",
"IF",
"INLINE",
"INT",
"LONG",
"MUTABLE",
"NAMESPACE",
"NEW",
"OPERATOR",
"PRIVATE",
"PROTECTED",
"PUBLIC",
"REGISTER",
"REINTERPRETCAST",
"RETURN",
"SHORT",
"SIGNED",
"SIZEOF",
"STATIC",
"STATICCAST",
"STRUCT",
"SWITCH",
"TEMPLATE",
"THIS",
"THROW",
"TRY",
"TYPEDEF",
"TYPEID",
"TYPENAME",
"UNION",
"UNSIGNED",
"USING",
"VIRTUAL",
"VOID",
"VOLATILE",
"WCHART",
"WHILE",
"PP_DEFINE",
"PP_IF",
"PP_IFDEF",
"PP_IFNDEF",
"PP_ELSE",
"PP_ELIF",
"PP_ENDIF",
"PP_ERROR",
"PP_LINE",
"PP_PRAGMA",
"PP_UNDEF",
"PP_WARNING",
"IDENTIFIER",
"OCTALINT",
"DECIMALINT",
"HEXAINT",
"INTLIT",
"LONGINTLIT",
"FLOATLIT",
"CCOMMENT",
"CPPCOMMENT",
"CHARLIT",
"STRINGLIT",
"CONTLINE",
"SPACE",
"SPACE2",
"NEWLINE",
"POUND_POUND",
"POUND",
"ANY",
"PP_INCLUDE",
"PP_QHEADER",
"PP_HHEADER",
"EOF",
"EOI",
"PP_NUMBER",

"MSEXT_INT8",
"MSEXT_INT16",
"MSEXT_INT32",
"MSEXT_INT64",
"MSEXT_BASED",
"MSEXT_DECLSPEC",
"MSEXT_CDECL",
"MSEXT_FASTCALL",
"MSEXT_STDCALL",
"MSEXT_TRY",
"MSEXT_EXCEPT",
"MSEXT_FINALLY",
"MSEXT_LEAVE",
"MSEXT_INLINE",
"MSEXT_ASM",
"MSEXT_REGION",
"MSEXT_ENDREGION",

"IMPORT",

"ALIGNAS",
"ALIGNOF",
"CHAR16_T",
"CHAR32_T",
"CONSTEXPR",
"DECLTYPE",
"NOEXCEPT",
"NULLPTR",
"STATIC_ASSERT",
"THREADLOCAL",
"RAWSTRINGLIT",

"T_CHAR8_T",
"T_CONCEPT",
"T_CONSTEVAL",
"T_CONSTINIT",
"T_CO_AWAIT",
"T_CO_RETURN",
"T_CO_YIELD",
"T_REQUIRES",
"T_SPACESHIP",
};

BOOST_STATIC_ASSERT(
sizeof(tok_names)/sizeof(tok_names[0]) == T_LAST_TOKEN-T_FIRST_TOKEN
);

unsigned int id = BASEID_FROM_TOKEN(tokid)-T_FIRST_TOKEN;
return (id < T_LAST_TOKEN-T_FIRST_TOKEN) ? tok_names[id] : "<UnknownToken>";
}

char const *
get_token_value(token_id tokid)
{
static char const *tok_values[] = {
"&",
"&&",
"=",
"&=",
"|",
"|=",
"^",
"^=",
",",
":",
"/",
"/=",
".",
".*",
"...",
"==",
">",
">=",
"{",
"<",
"<=",
"(",
"[",
"-",
"-=",
"--",
"%",
"%=",
"!",
"!=",
"||",
"+",
"+=",
"++",
"->",
"->*",
"?",
"}",
")",
"]",
"::",
";",
"<<",
"<<=",
">>",
">>=",
"*",
"~",
"*=",
"asm",
"auto",
"bool",
"false",
"true",
"break",
"case",
"catch",
"char",
"class",
"const",
"const_cast",
"continue",
"default",
"delete",
"do",
"double",
"dynamic_cast",
"else",
"enum",
"explicit",
"export",
"extern",
"float",
"for",
"friend",
"goto",
"if",
"inline",
"int",
"long",
"mutable",
"namespace",
"new",
"operator",
"private",
"protected",
"public",
"register",
"reinterpret_cast",
"return",
"short",
"signed",
"sizeof",
"static",
"static_cast",
"struct",
"switch",
"template",
"this",
"throw",
"try",
"typedef",
"typeid",
"typename",
"union",
"unsigned",
"using",
"virtual",
"void",
"volatile",
"wchar_t",
"while",
"#define",
"#if",
"#ifdef",
"#ifndef",
"#else",
"#elif",
"#endif",
"#error",
"#line",
"#pragma",
"#undef",
"#warning",
"",   
"",   
"",   
"",   
"",   
"",   
"",   
"",   
"",   
"",   
"",   
"",   
"",   
"",   
"\n",
"##",
"#",
"",   
"#include",
"#include",
"#include",
"",   
"",   
"",   

"__int8",
"__int16",
"__int32",
"__int64",
"__based",
"__declspec",
"__cdecl",
"__fastcall",
"__stdcall",
"__try",
"__except",
"__finally",
"__leave",
"__inline",
"__asm",
"#region",
"#endregion",

"import",

"alignas",
"alignof",
"char16_t",
"char32_t",
"constexpr",
"decltype",
"noexcept",
"nullptr",
"static_assert",
"thread_local",
"",   

"char8_t",
"concept",
"consteval",
"constinit",
"co_await",
"co_return",
"co_yield",
"requires",
"<=>",
};

BOOST_STATIC_ASSERT(
sizeof(tok_values)/sizeof(tok_values[0]) == T_LAST_TOKEN-T_FIRST_TOKEN
);

unsigned int id = BASEID_FROM_TOKEN(tokid)-T_FIRST_TOKEN;
return (id < T_LAST_TOKEN-T_FIRST_TOKEN) ? tok_values[id] : "<UnknownToken>";
}

}   
}   

#ifdef BOOST_HAS_ABI_HEADERS
#include BOOST_ABI_SUFFIX
#endif
