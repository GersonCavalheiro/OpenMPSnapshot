
#if !defined(BOOST_SPIRIT_ISO8859_1_APRIL_26_2006_1106PM)
#define BOOST_SPIRIT_ISO8859_1_APRIL_26_2006_1106PM

#if defined(_MSC_VER)
#pragma once
#endif

#include <climits>
#include <boost/assert.hpp>
#include <boost/cstdint.hpp>

#define BOOST_CC_DIGIT    0x0001
#define BOOST_CC_XDIGIT   0x0002
#define BOOST_CC_ALPHA    0x0004
#define BOOST_CC_CTRL     0x0008
#define BOOST_CC_LOWER    0x0010
#define BOOST_CC_UPPER    0x0020
#define BOOST_CC_SPACE    0x0040
#define BOOST_CC_PUNCT    0x0080

namespace boost { namespace spirit { namespace char_encoding
{

const unsigned char iso8859_1_char_types[] =
{
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL|BOOST_CC_SPACE,
BOOST_CC_CTRL|BOOST_CC_SPACE,
BOOST_CC_CTRL|BOOST_CC_SPACE,
BOOST_CC_CTRL|BOOST_CC_SPACE,
BOOST_CC_CTRL|BOOST_CC_SPACE,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_SPACE,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_DIGIT|BOOST_CC_XDIGIT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_XDIGIT|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_CTRL,
BOOST_CC_SPACE,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_DIGIT|BOOST_CC_PUNCT,
BOOST_CC_DIGIT|BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_DIGIT|BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_PUNCT,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_PUNCT,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_UPPER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_PUNCT,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
BOOST_CC_ALPHA|BOOST_CC_LOWER,
};

const unsigned char iso8859_1_char_conversion[] =
{
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'a',
'b',
'c',
'd',
'e',
'f',
'g',
'h',
'i',
'j',
'k',
'l',
'm',
'n',
'o',
'p',
'q',
'r',
's',
't',
'u',
'v',
'w',
'x',
'y',
'z',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'A',
'B',
'C',
'D',
'E',
'F',
'G',
'H',
'I',
'J',
'K',
'L',
'M',
'N',
'O',
'P',
'Q',
'R',
'S',
'T',
'U',
'V',
'W',
'X',
'Y',
'Z',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
'\0',
0xe0,
0xe1,
0xe2,
0xe3,
0xe4,
0xe5,
0xe6,
0xe7,
0xe8,
0xe9,
0xea,
0xeb,
0xec,
0xed,
0xee,
0xef,
0xf0,
0xf1,
0xf2,
0xf3,
0xf4,
0xf5,
0xf6,
'\0',
0xf8,
0xf9,
0xfa,
0xfb,
0xfc,
0xfd,
0xfe,
'\0',
0xc0,
0xc1,
0xc2,
0xc3,
0xc4,
0xc5,
0xc6,
0xc7,
0xc8,
0xc9,
0xca,
0xcb,
0xcc,
0xcd,
0xce,
0xcf,
0xd0,
0xd1,
0xd2,
0xd3,
0xd4,
0xd5,
0xd6,
'\0',
0xd8,
0xd9,
0xda,
0xdb,
0xdc,
0xdd,
0xde,
'\0',
};

struct iso8859_1
{
typedef unsigned char char_type;
typedef unsigned char classify_type;

static bool
isascii_(int ch)
{
return 0 == (ch & ~0x7f);
}

static bool
ischar(int ch)
{
return (0 == (ch & ~0xff) || ~0 == (ch | 0xff)) != 0;
}


static bool
strict_ischar(int ch)
{
return ch >= 0 && ch <= 255;
}

static bool
isalnum(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_ALPHA)
|| (iso8859_1_char_types[ch] & BOOST_CC_DIGIT);
}

static bool
isalpha(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_ALPHA) != 0;
}

static bool
isdigit(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_DIGIT) != 0;
}

static bool
isxdigit(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_XDIGIT) != 0;
}

static bool
iscntrl(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_CTRL) != 0;
}

static bool
isgraph(int ch)
{
return ('\x21' <= ch && ch <= '\x7e') || ('\xa1' <= ch && ch <= '\xff');
}

static bool
islower(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_LOWER) != 0;
}

static bool
isprint(int ch)
{
return ('\x20' <= ch && ch <= '\x7e') || ('\xa0' <= ch && ch <= '\xff');
}

static bool
ispunct(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_PUNCT) != 0;
}

static bool
isspace(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_SPACE) != 0;
}

static bool
isblank BOOST_PREVENT_MACRO_SUBSTITUTION (int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return ('\x09' == ch || '\x20' == ch || '\xa0' == ch);
}

static bool
isupper(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return (iso8859_1_char_types[ch] & BOOST_CC_UPPER) != 0;
}


static int
tolower(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return isupper(ch) && '\0' != iso8859_1_char_conversion[ch] ?
iso8859_1_char_conversion[ch] : ch;
}

static int
toupper(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return islower(ch) && '\0' != iso8859_1_char_conversion[ch] ?
iso8859_1_char_conversion[ch] : ch;
}

static ::boost::uint32_t
toucs4(int ch)
{
BOOST_ASSERT(strict_ischar(ch));
return ch;
}
};

}}}

#undef BOOST_CC_DIGIT
#undef BOOST_CC_XDIGIT
#undef BOOST_CC_ALPHA
#undef BOOST_CC_CTRL
#undef BOOST_CC_LOWER
#undef BOOST_CC_UPPER
#undef BOOST_CC_PUNCT
#undef BOOST_CC_SPACE

#endif

