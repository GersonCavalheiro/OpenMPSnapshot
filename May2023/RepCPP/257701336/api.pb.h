
#ifndef PROTOBUF_INCLUDED_google_2fprotobuf_2fapi_2eproto
#define PROTOBUF_INCLUDED_google_2fprotobuf_2fapi_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  
#include <google/protobuf/extension_set.h>  
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/source_context.pb.h>
#include <google/protobuf/type.pb.h>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fapi_2eproto LIBPROTOBUF_EXPORT

namespace protobuf_google_2fprotobuf_2fapi_2eproto {
struct LIBPROTOBUF_EXPORT TableStruct {
static const ::google::protobuf::internal::ParseTableField entries[];
static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
static const ::google::protobuf::internal::ParseTable schema[3];
static const ::google::protobuf::internal::FieldMetadata field_metadata[];
static const ::google::protobuf::internal::SerializationTable serialization_table[];
static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOBUF_EXPORT AddDescriptors();
}  
namespace google {
namespace protobuf {
class Api;
class ApiDefaultTypeInternal;
LIBPROTOBUF_EXPORT extern ApiDefaultTypeInternal _Api_default_instance_;
class Method;
class MethodDefaultTypeInternal;
LIBPROTOBUF_EXPORT extern MethodDefaultTypeInternal _Method_default_instance_;
class Mixin;
class MixinDefaultTypeInternal;
LIBPROTOBUF_EXPORT extern MixinDefaultTypeInternal _Mixin_default_instance_;
}  
}  
namespace google {
namespace protobuf {
template<> LIBPROTOBUF_EXPORT ::google::protobuf::Api* Arena::CreateMaybeMessage<::google::protobuf::Api>(Arena*);
template<> LIBPROTOBUF_EXPORT ::google::protobuf::Method* Arena::CreateMaybeMessage<::google::protobuf::Method>(Arena*);
template<> LIBPROTOBUF_EXPORT ::google::protobuf::Mixin* Arena::CreateMaybeMessage<::google::protobuf::Mixin>(Arena*);
}  
}  
namespace google {
namespace protobuf {


class LIBPROTOBUF_EXPORT Api : public ::google::protobuf::Message  {
public:
Api();
virtual ~Api();

Api(const Api& from);

inline Api& operator=(const Api& from) {
CopyFrom(from);
return *this;
}
#if LANG_CXX11
Api(Api&& from) noexcept
: Api() {
*this = ::std::move(from);
}

inline Api& operator=(Api&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}
#endif
static const ::google::protobuf::Descriptor* descriptor();
static const Api& default_instance();

static void InitAsDefaultInstance();  
static inline const Api* internal_default_instance() {
return reinterpret_cast<const Api*>(
&_Api_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

void Swap(Api* other);
friend void swap(Api& a, Api& b) {
a.Swap(&b);
}


inline Api* New() const final {
return CreateMaybeMessage<Api>(NULL);
}

Api* New(::google::protobuf::Arena* arena) const final {
return CreateMaybeMessage<Api>(arena);
}
void CopyFrom(const ::google::protobuf::Message& from) final;
void MergeFrom(const ::google::protobuf::Message& from) final;
void CopyFrom(const Api& from);
void MergeFrom(const Api& from);
void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) final;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const final;
::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const final;
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const final;
void InternalSwap(Api* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::google::protobuf::Metadata GetMetadata() const final;



int methods_size() const;
void clear_methods();
static const int kMethodsFieldNumber = 2;
::google::protobuf::Method* mutable_methods(int index);
::google::protobuf::RepeatedPtrField< ::google::protobuf::Method >*
mutable_methods();
const ::google::protobuf::Method& methods(int index) const;
::google::protobuf::Method* add_methods();
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Method >&
methods() const;

int options_size() const;
void clear_options();
static const int kOptionsFieldNumber = 3;
::google::protobuf::Option* mutable_options(int index);
::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >*
mutable_options();
const ::google::protobuf::Option& options(int index) const;
::google::protobuf::Option* add_options();
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >&
options() const;

int mixins_size() const;
void clear_mixins();
static const int kMixinsFieldNumber = 6;
::google::protobuf::Mixin* mutable_mixins(int index);
::google::protobuf::RepeatedPtrField< ::google::protobuf::Mixin >*
mutable_mixins();
const ::google::protobuf::Mixin& mixins(int index) const;
::google::protobuf::Mixin* add_mixins();
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Mixin >&
mixins() const;

void clear_name();
static const int kNameFieldNumber = 1;
const ::std::string& name() const;
void set_name(const ::std::string& value);
#if LANG_CXX11
void set_name(::std::string&& value);
#endif
void set_name(const char* value);
void set_name(const char* value, size_t size);
::std::string* mutable_name();
::std::string* release_name();
void set_allocated_name(::std::string* name);

void clear_version();
static const int kVersionFieldNumber = 4;
const ::std::string& version() const;
void set_version(const ::std::string& value);
#if LANG_CXX11
void set_version(::std::string&& value);
#endif
void set_version(const char* value);
void set_version(const char* value, size_t size);
::std::string* mutable_version();
::std::string* release_version();
void set_allocated_version(::std::string* version);

bool has_source_context() const;
void clear_source_context();
static const int kSourceContextFieldNumber = 5;
private:
const ::google::protobuf::SourceContext& _internal_source_context() const;
public:
const ::google::protobuf::SourceContext& source_context() const;
::google::protobuf::SourceContext* release_source_context();
::google::protobuf::SourceContext* mutable_source_context();
void set_allocated_source_context(::google::protobuf::SourceContext* source_context);

void clear_syntax();
static const int kSyntaxFieldNumber = 7;
::google::protobuf::Syntax syntax() const;
void set_syntax(::google::protobuf::Syntax value);

private:

::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
::google::protobuf::RepeatedPtrField< ::google::protobuf::Method > methods_;
::google::protobuf::RepeatedPtrField< ::google::protobuf::Option > options_;
::google::protobuf::RepeatedPtrField< ::google::protobuf::Mixin > mixins_;
::google::protobuf::internal::ArenaStringPtr name_;
::google::protobuf::internal::ArenaStringPtr version_;
::google::protobuf::SourceContext* source_context_;
int syntax_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
friend struct ::protobuf_google_2fprotobuf_2fapi_2eproto::TableStruct;
};

class LIBPROTOBUF_EXPORT Method : public ::google::protobuf::Message  {
public:
Method();
virtual ~Method();

Method(const Method& from);

inline Method& operator=(const Method& from) {
CopyFrom(from);
return *this;
}
#if LANG_CXX11
Method(Method&& from) noexcept
: Method() {
*this = ::std::move(from);
}

inline Method& operator=(Method&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}
#endif
static const ::google::protobuf::Descriptor* descriptor();
static const Method& default_instance();

static void InitAsDefaultInstance();  
static inline const Method* internal_default_instance() {
return reinterpret_cast<const Method*>(
&_Method_default_instance_);
}
static constexpr int kIndexInFileMessages =
1;

void Swap(Method* other);
friend void swap(Method& a, Method& b) {
a.Swap(&b);
}


inline Method* New() const final {
return CreateMaybeMessage<Method>(NULL);
}

Method* New(::google::protobuf::Arena* arena) const final {
return CreateMaybeMessage<Method>(arena);
}
void CopyFrom(const ::google::protobuf::Message& from) final;
void MergeFrom(const ::google::protobuf::Message& from) final;
void CopyFrom(const Method& from);
void MergeFrom(const Method& from);
void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) final;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const final;
::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const final;
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const final;
void InternalSwap(Method* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::google::protobuf::Metadata GetMetadata() const final;



int options_size() const;
void clear_options();
static const int kOptionsFieldNumber = 6;
::google::protobuf::Option* mutable_options(int index);
::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >*
mutable_options();
const ::google::protobuf::Option& options(int index) const;
::google::protobuf::Option* add_options();
const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >&
options() const;

void clear_name();
static const int kNameFieldNumber = 1;
const ::std::string& name() const;
void set_name(const ::std::string& value);
#if LANG_CXX11
void set_name(::std::string&& value);
#endif
void set_name(const char* value);
void set_name(const char* value, size_t size);
::std::string* mutable_name();
::std::string* release_name();
void set_allocated_name(::std::string* name);

void clear_request_type_url();
static const int kRequestTypeUrlFieldNumber = 2;
const ::std::string& request_type_url() const;
void set_request_type_url(const ::std::string& value);
#if LANG_CXX11
void set_request_type_url(::std::string&& value);
#endif
void set_request_type_url(const char* value);
void set_request_type_url(const char* value, size_t size);
::std::string* mutable_request_type_url();
::std::string* release_request_type_url();
void set_allocated_request_type_url(::std::string* request_type_url);

void clear_response_type_url();
static const int kResponseTypeUrlFieldNumber = 4;
const ::std::string& response_type_url() const;
void set_response_type_url(const ::std::string& value);
#if LANG_CXX11
void set_response_type_url(::std::string&& value);
#endif
void set_response_type_url(const char* value);
void set_response_type_url(const char* value, size_t size);
::std::string* mutable_response_type_url();
::std::string* release_response_type_url();
void set_allocated_response_type_url(::std::string* response_type_url);

void clear_request_streaming();
static const int kRequestStreamingFieldNumber = 3;
bool request_streaming() const;
void set_request_streaming(bool value);

void clear_response_streaming();
static const int kResponseStreamingFieldNumber = 5;
bool response_streaming() const;
void set_response_streaming(bool value);

void clear_syntax();
static const int kSyntaxFieldNumber = 7;
::google::protobuf::Syntax syntax() const;
void set_syntax(::google::protobuf::Syntax value);

private:

::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
::google::protobuf::RepeatedPtrField< ::google::protobuf::Option > options_;
::google::protobuf::internal::ArenaStringPtr name_;
::google::protobuf::internal::ArenaStringPtr request_type_url_;
::google::protobuf::internal::ArenaStringPtr response_type_url_;
bool request_streaming_;
bool response_streaming_;
int syntax_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
friend struct ::protobuf_google_2fprotobuf_2fapi_2eproto::TableStruct;
};

class LIBPROTOBUF_EXPORT Mixin : public ::google::protobuf::Message  {
public:
Mixin();
virtual ~Mixin();

Mixin(const Mixin& from);

inline Mixin& operator=(const Mixin& from) {
CopyFrom(from);
return *this;
}
#if LANG_CXX11
Mixin(Mixin&& from) noexcept
: Mixin() {
*this = ::std::move(from);
}

inline Mixin& operator=(Mixin&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}
#endif
static const ::google::protobuf::Descriptor* descriptor();
static const Mixin& default_instance();

static void InitAsDefaultInstance();  
static inline const Mixin* internal_default_instance() {
return reinterpret_cast<const Mixin*>(
&_Mixin_default_instance_);
}
static constexpr int kIndexInFileMessages =
2;

void Swap(Mixin* other);
friend void swap(Mixin& a, Mixin& b) {
a.Swap(&b);
}


inline Mixin* New() const final {
return CreateMaybeMessage<Mixin>(NULL);
}

Mixin* New(::google::protobuf::Arena* arena) const final {
return CreateMaybeMessage<Mixin>(arena);
}
void CopyFrom(const ::google::protobuf::Message& from) final;
void MergeFrom(const ::google::protobuf::Message& from) final;
void CopyFrom(const Mixin& from);
void MergeFrom(const Mixin& from);
void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) final;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const final;
::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const final;
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const final;
void InternalSwap(Mixin* other);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return NULL;
}
inline void* MaybeArenaPtr() const {
return NULL;
}
public:

::google::protobuf::Metadata GetMetadata() const final;



void clear_name();
static const int kNameFieldNumber = 1;
const ::std::string& name() const;
void set_name(const ::std::string& value);
#if LANG_CXX11
void set_name(::std::string&& value);
#endif
void set_name(const char* value);
void set_name(const char* value, size_t size);
::std::string* mutable_name();
::std::string* release_name();
void set_allocated_name(::std::string* name);

void clear_root();
static const int kRootFieldNumber = 2;
const ::std::string& root() const;
void set_root(const ::std::string& value);
#if LANG_CXX11
void set_root(::std::string&& value);
#endif
void set_root(const char* value);
void set_root(const char* value, size_t size);
::std::string* mutable_root();
::std::string* release_root();
void set_allocated_root(::std::string* root);

private:

::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
::google::protobuf::internal::ArenaStringPtr name_;
::google::protobuf::internal::ArenaStringPtr root_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
friend struct ::protobuf_google_2fprotobuf_2fapi_2eproto::TableStruct;
};



#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  

inline void Api::clear_name() {
name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Api::name() const {
return name_.GetNoArena();
}
inline void Api::set_name(const ::std::string& value) {

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
}
#if LANG_CXX11
inline void Api::set_name(::std::string&& value) {

name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
}
#endif
inline void Api::set_name(const char* value) {
GOOGLE_DCHECK(value != NULL);

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
}
inline void Api::set_name(const char* value, size_t size) {

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
}
inline ::std::string* Api::mutable_name() {

return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Api::release_name() {

return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Api::set_allocated_name(::std::string* name) {
if (name != NULL) {

} else {

}
name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
}

inline int Api::methods_size() const {
return methods_.size();
}
inline void Api::clear_methods() {
methods_.Clear();
}
inline ::google::protobuf::Method* Api::mutable_methods(int index) {
return methods_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Method >*
Api::mutable_methods() {
return &methods_;
}
inline const ::google::protobuf::Method& Api::methods(int index) const {
return methods_.Get(index);
}
inline ::google::protobuf::Method* Api::add_methods() {
return methods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Method >&
Api::methods() const {
return methods_;
}

inline int Api::options_size() const {
return options_.size();
}
inline ::google::protobuf::Option* Api::mutable_options(int index) {
return options_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >*
Api::mutable_options() {
return &options_;
}
inline const ::google::protobuf::Option& Api::options(int index) const {
return options_.Get(index);
}
inline ::google::protobuf::Option* Api::add_options() {
return options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >&
Api::options() const {
return options_;
}

inline void Api::clear_version() {
version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Api::version() const {
return version_.GetNoArena();
}
inline void Api::set_version(const ::std::string& value) {

version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
}
#if LANG_CXX11
inline void Api::set_version(::std::string&& value) {

version_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
}
#endif
inline void Api::set_version(const char* value) {
GOOGLE_DCHECK(value != NULL);

version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
}
inline void Api::set_version(const char* value, size_t size) {

version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
}
inline ::std::string* Api::mutable_version() {

return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Api::release_version() {

return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Api::set_allocated_version(::std::string* version) {
if (version != NULL) {

} else {

}
version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
}

inline bool Api::has_source_context() const {
return this != internal_default_instance() && source_context_ != NULL;
}
inline const ::google::protobuf::SourceContext& Api::_internal_source_context() const {
return *source_context_;
}
inline const ::google::protobuf::SourceContext& Api::source_context() const {
const ::google::protobuf::SourceContext* p = source_context_;
return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::SourceContext*>(
&::google::protobuf::_SourceContext_default_instance_);
}
inline ::google::protobuf::SourceContext* Api::release_source_context() {

::google::protobuf::SourceContext* temp = source_context_;
source_context_ = NULL;
return temp;
}
inline ::google::protobuf::SourceContext* Api::mutable_source_context() {

if (source_context_ == NULL) {
auto* p = CreateMaybeMessage<::google::protobuf::SourceContext>(GetArenaNoVirtual());
source_context_ = p;
}
return source_context_;
}
inline void Api::set_allocated_source_context(::google::protobuf::SourceContext* source_context) {
::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
if (message_arena == NULL) {
delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_context_);
}
if (source_context) {
::google::protobuf::Arena* submessage_arena = NULL;
if (message_arena != submessage_arena) {
source_context = ::google::protobuf::internal::GetOwnedMessage(
message_arena, source_context, submessage_arena);
}

} else {

}
source_context_ = source_context;
}

inline int Api::mixins_size() const {
return mixins_.size();
}
inline void Api::clear_mixins() {
mixins_.Clear();
}
inline ::google::protobuf::Mixin* Api::mutable_mixins(int index) {
return mixins_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Mixin >*
Api::mutable_mixins() {
return &mixins_;
}
inline const ::google::protobuf::Mixin& Api::mixins(int index) const {
return mixins_.Get(index);
}
inline ::google::protobuf::Mixin* Api::add_mixins() {
return mixins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Mixin >&
Api::mixins() const {
return mixins_;
}

inline void Api::clear_syntax() {
syntax_ = 0;
}
inline ::google::protobuf::Syntax Api::syntax() const {
return static_cast< ::google::protobuf::Syntax >(syntax_);
}
inline void Api::set_syntax(::google::protobuf::Syntax value) {

syntax_ = value;
}



inline void Method::clear_name() {
name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Method::name() const {
return name_.GetNoArena();
}
inline void Method::set_name(const ::std::string& value) {

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
}
#if LANG_CXX11
inline void Method::set_name(::std::string&& value) {

name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
}
#endif
inline void Method::set_name(const char* value) {
GOOGLE_DCHECK(value != NULL);

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
}
inline void Method::set_name(const char* value, size_t size) {

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
}
inline ::std::string* Method::mutable_name() {

return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Method::release_name() {

return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Method::set_allocated_name(::std::string* name) {
if (name != NULL) {

} else {

}
name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
}

inline void Method::clear_request_type_url() {
request_type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Method::request_type_url() const {
return request_type_url_.GetNoArena();
}
inline void Method::set_request_type_url(const ::std::string& value) {

request_type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
}
#if LANG_CXX11
inline void Method::set_request_type_url(::std::string&& value) {

request_type_url_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
}
#endif
inline void Method::set_request_type_url(const char* value) {
GOOGLE_DCHECK(value != NULL);

request_type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
}
inline void Method::set_request_type_url(const char* value, size_t size) {

request_type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
}
inline ::std::string* Method::mutable_request_type_url() {

return request_type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Method::release_request_type_url() {

return request_type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Method::set_allocated_request_type_url(::std::string* request_type_url) {
if (request_type_url != NULL) {

} else {

}
request_type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_type_url);
}

inline void Method::clear_request_streaming() {
request_streaming_ = false;
}
inline bool Method::request_streaming() const {
return request_streaming_;
}
inline void Method::set_request_streaming(bool value) {

request_streaming_ = value;
}

inline void Method::clear_response_type_url() {
response_type_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Method::response_type_url() const {
return response_type_url_.GetNoArena();
}
inline void Method::set_response_type_url(const ::std::string& value) {

response_type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
}
#if LANG_CXX11
inline void Method::set_response_type_url(::std::string&& value) {

response_type_url_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
}
#endif
inline void Method::set_response_type_url(const char* value) {
GOOGLE_DCHECK(value != NULL);

response_type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
}
inline void Method::set_response_type_url(const char* value, size_t size) {

response_type_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
}
inline ::std::string* Method::mutable_response_type_url() {

return response_type_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Method::release_response_type_url() {

return response_type_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Method::set_allocated_response_type_url(::std::string* response_type_url) {
if (response_type_url != NULL) {

} else {

}
response_type_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_type_url);
}

inline void Method::clear_response_streaming() {
response_streaming_ = false;
}
inline bool Method::response_streaming() const {
return response_streaming_;
}
inline void Method::set_response_streaming(bool value) {

response_streaming_ = value;
}

inline int Method::options_size() const {
return options_.size();
}
inline ::google::protobuf::Option* Method::mutable_options(int index) {
return options_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >*
Method::mutable_options() {
return &options_;
}
inline const ::google::protobuf::Option& Method::options(int index) const {
return options_.Get(index);
}
inline ::google::protobuf::Option* Method::add_options() {
return options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >&
Method::options() const {
return options_;
}

inline void Method::clear_syntax() {
syntax_ = 0;
}
inline ::google::protobuf::Syntax Method::syntax() const {
return static_cast< ::google::protobuf::Syntax >(syntax_);
}
inline void Method::set_syntax(::google::protobuf::Syntax value) {

syntax_ = value;
}



inline void Mixin::clear_name() {
name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mixin::name() const {
return name_.GetNoArena();
}
inline void Mixin::set_name(const ::std::string& value) {

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
}
#if LANG_CXX11
inline void Mixin::set_name(::std::string&& value) {

name_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
}
#endif
inline void Mixin::set_name(const char* value) {
GOOGLE_DCHECK(value != NULL);

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
}
inline void Mixin::set_name(const char* value, size_t size) {

name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
}
inline ::std::string* Mixin::mutable_name() {

return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mixin::release_name() {

return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mixin::set_allocated_name(::std::string* name) {
if (name != NULL) {

} else {

}
name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
}

inline void Mixin::clear_root() {
root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Mixin::root() const {
return root_.GetNoArena();
}
inline void Mixin::set_root(const ::std::string& value) {

root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
}
#if LANG_CXX11
inline void Mixin::set_root(::std::string&& value) {

root_.SetNoArena(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
}
#endif
inline void Mixin::set_root(const char* value) {
GOOGLE_DCHECK(value != NULL);

root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
}
inline void Mixin::set_root(const char* value, size_t size) {

root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
}
inline ::std::string* Mixin::mutable_root() {

return root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Mixin::release_root() {

return root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Mixin::set_allocated_root(::std::string* root) {
if (root != NULL) {

} else {

}
root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root);
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  




}  
}  


#endif  
