
#pragma once

#include "aws/core/Core_EXPORTS.h"

namespace Aws
{
namespace Http 
{
enum class HttpResponseCode;
}
namespace Client
{
template<typename ERROR_TYPE>
class AWSError;

enum class CoreErrors
{
INCOMPLETE_SIGNATURE = 0,
INTERNAL_FAILURE = 1,
INVALID_ACTION = 2,
INVALID_CLIENT_TOKEN_ID = 3,
INVALID_PARAMETER_COMBINATION = 4,
INVALID_QUERY_PARAMETER = 5,
INVALID_PARAMETER_VALUE = 6,
MISSING_ACTION = 7, 
MISSING_AUTHENTICATION_TOKEN = 8, 
MISSING_PARAMETER = 9, 
OPT_IN_REQUIRED = 10,
REQUEST_EXPIRED = 11,
SERVICE_UNAVAILABLE = 12,
THROTTLING = 13,
VALIDATION = 14,
ACCESS_DENIED = 15,
RESOURCE_NOT_FOUND = 16, 
UNRECOGNIZED_CLIENT = 17, 
MALFORMED_QUERY_STRING = 18, 
SLOW_DOWN = 19,
REQUEST_TIME_TOO_SKEWED = 20,
INVALID_SIGNATURE = 21,
SIGNATURE_DOES_NOT_MATCH = 22,
INVALID_ACCESS_KEY_ID = 23,
REQUEST_TIMEOUT = 24,

NETWORK_CONNECTION = 99, 

UNKNOWN = 100, 
SERVICE_EXTENSION_START_RANGE = 128
};

namespace CoreErrorsMapper
{

AWS_CORE_API AWSError<CoreErrors> GetErrorForName(const char* errorName);

AWS_CORE_API AWSError<CoreErrors> GetErrorForHttpResponseCode(Aws::Http::HttpResponseCode code);
} 
} 
} 


