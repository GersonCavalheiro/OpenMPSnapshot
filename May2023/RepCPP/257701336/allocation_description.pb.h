
#ifndef PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto
#define PROTOBUF_INCLUDED_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  
#include <google/protobuf/extension_set.h>  
#include <google/protobuf/unknown_field_set.h>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto 

namespace protobuf_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto {
struct TableStruct {
static const ::google::protobuf::internal::ParseTableField entries[];
static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
static const ::google::protobuf::internal::ParseTable schema[1];
static const ::google::protobuf::internal::FieldMetadata field_metadata[];
static const ::google::protobuf::internal::SerializationTable serialization_table[];
static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  
namespace tensorflow {
class AllocationDescription;
class AllocationDescriptionDefaultTypeInternal;
extern AllocationDescriptionDefaultTypeInternal _AllocationDescription_default_instance_;
}  
namespace google {
namespace protobuf {
template<> ::tensorflow::AllocationDescription* Arena::CreateMaybeMessage<::tensorflow::AllocationDescription>(Arena*);
}  
}  
namespace tensorflow {


class AllocationDescription : public ::google::protobuf::Message  {
public:
AllocationDescription();
virtual ~AllocationDescription();

AllocationDescription(const AllocationDescription& from);

inline AllocationDescription& operator=(const AllocationDescription& from) {
CopyFrom(from);
return *this;
}
#if LANG_CXX11
AllocationDescription(AllocationDescription&& from) noexcept
: AllocationDescription() {
*this = ::std::move(from);
}

inline AllocationDescription& operator=(AllocationDescription&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}
#endif
inline ::google::protobuf::Arena* GetArena() const final {
return GetArenaNoVirtual();
}
inline void* GetMaybeArenaPointer() const final {
return MaybeArenaPtr();
}
static const ::google::protobuf::Descriptor* descriptor();
static const AllocationDescription& default_instance();

static void InitAsDefaultInstance();  
static inline const AllocationDescription* internal_default_instance() {
return reinterpret_cast<const AllocationDescription*>(
&_AllocationDescription_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

void UnsafeArenaSwap(AllocationDescription* other);
void Swap(AllocationDescription* other);
friend void swap(AllocationDescription& a, AllocationDescription& b) {
a.Swap(&b);
}


inline AllocationDescription* New() const final {
return CreateMaybeMessage<AllocationDescription>(NULL);
}

AllocationDescription* New(::google::protobuf::Arena* arena) const final {
return CreateMaybeMessage<AllocationDescription>(arena);
}
void CopyFrom(const ::google::protobuf::Message& from) final;
void MergeFrom(const ::google::protobuf::Message& from) final;
void CopyFrom(const AllocationDescription& from);
void MergeFrom(const AllocationDescription& from);
void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
bool MergePartialFromCodedStream(
::google::protobuf::io::CodedInputStream* input) final;
void SerializeWithCachedSizes(
::google::protobuf::io::CodedOutputStream* output) const final;
::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
bool deterministic, ::google::protobuf::uint8* target) const final;
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const final;
void InternalSwap(AllocationDescription* other);
protected:
explicit AllocationDescription(::google::protobuf::Arena* arena);
private:
static void ArenaDtor(void* object);
inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
private:
inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
return _internal_metadata_.arena();
}
inline void* MaybeArenaPtr() const {
return _internal_metadata_.raw_arena_ptr();
}
public:

::google::protobuf::Metadata GetMetadata() const final;



void clear_allocator_name();
static const int kAllocatorNameFieldNumber = 3;
const ::std::string& allocator_name() const;
void set_allocator_name(const ::std::string& value);
#if LANG_CXX11
void set_allocator_name(::std::string&& value);
#endif
void set_allocator_name(const char* value);
void set_allocator_name(const char* value, size_t size);
::std::string* mutable_allocator_name();
::std::string* release_allocator_name();
void set_allocated_allocator_name(::std::string* allocator_name);
PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
"    string fields are deprecated and will be removed in a"
"    future release.")
::std::string* unsafe_arena_release_allocator_name();
PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
"    string fields are deprecated and will be removed in a"
"    future release.")
void unsafe_arena_set_allocated_allocator_name(
::std::string* allocator_name);

void clear_requested_bytes();
static const int kRequestedBytesFieldNumber = 1;
::google::protobuf::int64 requested_bytes() const;
void set_requested_bytes(::google::protobuf::int64 value);

void clear_allocated_bytes();
static const int kAllocatedBytesFieldNumber = 2;
::google::protobuf::int64 allocated_bytes() const;
void set_allocated_bytes(::google::protobuf::int64 value);

void clear_allocation_id();
static const int kAllocationIdFieldNumber = 4;
::google::protobuf::int64 allocation_id() const;
void set_allocation_id(::google::protobuf::int64 value);

void clear_ptr();
static const int kPtrFieldNumber = 6;
::google::protobuf::uint64 ptr() const;
void set_ptr(::google::protobuf::uint64 value);

void clear_has_single_reference();
static const int kHasSingleReferenceFieldNumber = 5;
bool has_single_reference() const;
void set_has_single_reference(bool value);

private:

::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
typedef void InternalArenaConstructable_;
typedef void DestructorSkippable_;
::google::protobuf::internal::ArenaStringPtr allocator_name_;
::google::protobuf::int64 requested_bytes_;
::google::protobuf::int64 allocated_bytes_;
::google::protobuf::int64 allocation_id_;
::google::protobuf::uint64 ptr_;
bool has_single_reference_;
mutable ::google::protobuf::internal::CachedSize _cached_size_;
friend struct ::protobuf_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto::TableStruct;
};



#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  

inline void AllocationDescription::clear_requested_bytes() {
requested_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AllocationDescription::requested_bytes() const {
return requested_bytes_;
}
inline void AllocationDescription::set_requested_bytes(::google::protobuf::int64 value) {

requested_bytes_ = value;
}

inline void AllocationDescription::clear_allocated_bytes() {
allocated_bytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AllocationDescription::allocated_bytes() const {
return allocated_bytes_;
}
inline void AllocationDescription::set_allocated_bytes(::google::protobuf::int64 value) {

allocated_bytes_ = value;
}

inline void AllocationDescription::clear_allocator_name() {
allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AllocationDescription::allocator_name() const {
return allocator_name_.Get();
}
inline void AllocationDescription::set_allocator_name(const ::std::string& value) {

allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
#if LANG_CXX11
inline void AllocationDescription::set_allocator_name(::std::string&& value) {

allocator_name_.Set(
&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
}
#endif
inline void AllocationDescription::set_allocator_name(const char* value) {
GOOGLE_DCHECK(value != NULL);

allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
GetArenaNoVirtual());
}
inline void AllocationDescription::set_allocator_name(const char* value,
size_t size) {

allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
}
inline ::std::string* AllocationDescription::mutable_allocator_name() {

return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AllocationDescription::release_allocator_name() {

return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void AllocationDescription::set_allocated_allocator_name(::std::string* allocator_name) {
if (allocator_name != NULL) {

} else {

}
allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
GetArenaNoVirtual());
}
inline ::std::string* AllocationDescription::unsafe_arena_release_allocator_name() {
GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);

return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
GetArenaNoVirtual());
}
inline void AllocationDescription::unsafe_arena_set_allocated_allocator_name(
::std::string* allocator_name) {
GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
if (allocator_name != NULL) {

} else {

}
allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
allocator_name, GetArenaNoVirtual());
}

inline void AllocationDescription::clear_allocation_id() {
allocation_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AllocationDescription::allocation_id() const {
return allocation_id_;
}
inline void AllocationDescription::set_allocation_id(::google::protobuf::int64 value) {

allocation_id_ = value;
}

inline void AllocationDescription::clear_has_single_reference() {
has_single_reference_ = false;
}
inline bool AllocationDescription::has_single_reference() const {
return has_single_reference_;
}
inline void AllocationDescription::set_has_single_reference(bool value) {

has_single_reference_ = value;
}

inline void AllocationDescription::clear_ptr() {
ptr_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AllocationDescription::ptr() const {
return ptr_;
}
inline void AllocationDescription::set_ptr(::google::protobuf::uint64 value) {

ptr_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  


}  


#endif  
