#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <inttypes.h>
#include <signal.h>
#include <unistd.h>
#include "countpairs_xi_impl_DOUBLE.h" 
#include "xi_kernels_DOUBLE.c"
#include "defs.h"
#include "utils.h" 
#include "progressbar.h" 
#include "cpu_features.h" 
#include "gridlink_impl_DOUBLE.h"
#include "gridlink_utils_DOUBLE.h" 
#if defined(_OPENMP)
#include <omp.h>
#endif
int interrupt_status_xi_DOUBLE=EXIT_SUCCESS;
void interrupt_handler_countpairs_xi_DOUBLE(int signo)
{
fprintf(stderr,"Received signal = `%s' (signo = %d). Aborting \n",strsignal(signo), signo);
interrupt_status_xi_DOUBLE = EXIT_FAILURE;
}
xi_func_ptr_DOUBLE xi_driver_DOUBLE(const struct config_options *options)
{
static xi_func_ptr_DOUBLE function = NULL;
static isa old_isa = (isa) -1;
if(old_isa == options->instruction_set) {
return function;
}
xi_func_ptr_DOUBLE allfunctions[] = {
xi_fallback_DOUBLE,
#ifdef __SSE4_2__
xi_sse_intrinsics_DOUBLE,
#endif
#ifdef __AVX__
xi_avx_intrinsics_DOUBLE,
#endif
#ifdef __AVX512F__
xi_avx512_intrinsics_DOUBLE,
#endif
};
const int num_functions = sizeof(allfunctions)/sizeof(void *);
const int fallback_index = 0;
#if defined(__AVX512F__) || defined(__AVX__) || defined(__SSE4_2__)
const int highest_isa = get_max_usable_isa();
#endif
int curr_index = 0;
int sse_index = curr_index;
#ifdef __SSE4_2__
curr_index++;
if(highest_isa >= SSE42) sse_index = curr_index;
#endif
int avx_index = curr_index;
#ifdef __AVX__
curr_index++;
if(highest_isa >= AVX) avx_index = curr_index;
#endif
int avx512_index = curr_index;
#ifdef __AVX512F__
curr_index++;
if(highest_isa >= AVX512F) avx512_index = curr_index;
#endif
if( curr_index != num_functions-1) {
fprintf(stderr,"ERROR: Bug in code (current index = %d *should equal* num_functions-1 = %d-1)\n",
curr_index, num_functions);
return NULL;
}
int function_dispatch = num_functions-1;  
if(options->instruction_set >= 0) {
switch(options->instruction_set) {
case(AVX512F):function_dispatch=avx512_index;break;
case(AVX2):
case(AVX):function_dispatch=avx_index;break;
case(SSE42):function_dispatch=sse_index;break;
default:function_dispatch=fallback_index;break;
}
}
if(function_dispatch >= num_functions) {
fprintf(stderr,"In %s> ERROR: Could not resolve the correct function.\n Function index = %d must lie between [0, %d)\n",
__FUNCTION__, function_dispatch, num_functions);
return NULL;
}
function = allfunctions[function_dispatch];
old_isa = options->instruction_set;
if(options->verbose){
if(function_dispatch == fallback_index){
fprintf(stderr,"Using fallback kernel\n");
} else if(function_dispatch == sse_index){
fprintf(stderr,"Using SSE kernel\n");
} else if(function_dispatch == avx_index){
fprintf(stderr,"Using AVX kernel\n");
} else if(function_dispatch == avx512_index){
fprintf(stderr,"Using AVX512 kernel\n");
} else {
fprintf(stderr,"Unknown kernel!\n");
return NULL;
}
}
return function;
}
int countpairs_xi_DOUBLE(const int64_t ND, DOUBLE * restrict X, DOUBLE * restrict Y, DOUBLE * restrict Z,
const double boxsize,
const int numthreads,
const char *binfile,
results_countpairs_xi *results,
struct config_options *options,
struct extra_options *extra)
{
if(options->float_type != sizeof(DOUBLE)) {
fprintf(stderr,"ERROR: In %s> Can only handle arrays of size=%zu. Got an array of size = %zu\n",
__FUNCTION__, sizeof(DOUBLE), options->float_type);
return EXIT_FAILURE;
}
struct timeval t0;
if(options->c_api_timer) {
gettimeofday(&t0, NULL);
}
struct extra_options dummy_extra;
if(extra == NULL){
weight_method_t dummy_method = NONE;
dummy_extra = get_extra_options(dummy_method);
extra = &dummy_extra;
}
int need_weightavg = extra->weight_method != NONE;
if(need_weightavg && extra->weight_method != PAIR_PRODUCT){
fprintf(stderr, "Warning: a weight_method ( = %d ) other than pair_product was provided to countpairs_xi.  The computed results.xi will not be a weighted xi, since we only know how to compute the weighted RR term for pair_product.\n", extra->weight_method);
}
#if defined(_OPENMP)
omp_set_num_threads(numthreads);
#else
(void) numthreads;
#endif
options->periodic = 1;
options->autocorr = 1;
options->sort_on_z = 1;
if(options->max_cells_per_dim == 0) {
fprintf(stderr,"Warning: Max. cells per dimension is set to 0 - resetting to `NLATMAX' = %d\n", NLATMAX);
options->max_cells_per_dim = NLATMAX;
}
for(int i=0;i<3;i++) {
if(options->bin_refine_factors[i] < 1) {
fprintf(stderr,"Warning: bin refine factor along axis = %d *must* be >=1. Instead found bin refine factor =%d\n",
i, options->bin_refine_factors[i]);
reset_bin_refine_factors(options);
break;
}
}
SETUP_INTERRUPT_HANDLERS(interrupt_handler_countpairs_xi_DOUBLE);
double *rupp;
int nbins;
double rmin,rmax;
setup_bins(binfile,&rmin,&rmax,&nbins,&rupp);
if( ! (rmin >= 0.0 && rmax > 0.0 && rmin < rmax && nbins > 0)) {
fprintf(stderr,"Error: Could not setup with R bins correctly. (rmin = %lf, rmax = %lf, with nbins = %d). Expected non-zero rmin/rmax with rmax > rmin and nbins >=1 \n",
rmin, rmax, nbins);
return EXIT_FAILURE;
}
if(get_bin_refine_scheme(options) == BINNING_DFL) {
if(rmax < 0.05*boxsize) {
for(int i=0;i<3;i++) {
options->bin_refine_factors[i] = 1;
}
}
}
int nmesh_x=0,nmesh_y=0,nmesh_z=0;
const DOUBLE xmin = 0.0, xmax=boxsize;
const DOUBLE ymin = 0.0, ymax=boxsize;
const DOUBLE zmin = 0.0, zmax=boxsize;
cellarray_DOUBLE *lattice = gridlink_DOUBLE(ND, X, Y, Z, &(extra->weights0),
xmin, xmax, ymin, ymax, zmin, zmax,
rmax, rmax, rmax,
boxsize, boxsize, boxsize,
options->bin_refine_factors[0], options->bin_refine_factors[1], options->bin_refine_factors[2],
&nmesh_x, &nmesh_y, &nmesh_z, options);
if(lattice == NULL) {
return EXIT_FAILURE;
}
const double avg_np = ((double)ND)/(nmesh_x*nmesh_y*nmesh_z);
const int max_nmesh = fmax(nmesh_x, fmax(nmesh_y, nmesh_z));
if((max_nmesh <= BOOST_CELL_THRESH || avg_np >= BOOST_NUMPART_THRESH)
&& max_nmesh < options->max_cells_per_dim) {
if(options->verbose) {
fprintf(stderr,"%s> gridlink seems inefficient. nmesh = (%d, %d, %d); avg_np = %.3g. ", __FUNCTION__, nmesh_x, nmesh_y, nmesh_z, avg_np);
}
if(get_bin_refine_scheme(options) == BINNING_DFL) {
if(options->verbose) {
fprintf(stderr,"Boosting bin refine factor - should lead to better performance\n");
fprintf(stderr,"xmin = %lf xmax=%lf rmax = %lf\n", xmin, xmax, rmax);
}
free_cellarray_DOUBLE(lattice, nmesh_x * (int64_t) nmesh_y * nmesh_z);
for(int i=0;i<2;i++) {
options->bin_refine_factors[i] += BOOST_BIN_REF;
}
lattice = gridlink_DOUBLE(ND, X, Y, Z, &(extra->weights0),
xmin, xmax, ymin, ymax, zmin, zmax,
rmax, rmax, rmax,
boxsize, boxsize, boxsize,
options->bin_refine_factors[0], options->bin_refine_factors[1], options->bin_refine_factors[2],
&nmesh_x, &nmesh_y, &nmesh_z, options);
if(lattice == NULL) {
return EXIT_FAILURE;
}
} else {
if(options->verbose) {
fprintf(stderr,"Boosting bin refine factor could have helped. However, since custom bin refine factors "
"= (%d, %d, %d) are being used - continuing with inefficient mesh\n", options->bin_refine_factors[0],
options->bin_refine_factors[1], options->bin_refine_factors[2]);
}
}
}
const int64_t totncells = (int64_t) nmesh_x * (int64_t) nmesh_y * (int64_t) nmesh_z;
int64_t num_cell_pairs = 0;
struct cell_pair_DOUBLE *all_cell_pairs = generate_cell_pairs_DOUBLE(lattice, lattice, totncells,
&num_cell_pairs,
options->bin_refine_factors[0],
options->bin_refine_factors[1],
options->bin_refine_factors[2],
nmesh_x, nmesh_y, nmesh_z,
boxsize, boxsize, boxsize,
rmax, -1.0, -1.0, 
options->enable_min_sep_opt,
options->autocorr,
options->periodic, options->periodic, options->periodic);
if(all_cell_pairs == NULL) {
free_cellarray_DOUBLE(lattice, totncells);
free(rupp);
return EXIT_FAILURE;
}
xi_func_ptr_DOUBLE xi_function_DOUBLE = xi_driver_DOUBLE(options);
if(xi_function_DOUBLE == NULL) {
free_cellarray_DOUBLE(lattice, totncells);
free(rupp);
return EXIT_FAILURE;
}
#if defined(_OPENMP)
uint64_t **all_npairs = (uint64_t **) matrix_calloc(sizeof(uint64_t), numthreads, nbins);
DOUBLE **all_ravg = NULL;
if(options->need_avg_sep) {
all_ravg = (DOUBLE **) matrix_calloc(sizeof(DOUBLE),numthreads,nbins);
}
DOUBLE **all_weightavg = NULL;
if(need_weightavg) {
all_weightavg = (DOUBLE **) matrix_calloc(sizeof(DOUBLE),numthreads,nbins);
}
if(all_npairs == NULL || (options->need_avg_sep && all_ravg == NULL) ||
(need_weightavg && all_weightavg == NULL)) {
free_cellarray_DOUBLE(lattice, totncells);
matrix_free((void **) all_npairs, numthreads);
if(options->need_avg_sep) {
matrix_free((void **) all_ravg, numthreads);
}
if(need_weightavg) {
matrix_free((void**) all_weightavg, numthreads);
}
free(rupp);
return EXIT_FAILURE;
}
#else
uint64_t npairs[nbins];
DOUBLE ravg[nbins];
DOUBLE weightavg[nbins];
for(int i=0; i < nbins;i++) {
npairs[i] = 0;
if(options->need_avg_sep) {
ravg[i] = ZERO;
}
if(need_weightavg) {
weightavg[i] = ZERO;
}
}
#endif
DOUBLE rupp_sqr[nbins];
for(int i=0; i < nbins;i++) {
rupp_sqr[i] = rupp[i]*rupp[i];
}
const DOUBLE sqr_rmax=rupp_sqr[nbins-1];
const DOUBLE sqr_rmin=rupp_sqr[0];
int interrupted=0, abort_status = EXIT_SUCCESS;
int64_t numdone=0;
if(options->verbose) {
init_my_progressbar(num_cell_pairs, &interrupted);
}
#if defined(_OPENMP)
#pragma omp parallel shared(numdone, abort_status, interrupt_status_xi_DOUBLE)
{
const int tid = omp_get_thread_num();
uint64_t npairs[nbins];
DOUBLE ravg[nbins];
DOUBLE weightavg[nbins];
for(int i=0;i<nbins;i++) {
npairs[i] = 0;
if(options->need_avg_sep) {
ravg[i] = ZERO;
}
if(need_weightavg) {
weightavg[i] = ZERO;
}
}
#pragma omp for schedule(dynamic) nowait
#endif
for(int64_t icellpair=0;icellpair<num_cell_pairs;icellpair++) {
#if defined(_OPENMP)
#pragma omp flush (abort_status, interrupt_status_xi_DOUBLE)
#endif
if(abort_status == EXIT_SUCCESS && interrupt_status_xi_DOUBLE == EXIT_SUCCESS) {
if(options->verbose) {
#if defined(_OPENMP)
if (omp_get_thread_num() == 0)
#endif
my_progressbar(numdone,&interrupted);
#if defined(_OPENMP)
#pragma omp atomic
#endif
numdone++;
} 
struct cell_pair_DOUBLE *this_cell_pair = &all_cell_pairs[icellpair];
DOUBLE *this_rpavg = options->need_avg_sep ? ravg:NULL;
DOUBLE *this_weightavg = need_weightavg ? weightavg:NULL;
const int64_t icell = this_cell_pair->cellindex1;
const int64_t icell2 = this_cell_pair->cellindex2;
const cellarray_DOUBLE *first = &lattice[icell];
const cellarray_DOUBLE *second = &lattice[icell2];
const int status = xi_function_DOUBLE(first->x, first->y, first->z, &(first->weights), first->nelements,
second->x, second->y, second->z, &(second->weights), second->nelements,
this_cell_pair->same_cell,
sqr_rmax, sqr_rmin, nbins, rupp_sqr,
this_cell_pair->xwrap, this_cell_pair->ywrap, this_cell_pair->zwrap,
this_cell_pair->min_dx, this_cell_pair->min_dy, this_cell_pair->min_dz,
this_cell_pair->closest_x1, this_cell_pair->closest_y1, this_cell_pair->closest_z1,
this_rpavg, npairs,
this_weightavg, extra->weight_method);
abort_status |= status;
}
}
#if defined(_OPENMP)
for(int j=0;j<nbins;j++) {
all_npairs[tid][j] = npairs[j];
if(options->need_avg_sep) {
all_ravg[tid][j] = ravg[j];
}
if(need_weightavg) {
all_weightavg[tid][j] = weightavg[j];
}
}
}
#endif
free(all_cell_pairs);
if(options->copy_particles == 0) {
int64_t *original_index = lattice[0].original_index;
int status = reorder_particles_back_into_original_order_DOUBLE(ND, original_index, X, Y, Z, &(extra->weights0));
if(status != EXIT_SUCCESS) {
return status;
}
}
free_cellarray_DOUBLE(lattice, totncells);
if(abort_status != EXIT_SUCCESS || interrupt_status_xi_DOUBLE != EXIT_SUCCESS) {
free(rupp);
#if defined(_OPENMP)
matrix_free((void **) all_npairs,numthreads);
if(options->need_avg_sep) {
matrix_free((void **) all_ravg, numthreads);
}
if(need_weightavg) {
matrix_free((void **) all_weightavg, numthreads);
}
#endif
return EXIT_FAILURE;
}
if(options->verbose) {
finish_myprogressbar(&interrupted);
}
#if defined(_OPENMP)
uint64_t npairs[nbins];
DOUBLE ravg[nbins];
DOUBLE weightavg[nbins];
for(int i=0;i<nbins;i++) {
npairs[i] = 0;
if(options->need_avg_sep) {
ravg[i] = ZERO;
}
if(need_weightavg) {
weightavg[i] = ZERO;
}
}
for(int i=0;i<numthreads;i++) {
for(int j=0;j<nbins;j++) {
npairs[j] += all_npairs[i][j];
if(options->need_avg_sep) {
ravg[j] += all_ravg[i][j];
}
if(need_weightavg) {
weightavg[j] += all_weightavg[i][j];
}
}
}
matrix_free((void **) all_npairs,numthreads);
if(options->need_avg_sep) {
matrix_free((void **) all_ravg, numthreads);
}
if(need_weightavg) {
matrix_free((void **) all_weightavg, numthreads);
}
#endif
const uint64_t int_fac = 2;
const DOUBLE dbl_fac = (DOUBLE) 2.0;
for(int i=0;i<nbins;i++) {
npairs[i] *= int_fac;
if(options->need_avg_sep) {
ravg[i] *= dbl_fac;
}
if(need_weightavg) {
weightavg[i] *= dbl_fac;
}
}
if(rupp[0] <= 0.0) {
npairs[1] += ND; 
if(need_weightavg){
weight_func_t_DOUBLE weight_func = get_weight_func_by_method_DOUBLE(extra->weight_method);
pair_struct_DOUBLE pair = {.num_weights = extra->weights0.num_weights,
.dx.d=0., .dy.d=0., .dz.d=0.,  
.parx.d=0., .pary.d=0., .parz.d=0.};
for(int64_t j = 0; j < ND; j++){
for(int w = 0; w < pair.num_weights; w++){
pair.weights0[w].d = ((DOUBLE *) extra->weights0.weights[w])[j];
pair.weights1[w].d = ((DOUBLE *) extra->weights0.weights[w])[j];
}
weightavg[1] += weight_func(&pair);
}
}
}
for(int i=0;i<nbins;i++) {
if(npairs[i] > 0) {
if(options->need_avg_sep) {
ravg[i] /= (DOUBLE) npairs[i] ;
}
if(need_weightavg) {
weightavg[i] /= (DOUBLE) npairs[i];
}
}
}
results->nbin = nbins;
results->npairs = my_malloc(sizeof(*(results->npairs)), nbins);
results->xi     = my_malloc(sizeof(*(results->xi))  , nbins);
results->rupp   = my_malloc(sizeof(*(results->rupp))  , nbins);
results->ravg   = my_malloc(sizeof(*(results->ravg))  , nbins);
results->weightavg = my_calloc(sizeof(*(results->weightavg))  , nbins);
if(results->npairs == NULL || results->rupp == NULL ||
results->ravg == NULL || results->xi == NULL || results->weightavg == NULL) {
free_results_xi(results);
free(rupp);
return EXIT_FAILURE;
}
DOUBLE weightsum = (DOUBLE) ND, weight_sqr_sum = (DOUBLE) ND;
if(need_weightavg && extra->weight_method == PAIR_PRODUCT) {
DOUBLE *weights = extra->weights0.weights[0];  
weightsum = 0.;
for(int64_t j = 0; j < ND; j++){
weightsum += weights[j];
weight_sqr_sum += weights[j]*weights[j];
}
}
const DOUBLE prefac_density=weightsum*(weightsum - weightsum/ND)/(boxsize*boxsize*boxsize);
DOUBLE rlow = 0.0 ;
for(int i=0;i<nbins;i++) {
results->npairs[i] = npairs[i];
results->rupp[i]   = rupp[i];
results->ravg[i] = ZERO;
results->weightavg[i] = ZERO;
if(options->need_avg_sep) {
results->ravg[i] = ravg[i];
}
if(need_weightavg) {
results->weightavg[i] = weightavg[i];
}
DOUBLE weight0 = (DOUBLE) results->npairs[i];
if(need_weightavg  && extra->weight_method == PAIR_PRODUCT){
weight0 *= results->weightavg[i];
}
const DOUBLE vol=4.0/3.0*M_PI*(rupp[i]*rupp[i]*rupp[i]-rlow*rlow*rlow);
if(vol > 0.0) {
DOUBLE weightrandom = prefac_density*vol;
if(rlow <= 0.){
weightrandom += weight_sqr_sum;  
}
results->xi[i] = (weight0/weightrandom-1.0);
} else {
results->xi[i] = -2.0;
}
rlow=results->rupp[i];
}
free(rupp);
RESET_INTERRUPT_HANDLERS();
reset_bin_refine_factors(options);
if(options->c_api_timer) {
struct timeval t1;
gettimeofday(&t1, NULL);
options->c_api_time = ADD_DIFF_TIME(t0, t1);
}
return EXIT_SUCCESS;
}
