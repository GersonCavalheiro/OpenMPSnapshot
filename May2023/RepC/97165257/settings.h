#pragma once
#include "macros.h"
#define CPPVARS_TOSTRUCT_INTERNAL_ZL_cstring(x) char x[SETTINGS_MAX_VAR_LEN];
#define CPPVARS_TOSTRUCT_INTERNAL_ZL_uint(x) ZL_uint x;
#define CPPVARS_TOSTRUCT_INTERNAL(a, b) CPPVARS_TOSTRUCT_INTERNAL_ ## a (b)
#define CPPVARS_TOSTRUCT(cppvars) struct { cppvars(CPPVARS_TOSTRUCT_INTERNAL) }
#define CPPVARS_LOAD_INTERNAL_BUF_LEN SETTINGS_MAX_VAR_LEN + CPPVARS_LOAD_IGNORE_CHARACTERS + 2
#define CPPVARS_LOAD_INTERNAL_ZL_cstring(x) \
while (1) { \
if (fgets(CPPVARS_LOAD_TMP_PREFIX ## _b, CPPVARS_LOAD_INTERNAL_BUF_LEN, CPPVARS_LOAD_FILE) == NULL) { \
CPPVARS_LOAD_ERROR_HANDLER(); \
} else { \
CPPVARS_LOAD_TMP_PREFIX ## _len = strlen(CPPVARS_LOAD_TMP_PREFIX ## _b); \
if (CPPVARS_LOAD_TMP_PREFIX ## _len <= CPPVARS_LOAD_IGNORE_CHARACTERS) continue; \
if (CPPVARS_LOAD_TMP_PREFIX ## _len > SETTINGS_MAX_VAR_LEN) CPPVARS_LOAD_ERROR_HANDLER(); \
memcpy(CPPVARS_LOAD_DESTINATION.x, CPPVARS_LOAD_TMP_PREFIX ## _b + CPPVARS_LOAD_IGNORE_CHARACTERS, CPPVARS_LOAD_TMP_PREFIX ## _len - (CPPVARS_LOAD_IGNORE_CHARACTERS + 2)); \
break; \
} \
}
#define CPPVARS_LOAD_INTERNAL_ZL_uint(x) \
while (1) { \
if (fgets(CPPVARS_LOAD_TMP_PREFIX ## _b, CPPVARS_LOAD_INTERNAL_BUF_LEN, CPPVARS_LOAD_FILE) == NULL) { \
CPPVARS_LOAD_ERROR_HANDLER(); \
} else { \
CPPVARS_LOAD_TMP_PREFIX ## _len = strlen(CPPVARS_LOAD_TMP_PREFIX ## _b); \
if (CPPVARS_LOAD_TMP_PREFIX ## _len <= CPPVARS_LOAD_IGNORE_CHARACTERS) continue; \
CPPVARS_LOAD_DESTINATION.x = strtoul(CPPVARS_LOAD_TMP_PREFIX ## _b + CPPVARS_LOAD_IGNORE_CHARACTERS, NULL, 10); \
break; \
} \
}
#define CPPVARS_LOAD_INTERNAL(a, b) CPPVARS_LOAD_INTERNAL_ ## a (b)
#define CPPVARS_LOAD(cppvars) do { \
size_t CPPVARS_LOAD_TMP_PREFIX ## _len; \
char CPPVARS_LOAD_TMP_PREFIX ## _b[CPPVARS_LOAD_INTERNAL_BUF_LEN]; \
cppvars(CPPVARS_LOAD_INTERNAL) \
} while (0)
#define CPPVARS_LDEBUG_INTERNAL_ZL_cstring(x) LDEBUG(#x ": %s\n", CPPVARS_LDEBUG_SOURCE.x);
#define CPPVARS_LDEBUG_INTERNAL_ZL_uint(x) LDEBUG(#x ": %u\n", CPPVARS_LDEBUG_SOURCE.x);
#define CPPVARS_LDEBUG_INTERNAL(a, b) CPPVARS_LDEBUG_INTERNAL_ ## a (b)
#define CPPVARS_LDEBUG(cppvars) do { cppvars(CPPVARS_LDEBUG_INTERNAL) } while (0)