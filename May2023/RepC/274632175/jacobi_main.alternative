#include "jacobi_main.h"
#include "hbext.h"
#include "jacobi_kernels.h"
#define MAX_ITER 1000
extern long iter;
extern int dim0;
extern int dim;
int jacobi_main_csr0(hbmat_t *Acsr, double *x, double *b, int bs){
int M = Acsr->m; int N = Acsr->n;
int *vdiag = Acsr->vdiag;
int *vptr = Acsr->vptr; int *vpos = Acsr->vpos; hbmat_t **vval = Acsr->vval;
int converge = 0;
hbmat_t *Acurrent;
hbmat_t **diagL = malloc(N * sizeof(hbmat_t*) );
double *vtmp = calloc(N * bs , sizeof(double));
double *ltmp = calloc( N * N * bs , sizeof(double));
double *x0 = malloc(N * N * bs * sizeof(double));
double *x1 = malloc(N * N * bs * sizeof(double));
double *b0 = malloc(N * bs * sizeof(double));
double *b1 = malloc(N * bs * sizeof(double));
hbmat_t **A0 = malloc(N * bs *sizeof(hbmat_t*));
int **etree0 = malloc(N * bs * sizeof(int*));
for ( int I = 0; I < N; ++I ) {
etree0[I] = etree(vval[vdiag[I]]);
A0[I] = hb2hbh_hyper_sym_csr(vval[vdiag[I]], bs, etree0[I]);
diagL[I] = ((hbmat_t**)A0[I]->vval)[0];
potrf_sparse_csr(diagL[I]);
int lc = 0;
for ( int J = vptr[I]; J < vptr[I+1]; ++J ) {
if ( vpos[J] != I ){
Acurrent = vval[J];
jacobi_dgemv_csr( Acurrent, &(x[vpos[J] * bs]), &(ltmp[I * N * bs + lc * bs]));
lc++;
}
}
jacobi_dtrsm_csr( diagL[I], &(b[I*bs]), &(b0[I*bs]));
jacobi_dtrsmt_csr( diagL[I], &(b0[I*bs]), &(b1[I*bs]));
for ( int k = 0; k < lc; ++k) {
jacobi_dtrsm_csr( diagL[I], &(ltmp[I * N * bs + k *bs]), &(x0[I * N * bs + k * bs]));
jacobi_dtrsmt_csr( diagL[I], &(x0[I*N*bs+k*bs]), &(x1[I*N*bs+k*bs]) );
jacobi_dsubvv0( b1, vtmp, I, bs, &(x1[I * N * bs+k*bs]));
}
}
#pragma omp taskwait
for ( int k = 0; k < N * bs; ++k) {
x[k] = vtmp[k];
}
iter = 0;
while(!converge && iter < MAX_ITER) {
++iter;
for(int k = 0; k < N * bs; ++k){
vtmp[k] = 0.0;
}
for (int k = 0; k < N * N * bs; ++k)
ltmp[k] = 0.0;
for ( int I = 0; I < N; ++I ) {
int lc = 0;
for ( int J = vptr[I]; J < vptr[I+1]; ++J ) {
if ( vpos[J] != I ){
Acurrent = vval[J];
jacobi_dgemv_csr( Acurrent, &(x[vpos[J] * bs]), &(ltmp[I * N * bs + lc * bs]));
lc++;
}
}
jacobi_dtrsm_csr( diagL[I], &(b[I*bs]), &(b0[I*bs]));
jacobi_dtrsmt_csr( diagL[I], &(b0[I*bs]), &(b1[I*bs]));
for ( int k = 0; k < lc; ++k) {
jacobi_dtrsm_csr( diagL[I], &(ltmp[I * N * bs + k *bs]), &(x0[I * N * bs + k * bs]));
jacobi_dtrsmt_csr( diagL[I], &(x0[I*N*bs+k*bs]), &(x1[I*N*bs+k*bs]) );
jacobi_dsubvv0( b1, vtmp, I, bs, &(x1[I * N * bs+k*bs]));
}
}
#pragma omp taskwait
for ( int k = 0; k < N * bs; ++k) {
x[k] = vtmp[k];
}
converge = 0;
}
free(x0); free(x1);
free(b0); free(b1);
free(vtmp); free(ltmp);
for(int k = 0; k < N; ++k){
free(etree0[k]);
}
return 0;
}
int jacobi_main_csr1(hbmat_t *Acsr, double *x, double *b, int bs){
int M = Acsr->m; int N = Acsr->n;
int *vdiag = Acsr->vdiag;
int *vptr = Acsr->vptr; int *vpos = Acsr->vpos; hbmat_t **vval = Acsr->vval;
int converge = 0;
hbmat_t *Acurrent;
hbmat_t **diagL = malloc(N * sizeof(hbmat_t*) );
double *vtmp = malloc(N * bs * sizeof(double));
double *ltmp = malloc(N * N * bs * sizeof(double));
double *x0 = malloc(N * bs * sizeof(double));
double *x1 = malloc(N * bs * sizeof(double));
hbmat_t **A0 = malloc(dim *sizeof(hbmat_t*));
int **etree0 = malloc(dim * sizeof(int*));
for(int k =0; k < N * N * bs; ++k)
ltmp[k] = 0.0;
for(int k = 0; k < dim; ++k){
vtmp[k] = 0.0;
}
int **work = malloc(N * sizeof(int*));
for(int k = 0; k < N; ++k)
work[k] = malloc(bs*sizeof(int));
for ( int I = 0; I < N; ++I ) {
etree0[I] = etree(vval[vdiag[I]]);
A0[I] = hb2hbh_hyper_sym_csr(vval[vdiag[I]], bs, etree0[I]);
diagL[I] = ((hbmat_t**)A0[I]->vval)[0];
potrf_sparse_csr(diagL[I]);
int lc = 0;
for ( int J = vptr[I]; J < vptr[I+1]; ++J ) {
if ( vpos[J] != I ){
Acurrent = vval[J];
jacobi_dgemv_csr( Acurrent, &(x[vpos[J] * bs]), &(ltmp[I * N * bs + lc * bs]));
++lc;
}
}
jacobi_dsubvv2(b,vtmp,I,bs, &(ltmp[I*N*bs]), lc);
jacobi_dtrsm_csr( diagL[I], &(vtmp[I * bs]), &(x0[I*bs]));
jacobi_dtrsmt_csr( diagL[I], &(x0[I*bs]), &(x1[I*bs]) );
}
#pragma omp taskwait
for ( int k = 0; k < dim; ++k) {
x[k] = x1[k];
}
puts("iter 1 through");
iter = 0;
while(!converge && iter < MAX_ITER) {
++iter;
for(int k = 0; k < N*N*bs; ++k){
ltmp[k] = 0.0;
}
for(int k = 0; k < dim; ++k){
vtmp[k] = 0.0;
}
for ( int I = 0; I < N; ++I ) {
int lc = 0;
for ( int J = vptr[I]; J < vptr[I+1]; ++J ) {
if ( vpos[J] != I ){
Acurrent = vval[J];
jacobi_dgemv_csr( Acurrent, &(x[vpos[J] * bs]), &(ltmp[I * N * bs + lc * bs]));
++lc;
}
}
jacobi_dsubvv2(b,vtmp,I,bs, &(ltmp[I*N*bs]), lc);
jacobi_dtrsm_csr( diagL[I], &(vtmp[I * bs]), &(x0[I*bs]) );
jacobi_dtrsmt_csr( diagL[I], &(x0[I*bs]), &(x1[I*bs]) );
}
#pragma omp taskwait
for ( int k = 0; k < dim; ++k) {
vtmp[k] = x1[k];
}
for ( int k = 0; k < dim; ++k) {
x[k] = vtmp[k];
}
converge = 0;
}
puts("through");
free(x0); free(x1);
return 0;
}
#if 0
int jacobi_main_csr1(hbmat_t *Acsr, double *x, double *b, int bs){
int M = Acsr->m; int N = Acsr->n;
int *vdiag = Acsr->vdiag;
int *vptr = Acsr->vptr; int *vpos = Acsr->vpos; hbmat_t **vval = Acsr->vval;
int converge = 0;
hbmat_t *Adiag, *Adiag0, *Acurrent;
hbmat_t **diagL = malloc(N * sizeof(hbmat_t*) );
double *vtmp = malloc(dim * sizeof(double));
double *ltmp = malloc(N * N * bs * sizeof(double));
double *x0 = malloc(N * bs* sizeof(double*));
double *x1 = malloc(dim * sizeof(double));
hbmat_t **A0 = malloc(dim *sizeof(hbmat_t*));
int **etree0 = malloc(dim * sizeof(int*));
for(int k =0; k < N * N * bs; ++k)
ltmp[k] = 0.0;
for(int k = 0; k < dim; ++k){
vtmp[k] = 0.0;
}
int **work = malloc(N * sizeof(int*));
for(int k = 0; k < N; ++k)
work[k] = malloc(bs*sizeof(int));
for ( int I = 0; I < N; ++I ) {
etree0[I] = etree(vval[vdiag[I]]);
A0[I] = hb2hbh_hyper_sym_csr(vval[vdiag[I]], bs, etree0[I]);
diagL[I] = ((hbmat_t**)A0[I]->vval)[0];
potrf_sparse_csr(diagL[I]);
for ( int J = vptr[I]; J < vptr[I+1]; ++J ) {
if ( vpos[J] != I ){
Acurrent = vval[J];
jacobi_dgemv_csr( Acurrent, &(x[vpos[J] * bs]), &(vtmp[I * bs]) );
}
}
jacobi_dsubvv1( b, vtmp, I, bs );
jacobi_dtrsm_csr( diagL[I], &(vtmp[I * bs]), &(x0[I*bs]));
jacobi_dtrsmt_csr( diagL[I], &(x0[I*bs]), &(x1[I*bs]) );
}
#pragma omp taskwait
for ( int k = 0; k < dim; ++k) {
x[k] = x1[k];
}
iter = 0;
while(!converge && iter < MAX_ITER) {
++iter;
for(int k = 0; k < dim; ++k){
vtmp[k] = 0.0;
}
for ( int I = 0; I < N; ++I ) {
for ( int J = vptr[I]; J < vptr[I+1]; ++J ) {
if ( vpos[J] != I ){
Acurrent = vval[J];
jacobi_dgemv_csr( Acurrent, &(x[vpos[J] * bs]), &(vtmp[I * bs]) );
}
}
jacobi_dsubvv1( b, vtmp, I, bs );
jacobi_dtrsm_csr( diagL[I], &(vtmp[I * bs]), &(x0[I*bs]) );
jacobi_dtrsmt_csr( diagL[I], &(x0[I*bs]), &(x1[I*bs]) );
}
#pragma omp taskwait
for ( int k = 0; k < dim; ++k) {
vtmp[k] = x1[k];
}
converge = 1;
for ( int k = 0; k < dim0 && converge; ++k) {
if ( x[k] - vtmp[k] ) 
converge = 0;
}
for ( int k = 0; k < dim; ++k) {
x[k] = vtmp[k];
}
converge = 0;
}
puts("through");
free(x0); free(x1);
return 0;
}
#endif
