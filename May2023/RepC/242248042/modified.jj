

PARSER_BEGIN(CParser)
import java.util.*;

public class CParser {
public static Hashtable types;
static {
types = new Hashtable();
types.put("__builtin_va_list",Boolean.TRUE);
types.put("bool", Boolean.TRUE);
types.put("_Bool", Boolean.TRUE);
}


public boolean flag = true;

public CParser() {
}

public Stack typedefParsingStack = new Stack();

public boolean isType(String type) {
if (types.get(type) != null) {
return true;
}
return false;
}

public void addType(String type) {
types.put(type, Boolean.TRUE);
}

public void printTypes() {
Enumeration enum1 = types.keys();
while (enum1.hasMoreElements()) {
System.out.println(enum1.nextElement());
}
}
}

PARSER_END(CParser)

TOKEN_MGR_DECLS :
{
int attributeMatchingParens;
}

SKIP : {
" "
|  "\t"
|  "\n"
|  "\r"
|  "\f"
|  <"
|  <"
"__attribute__" { attributeMatchingParens = 0; } : AfterAttrib
| "__asm" { attributeMatchingParens = 0; } : AfterAttrib

| "__asm__" { attributeMatchingParens = 0; } : AfterAttrib
| "asm" { attributeMatchingParens = 0; } : AfterAttrib
}

<AfterAttrib> MORE : {
"(" { attributeMatchingParens++; }
|	")" { attributeMatchingParens--; if (attributeMatchingParens == 0) SwitchTo(DEFAULT); }
|	<~[]> 
}


<DEFAULT,Omp> TOKEN : {
<RESTRICT: ("__")? "restrict" ("__")?> |
<CONTINUE: "continue"> |
<VOLATILE: "volatile"> |
<REGISTER: "register"> |
<CCONST: "__const"> |
<INLINE: "inline"> |
<CINLINED: "__inline"> |
<CINLINED2: "__inline__"> |
<CSIGNED: "__signed"> |
<CSIGNED2: "__signed__"> |
<UNSIGNED: "unsigned"> |
<TYPEDEF: "typedef"> |
<DFLT: "default"> |
<DOUBLE: "double"> |
<SWITCH: "switch"> |
<RETURN: "return"> |
<EXTERN: "extern"> |
<STRUCT: "struct"> |
<STATIC: "static"> |
<SIGNED: "signed"> |
<WHILE: "while"> |
<BREAK: "break"> |
<UNION: "union"> |
<CONST: "const"> |
<FLOAT: "float"> |
<SHORT: "short"> |
<ELSE: "else"> |
<CASE: "case"> |
<LONG: "long"> |
<ENUM: "enum"> |
<AUTO: "auto"> |
<VOID: "void"> |
<CHAR: "char"> |
<GOTO: "goto"> |
<FOR: "for"> |
<INT: "int"> |
<IF: "if"> |
<DO: "do"> |
<SIZEOF: "sizeof"> |
<EXTENSION: "__extension__"> |
<CATOMIC: "_Atomic"> |
<COMPLEX: "_Complex">
}



<DEFAULT,AfterCrossbar,Pragma,Omp>
TOKEN : {
<ELLIPSIS: "...">
| <OP_SLASS: "<<=">
| <OP_SRASS: ">>=">
| <OP_EQ: "==">
| <OP_AND: "&&">
| <OP_OR: "||">
| <OP_MULASS: "*=">
| <OP_DIVASS: "/=">
| <OP_MODASS: "%=">
| <OP_ADDASS: "+=">
| <OP_SUBASS: "-=">
| <OP_ANDASS: "&=">
| <OP_XORASS: "^=">
| <OP_ORASS: "|=">
| <OP_SL: "<<">
| <OP_SR: ">>">
| <OP_NEQ: "!=">
| <OP_GE: ">=">
| <OP_LE: "<=">
| <OP_DEREF: "->">
| <OP_INCR: "++">
| <OP_DECR: "--">
| <OP_GT: ">">
| <OP_LT: "<">
| <OP_ADD: "+">
| <OP_SUB: "-">
| <OP_MUL: "*">
| <OP_DIV: "/">
| <OP_MOD: "%">
| <OP_ASS: "=">
| <OP_BITAND: "&">
| <OP_BITOR: "|">
| <OP_BITXOR: "^">
| <OP_NOT: "!">
| <OP_BITNOT: "~">
| <COLON: ":">
| <SEMICOLON: ";">
| <QUESTION: "?">
| <DOT: ".">
| <LEFTPAREN: "(">
| <RIGHTPAREN: ")">
| <LEFTBRACKET: "[">
| <RIGHTBRACKET: "]">
| <LEFTBRACE: "{">
| <RIGHTBRACE: "}">
| <COMMA: ",">
}

TOKEN : {
<CROSSBAR: "#"> : AfterCrossbar
}

<AfterCrossbar,Cpp> TOKEN : {
<UNKNOWN_CPP: ( "\r" | "\n" )+> : DEFAULT
}
<AfterCrossbar> TOKEN : {
<PRAGMA: "pragma"> : Pragma
}

<AfterCrossbar> MORE : {

"include" : Cpp
| "import" : Cpp
| "define" : Cpp
| "ifndef" : Cpp
| "ident" : Cpp
| "undef" : Cpp
| "ifdef" : Cpp
| "endif" : Cpp
| "line" : Cpp
| "else" : Cpp
| "if" : Cpp
| "elif" : Cpp
}

<Cpp> SKIP : {
<"\\" ( ( "\r" ["\n"] ) | "\n" )>
}

<Cpp> MORE : {
<~[]>
}

<Pragma,Omp> SKIP : {
" "
|  "\t"
|  <"
|  <"
flag = true;
typedefParsingStack.push(Boolean.TRUE);
}
}

void TypeSpecifier() : {}
{
(<VOID> | <CHAR> | <SHORT> | <INT> | <LONG> | <FLOAT> | <DOUBLE> | <SIGNED> |
<UNSIGNED> | StructOrUnionSpecifier() | EnumSpecifier() | 

LOOKAHEAD({ (!typedefParsingStack.empty() && ((Boolean)typedefParsingStack.peek()).booleanValue() && flag == true) || 
((typedefParsingStack.empty() || !((Boolean)typedefParsingStack.peek()).booleanValue()) && isType(getToken(1).image))}) TypedefName() 
)
{

if((!typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue())
flag = false;	
}
}

void TypeQualifier() : {}
{
<RESTRICT> | <CONST> | <VOLATILE> | <INLINE> | <CCONST> | <CINLINED> | <CINLINED2> | <CSIGNED> | <CSIGNED2> | <CATOMIC> | <EXTENSION> | <COMPLEX>
}

void StructOrUnionSpecifier() : {}
{
{

typedefParsingStack.push(Boolean.FALSE);
}

(LOOKAHEAD(4) StructOrUnionSpecifierWithList() 
| StructOrUnionSpecifierWithId())

{
typedefParsingStack.pop();
}
}

void StructOrUnionSpecifierWithList() : {}
{
StructOrUnion() (<IDENTIFIER>)? "{" StructDeclarationList() "}"

} 

void StructOrUnionSpecifierWithId() : {}
{
StructOrUnion() <IDENTIFIER>

}

void StructOrUnion() : {}
{
<STRUCT> | <UNION>
}

void StructDeclarationList() : {}
{
(StructDeclaration())+
}

void InitDeclaratorList() : {}
{
InitDeclarator() ("," InitDeclarator())*
{

if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue())
{
typedefParsingStack.pop();
}
}	
}

void InitDeclarator() : {}
{
Declarator() ("=" Initializer())?
}

void StructDeclaration() : {}
{
SpecifierQualifierList() StructDeclaratorList() ";"
}

void SpecifierQualifierList() : {}
{
(ASpecifierQualifier())+
}

void ASpecifierQualifier() : {}
{
TypeSpecifier() 
| TypeQualifier() 
}

void StructDeclaratorList() : {}
{
StructDeclarator() ( "," StructDeclarator() )*
}

void StructDeclarator() : {}
{
StructDeclaratorWithDeclarator()
| StructDeclaratorWithBitField()	
}


void StructDeclaratorWithDeclarator() : {}
{
Declarator() (":" ConstantExpression())?
}

void StructDeclaratorWithBitField() : {}
{
":" ConstantExpression()
}

void EnumSpecifier() : {}
{
LOOKAHEAD(3) EnumSpecifierWithList() 
| EnumSpecifierWithId()
}

void EnumSpecifierWithList(): {}
{
<ENUM> (<IDENTIFIER>)? "{" EnumeratorList() "}"
}

void EnumSpecifierWithId(): {}
{
<ENUM> <IDENTIFIER>
}

void EnumeratorList() : {}
{
Enumerator() ("," Enumerator())*
}

void Enumerator() : {}
{
<IDENTIFIER> ("=" ConstantExpression())?
}

void Declarator() : {}
{
(Pointer())? DirectDeclarator()
}

void DirectDeclarator() : {}
{
IdentifierOrDeclarator() DeclaratorOpList() 
}

void DeclaratorOpList() : {}
{
{typedefParsingStack.push(Boolean.FALSE);}
(ADeclaratorOp())*
{typedefParsingStack.pop();}
}

void ADeclaratorOp() : {}
{
DimensionSize() 
| LOOKAHEAD(3) ParameterTypeListClosed() 
| OldParameterListClosed()
}

void DimensionSize () : {}
{
"[" (ConstantExpression())? "]"
}

void ParameterTypeListClosed() : {}
{
"(" (ParameterTypeList())? ")"
}

void OldParameterListClosed() : {}
{
"(" (OldParameterList())? ")"
}

void IdentifierOrDeclarator() : {}
{
<IDENTIFIER>
{ 

if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
addType(n2.image);
}
}
| "(" Declarator() ")"
}

void Pointer() : {}
{
("*" | "^")  (TypeQualifierList())? (Pointer())?
}

void TypeQualifierList() : {}
{
(TypeQualifier())+
}

void ParameterTypeList() : {}
{
ParameterList() ( "," "...")?
}

void ParameterList() : {}
{
ParameterDeclaration() (LOOKAHEAD(2) "," ParameterDeclaration())*
}

void ParameterDeclaration() : {}
{
DeclarationSpecifiers() ParameterAbstraction()
}

void ParameterAbstraction() : {}
{
LOOKAHEAD(Declarator()) Declarator() | AbstractOptionalDeclarator() 
}

void AbstractOptionalDeclarator() : {}
{
(AbstractDeclarator())?
}

void OldParameterList() : {}
{
<IDENTIFIER> ("," <IDENTIFIER>)*
}

void Initializer() : {}
{
AssignmentExpression() | ArrayInitializer()
}

void ArrayInitializer() : {}
{
"{" InitializerList() (",")? "}"
}

void InitializerList() : {}
{
Initializer() (LOOKAHEAD(2) "," Initializer())*
}

void TypeName() : {}
{
SpecifierQualifierList() (AbstractDeclarator())?

}

void AbstractDeclarator() : {}
{
LOOKAHEAD(3) AbstractDeclaratorWithPointer() | DirectAbstractDeclarator() 
}

void AbstractDeclaratorWithPointer() : {}
{
Pointer() (DirectAbstractDeclarator())? 
}

void DirectAbstractDeclarator() : {}
{
AbstractDimensionOrParameter() DimensionOrParameterList()
}

void AbstractDimensionOrParameter() : {}
{
LOOKAHEAD(3) AbstractDeclaratorClosed() | DimensionSize() | ParameterTypeListClosed() 
}

void AbstractDeclaratorClosed() : {}
{
"(" AbstractDeclarator() ")" 
}

void DimensionOrParameterList() : {}
{	
(ADimensionOrParameter())*
}

void ADimensionOrParameter() : {}
{
DimensionSize()
| ParameterTypeListClosed()
}

void TypedefName() : {}
{
<IDENTIFIER>
}

void Statement() : {}
{
LOOKAHEAD(2) LabeledStatement() 
| ExpressionStatement() 
| CompoundStatement() 
| SelectionStatement() 
| IterationStatement() 
| JumpStatement() 
| LOOKAHEAD(4) UnknownPragma() 
| LOOKAHEAD(4) OmpConstruct() 
| LOOKAHEAD(2) OmpDirective() 
| UnknownCpp()
}

void UnknownCpp() : {}
{
"#" <UNKNOWN_CPP> 
}

void OmpEol() : {}
{
<OMP_CR> | <OMP_NL>
}

void OmpConstruct() : {}
{
LOOKAHEAD(6) ParallelConstruct()
| LOOKAHEAD(4) ForConstruct()
| LOOKAHEAD(4) SectionsConstruct()
| LOOKAHEAD(4) SingleConstruct()
| LOOKAHEAD(6) ParallelForConstruct()
| LOOKAHEAD(6) ParallelSectionsConstruct()
| LOOKAHEAD(4) TaskConstruct()
| LOOKAHEAD(4) MasterConstruct()
| LOOKAHEAD(4) CriticalConstruct()
| LOOKAHEAD(4) AtomicConstruct()
| OrderedConstruct()

}

void OmpDirective() : {}
{
LOOKAHEAD(4) BarrierDirective()
| LOOKAHEAD(4) TaskwaitDirective()
| LOOKAHEAD(4) TaskyieldDirective()
| FlushDirective()	
}

void ParallelConstruct() : {}
{
OmpPragma() ParallelDirective() Statement()
}

void OmpPragma() : {}
{
"#" <PRAGMA> <OMP>
}

void UnknownPragma() : {}
{	
"#" <PRAGMA> <UNKNOWN_CPP>
}

void ParallelDirective() : {}
{
<PARALLEL> UniqueParallelOrDataClauseList() OmpEol()
}

void UniqueParallelOrDataClauseList() : {}
{
(AUniqueParallelOrDataClause())*
}

void AUniqueParallelOrDataClause() : {}
{ 
UniqueParallelClause()
| DataClause() 
}


void UniqueParallelClause() : {}
{
IfClause()
| NumThreadsClause()
}

void IfClause() : {}
{
<IF> "(" Expression() ")"
}

void NumThreadsClause() : {}
{
<NUM_THREADS> "(" Expression() ")"
}

void DataClause() : {}
{
OmpPrivateClause()
| OmpFirstPrivateClause()
| OmpLastPrivateClause()
| OmpSharedClause()
| OmpCopyinClause()
| LOOKAHEAD(OmpDfltSharedClause()) OmpDfltSharedClause()
| OmpDfltNoneClause()
| OmpReductionClause()
}

void OmpPrivateClause() : {}
{
<PRIVATE> "(" VariableList() ")"
}

void OmpFirstPrivateClause() : {}
{
<FIRSTPRIVATE> "(" VariableList() ")"
}

void OmpLastPrivateClause() : {}
{
<LASTPRIVATE> "(" VariableList() ")"
}

void OmpSharedClause() : {}
{
<SHARED> "(" VariableList() ")"
}

void OmpCopyinClause() : {}
{
<COPYIN> "(" VariableList() ")"
}

void OmpDfltSharedClause() : {}
{
<DFLT> "(" <SHARED> ")"
}

void OmpDfltNoneClause() : {}
{
<DFLT> "(" <NONE> ")"
}

void OmpReductionClause() : {}
{
<REDUCTION> "(" ReductionOp() ":" VariableList() ")"
}

void ForConstruct() : {}
{
OmpPragma() ForDirective() OmpForHeader() Statement()
}

void ForDirective() : {}
{
<FOR> UniqueForOrDataOrNowaitClauseList() OmpEol()
}

void UniqueForOrDataOrNowaitClauseList() : {}
{
(AUniqueForOrDataOrNowaitClause())*
}

void AUniqueForOrDataOrNowaitClause() : {}
{
UniqueForClause()
| DataClause()
| NowaitClause() 
}

void NowaitClause() : {}
{
<NOWAIT>
}

void UniqueForClause() : {}
{
<ORDERED>
| UniqueForClauseSchedule()
| UniqueForCollapse()
}

void UniqueForCollapse() : {}
{
<COLLAPSE> "(" Expression() ")"	
}

void UniqueForClauseSchedule(): {}
{
<SCHEDULE> "(" ScheduleKind() ("," Expression())? ")"
}

void ScheduleKind() : {}
{
<STATIC> 
| <DYNAMIC> 
| <GUIDED> 
| <RUNTIME>
}

void OmpForHeader() : {}
{
<FOR> "(" OmpForInitExpression() ";" OmpForCondition() ";" OmpForReinitExpression() ")"
}

void OmpForInitExpression() : {}
{
<IDENTIFIER> "=" Expression()
}

void OmpForCondition() : {}
{
LOOKAHEAD(2) OmpForLTCondition()
| LOOKAHEAD(2) OmpForLECondition()
| LOOKAHEAD(2) OmpForGTCondition()
| OmpForGECondition()
}

void OmpForLTCondition() : {}
{
<IDENTIFIER> "<" Expression()
}

void OmpForLECondition() : {}
{
<IDENTIFIER> "<=" Expression()
}

void OmpForGTCondition() : {}
{
<IDENTIFIER> ">" Expression()
}

void OmpForGECondition() : {}
{
<IDENTIFIER> ">=" Expression()
}

void OmpForReinitExpression() : {}
{
LOOKAHEAD(PostIncrementId()) PostIncrementId()
| LOOKAHEAD(PostDecrementId()) PostDecrementId()
| LOOKAHEAD(PreIncrementId()) PreIncrementId()
| LOOKAHEAD(PreDecrementId()) PreDecrementId()
| LOOKAHEAD(2) ShortAssignPlus()	
| LOOKAHEAD(2) ShortAssignMinus()
| LOOKAHEAD(4) OmpForAdditive()
| LOOKAHEAD(4) OmpForSubtractive()
| OmpForMultiplicative()
}	


void PostIncrementId() : {}
{
<IDENTIFIER> "++"
}

void PostDecrementId() : {}
{
<IDENTIFIER> "--"
}

void PreIncrementId() : {}
{
"++" <IDENTIFIER>
}

void PreDecrementId() : {}
{
"--" <IDENTIFIER>
}

void ShortAssignPlus() : {}
{
<IDENTIFIER> "+=" Expression() 
}

void ShortAssignMinus() : {}
{
<IDENTIFIER> "-=" Expression() 
}

void OmpForAdditive() : {}
{
<IDENTIFIER> "=" <IDENTIFIER> "+" AdditiveExpression() 
}

void OmpForSubtractive() : {}
{
<IDENTIFIER> "=" <IDENTIFIER> "-" AdditiveExpression() 
}

void OmpForMultiplicative() : {}
{
<IDENTIFIER> "=" MultiplicativeExpression() "+" <IDENTIFIER>
}

void SectionsConstruct() : {} 
{
OmpPragma() <SECTIONS> NowaitDataClauseList() OmpEol() SectionsScope()
}

void NowaitDataClauseList() : {}
{
(ANowaitDataClause())*
}

void ANowaitDataClause() : {}
{
NowaitClause()
| DataClause() 
}

void SectionsScope() : {}
{
"{" (LOOKAHEAD(4) Statement())? (ASection())* "}"
}

void ASection() : {}
{
OmpPragma() <SECTION> OmpEol() Statement() 
}

void SingleConstruct() : {}
{
OmpPragma() <SINGLE> SingleClauseList() OmpEol() Statement()
}

void SingleClauseList() : {}
{
(ASingleClause())*
}

void ASingleClause() : {}
{
NowaitClause()
| DataClause()
| OmpCopyPrivateClause()
}

void OmpCopyPrivateClause() : {}
{
<COPYPRIVATE> "(" VariableList()  ")"
}

void TaskConstruct() : {}
{
OmpPragma() <TASK> (TaskClause())* OmpEol() Statement()
}

void TaskClause() : {}
{
DataClause()
| UniqueTaskClause()
}

void UniqueTaskClause() : {}
{
IfClause()
| FinalClause() 
| UntiedClause()
| MergeableClause()
}

void FinalClause() : {}
{
<FINAL> "(" Expression() ")" 
}	

void UntiedClause() : {}
{
<UNTIED>
}

void MergeableClause() : {}
{
<MERGEABLE>
}

void ParallelForConstruct() : {}
{
OmpPragma() <PARALLEL> <FOR> UniqueParallelOrUniqueForOrDataClauseList() OmpEol() OmpForHeader() Statement()
}

void UniqueParallelOrUniqueForOrDataClauseList() : {}
{
(AUniqueParallelOrUniqueForOrDataClause())*
}

void AUniqueParallelOrUniqueForOrDataClause() : {}
{
UniqueParallelClause()
| UniqueForClause()
| DataClause() 
}

void ParallelSectionsConstruct() : {}
{
OmpPragma() <PARALLEL> <SECTIONS> UniqueParallelOrDataClauseList() OmpEol() SectionsScope()
}

void MasterConstruct() : {}
{
OmpPragma() <MASTER> OmpEol() Statement()
}

void CriticalConstruct() : {}
{
OmpPragma() <CRITICAL> (RegionPhrase())? OmpEol() Statement()
}

void RegionPhrase() : {}
{
"(" <IDENTIFIER> ")" 
}

void AtomicConstruct() : {}
{
OmpPragma() <ATOMIC> (AtomicClause())? OmpEol() ExpressionStatement()
}

void AtomicClause() : {}
{
<READ>
| <WRITE>
| <UPDATE>
| <CAPTURE>
}

void FlushDirective() : {}
{
OmpPragma() <FLUSH> (FlushVars())? OmpEol()
}

void FlushVars() : {}
{
"(" VariableList() ")"
}

void OrderedConstruct() : {}
{
OmpPragma() <ORDERED> OmpEol() Statement()
}

void BarrierDirective() : {}
{
OmpPragma() <BARRIER> OmpEol()
}

void TaskwaitDirective() : {}
{
OmpPragma() <TASKWAIT> OmpEol() 
}

void TaskyieldDirective() : {}
{
OmpPragma() <TASKYIELD> OmpEol() 
}

void ThreadPrivateDirective() : {}
{
OmpPragma() <THREADPRIVATE> "(" VariableList() ")" OmpEol()
}

void DeclareReductionDirective() : {}
{
OmpPragma() <DECLARE> <REDUCTION> "(" ReductionOp() ":" ReductionTypeList() ":" Expression()")" (InitializerClause())? OmpEol()
}

void ReductionTypeList() : {}
{
(TypeSpecifier())*
}

void InitializerClause() : {}
{
LOOKAHEAD(5) AssignInitializerClause()
| ArgumentInitializerClause()
}

void AssignInitializerClause() : {}
{
<INITIALIZER> "(" <IDENTIFIER> "=" Initializer() ")"
}

void ArgumentInitializerClause() : {}
{
<INITIALIZER> "(" <IDENTIFIER> "("ExpressionList() ")" ")"
}

void ReductionOp() : {}
{
<IDENTIFIER> |  "+" | "*" | "-" | "&" | "^" | "|" | "||" | "&&"
}

void VariableList() : {}
{
<IDENTIFIER> ( "," <IDENTIFIER> )*
}

void LabeledStatement() : {}
{
SimpleLabeledStatement()
| CaseLabeledStatement()
| DefaultLabeledStatement()
}

void SimpleLabeledStatement() : {}
{
<IDENTIFIER> ":" Statement()
}

void CaseLabeledStatement() : {}
{
<CASE> ConstantExpression() ":" Statement()
}

void DefaultLabeledStatement() : {}
{
<DFLT> ":" Statement()
}

void ExpressionStatement() : {}
{
(Expression())? ";"
}

void CompoundStatement() : {}
{
"{" 
(CompoundStatementElement())*
"}"
}

void CompoundStatementElement() : {}
{
LOOKAHEAD(Declaration()) Declaration()
| Statement()
}

void SelectionStatement() : {}
{
IfStatement()
| SwitchStatement()
}

void IfStatement() : {}
{
<IF> "(" Expression() ")" Statement() (LOOKAHEAD(2) <ELSE> Statement())? 
}

void SwitchStatement() : {}
{
<SWITCH> "(" Expression() ")" Statement() 
}


void IterationStatement() : {}
{
WhileStatement()
| DoStatement()
| ForStatement()
}

void WhileStatement() : {}
{
<WHILE> "(" Expression() ")" Statement() 
}

void DoStatement() : {}
{
<DO> Statement() <WHILE> "(" Expression() ")" ";" 
}

void ForStatement() : {}
{
<FOR> "(" (Expression())? ";" (Expression())? ";" (Expression())? ")" Statement()
}

void JumpStatement() : {}
{
GotoStatement()
| ContinueStatement()
| BreakStatement()
| ReturnStatement()
}

void GotoStatement() : {}
{
<GOTO> <IDENTIFIER> ";"
}

void ContinueStatement() : {}
{
<CONTINUE> ";"
}

void BreakStatement() : {}
{
<BREAK> ";"
}

void ReturnStatement() : {}
{
<RETURN> (Expression())? ";"
}

void Expression() : {}
{
AssignmentExpression() ( "," AssignmentExpression() )*
}

void AssignmentExpression() : {}
{
LOOKAHEAD(UnaryExpression() AssignmentOperator()) NonConditionalExpression()
| LOOKAHEAD(3) ConditionalExpression()
}

void NonConditionalExpression() : {}
{
UnaryExpression() AssignmentOperator() AssignmentExpression()
}

void AssignmentOperator() : {}
{
"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|="
}

void ConditionalExpression() : {}
{
LogicalORExpression() ( "?" Expression() ":" ConditionalExpression() )?
}

void ConstantExpression() : {}
{
ConditionalExpression()
}

void LogicalORExpression() : {}
{
LogicalANDExpression() ( "||" LogicalORExpression() )?
}

void LogicalANDExpression() : {}
{
InclusiveORExpression() ( "&&" LogicalANDExpression() )?
}

void InclusiveORExpression() : {}
{
ExclusiveORExpression() ( "|" InclusiveORExpression() )?
}

void ExclusiveORExpression() : {}
{
ANDExpression() ( "^" ExclusiveORExpression() )?
}

void ANDExpression() : {}
{
EqualityExpression() ( "&" ANDExpression() )?
}

void EqualityExpression() : {}
{
RelationalExpression() ( EqualOptionalExpression() )?
}

void EqualOptionalExpression() : {}
{ 	
EqualExpression()
| NonEqualExpression()
}

void EqualExpression() : {}
{
"==" EqualityExpression()
}

void NonEqualExpression() : {}
{
"!=" EqualityExpression()
}


void RelationalExpression() : {}
{
ShiftExpression() ( RelationalOptionalExpression() )?
}

void RelationalOptionalExpression() : {}
{
RelationalLTExpression()
| RelationalGTExpression()
| RelationalLEExpression()
| RelationalGEExpression()
}

void RelationalLTExpression() : {}
{
"<" RelationalExpression()
}

void RelationalGTExpression() : {}
{
">" RelationalExpression()
}

void RelationalLEExpression() : {}
{
"<=" RelationalExpression()
}

void RelationalGEExpression() : {}
{
">=" RelationalExpression()
}

void ShiftExpression() : {}
{	
AdditiveExpression() (ShiftOptionalExpression())?
}

void ShiftOptionalExpression() : {}
{
ShiftLeftExpression()
| ShiftRightExpression()
}

void ShiftLeftExpression() : {}
{	
">>" ShiftExpression()
}

void ShiftRightExpression() : {}
{	
"<<" ShiftExpression()
}

void AdditiveExpression() : {}
{
MultiplicativeExpression() ( AdditiveOptionalExpression() )?
}

void AdditiveOptionalExpression() : {}
{
AdditivePlusExpression()
| AdditiveMinusExpression()
}

void AdditivePlusExpression() : {}
{
"+" AdditiveExpression()
}

void AdditiveMinusExpression() : {}
{
"-" AdditiveExpression()
}

void MultiplicativeExpression() : {}
{
CastExpression() ( MultiplicativeOptionalExpression() )?
}

void MultiplicativeOptionalExpression() : {}
{ 
MultiplicativeMultiExpression()
| MultiplicativeDivExpression()
| MultiplicativeModExpression()
}

void MultiplicativeMultiExpression() : {}
{
"*" MultiplicativeExpression()
}

void MultiplicativeDivExpression() : {}
{
"/" MultiplicativeExpression()
}

void MultiplicativeModExpression() : {}
{
"%" MultiplicativeExpression()
}

void CastExpression() : {}
{
LOOKAHEAD("(" TypeName() ")" CastExpression() ) CastExpressionTyped()
| UnaryExpression()
}

void CastExpressionTyped() : {}
{
"(" TypeName() ")" CastExpression() 
}

void UnaryExpression() : {}
{
UnaryExpressionPreIncrement()
| UnaryExpressionPreDecrement()
| UnarySizeofExpression() 
| UnaryCastExpression() 
| PostfixExpression()
}

void UnaryExpressionPreIncrement() : {}
{
"++" UnaryExpression()
}

void UnaryExpressionPreDecrement() : {}
{
"--" UnaryExpression() 
}

void UnaryCastExpression() : {}
{
UnaryOperator() CastExpression() 
}

void UnarySizeofExpression() : {}
{
LOOKAHEAD(SizeofTypeName()) SizeofTypeName() 	  
| SizeofUnaryExpression()
}

void SizeofUnaryExpression() : {}
{
<SIZEOF> UnaryExpression()
}

void SizeofTypeName() : {}
{
<SIZEOF> "(" TypeName() ")"
}

void UnaryOperator() : {}
{
"&" | "*" | "+" | "-" | "~" | "!" 
}

void PostfixExpression() : {}
{
PrimaryExpression() PostfixOperationsList()
}

void PostfixOperationsList() : {}
{
(APostfixOperation())*
}

void APostfixOperation() : {}
{
BracketExpression()
| ArgumentList()
| DotId()
| ArrowId()
| PlusPlus() 
| MinusMinus()
}

void PlusPlus() : {}
{
"++"
}

void MinusMinus() : {}
{
"--"
}

void BracketExpression() : {} 
{
"[" Expression() "]" 
}

void ArgumentList() :{} 
{
"(" (LOOKAHEAD(ExpressionList()) ExpressionList() )? ")" 
}

void DotId() : {} 
{
"." <IDENTIFIER> 
}

void ArrowId() : {} 
{
"->" <IDENTIFIER> 
}

void PrimaryExpression() : {}
{
<IDENTIFIER> 
| Constant()
| ExpressionClosed() 
}

void ExpressionClosed() : {}
{
"(" Expression() ")"
}

void ExpressionList() : {}
{
AssignmentExpression() ( "," AssignmentExpression() )*
}

void Constant() : {}
{
<INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> | <CHARACTER_LITERAL> | ( <STRING_LITERAL> )+
}

