Arquivo@NÃºmero da Linha@Caso@Diretiva OpenMP@Linha Seguinte
./315333330/parser.c@22385@ATOMIC@"""invalid form of %<#pragma omp atomic%>"");"@goto saw_error;
./315333330/parser.c@22411@ATOMIC@"""invalid form of %<#pragma omp atomic%>"");"@goto saw_error;
./315333330/c-parser.c@11541@ATOMIC@"""invalid operator for %<#pragma omp atomic%>"");"@goto saw_error;
./315333330/parser.c@22442@ATOMIC@"""invalid operator for %<#pragma omp atomic%>"");"@goto saw_error;
./315333330/parser.c@22457@ATOMIC@"""invalid operator for %<#pragma omp atomic%>"");"@goto saw_error;
./14230612/gdal_sebs_eta.c@176@ATOMIC@#pragma omp atomic@n+=1;
./14230612/gdal_sebs_eta.c@178@ATOMIC@#pragma omp atomic@e_sat_sum+=e_sat(mat1[rowcol]*0.02,mat2[rowcol]);
./77235735/nqueens.c@296@ATOMIC@#pragma omp atomic@total_count += mycount;
./77235735/floorplan.c@159@ATOMIC@#pragma omp atomic@nn2 += add_cell_ser(cells[id].next, footprint, board,cells);
./77235735/floorplan.c@211@ATOMIC@#pragma omp atomic@nnc += add_cell(cells[id].next, footprint, board,cells,level+1);
./77235735/floorplan.c@269@ATOMIC@#pragma omp atomic@nnc += add_cell(cells[id].next, footprint, board,cells,level+1);
./77235735/floorplan.c@323@ATOMIC@#pragma omp atomic@nnc += add_cell(cells[id].next, footprint, board,cells,level+1);
./77235735/floorplan.c@326@ATOMIC@#pragma omp atomic@nnc += add_cell_ser(cells[id].next, footprint, board,cells);
./77235735/floorplan.c@379@ATOMIC@#pragma omp atomic@nnc += add_cell(cells[id].next, footprint, board,cells);
./139749751/OMP_char.c@42@ATOMIC@#pragma omp atomic@"diffs[i][j]++;
}
}
}
}
#pragma omp atomic
totalDiff += threadDiff;
}
gettimeofday(&finish, NULL);
free(diffs);"
./139749751/OMP_char.c@48@ATOMIC@#pragma omp atomic@"totalDiff += threadDiff;
}
gettimeofday(&finish, NULL);
free(diffs);
free(StringsA);
free(StringsB);
totalTime =
(double)(finish.tv_usec - start.tv_usec) / 1000.0L +
(double)(finish.tv_sec - start.tv_sec) * 1000.0L;
printf(""Total time: %f ms\n"", totalTime);"
./139749751/OMP_line.c@45@ATOMIC@#pragma omp atomic@"totalDiff += threadDiff;
}
gettimeofday(&finish, NULL);
free(diffs);
free(StringsA);
free(StringsB);
totalTime =
(double)(finish.tv_usec - start.tv_usec) / 1000.0L +
(double)(finish.tv_sec - start.tv_sec) * 1000.0L;
printf(""Total time: %f ms\n"", totalTime);"
./139749751/OMP_string.c@45@ATOMIC@#pragma omp atomic@"totalDiff += threadDiff;
}
gettimeofday(&finish, NULL);
free(diffs);
free(StringsA);
free(StringsB);
totalTime =
(double)(finish.tv_usec - start.tv_usec) / 1000.0L +
(double)(finish.tv_sec - start.tv_sec) * 1000.0L;
printf(""Total time: %f ms\n"", totalTime);"
./57456409/JacobiAsync.cpp@115@ATOMIC@#pragma omp atomic@processPointer++;
./457797436/Q1_openmp.cpp@32@ATOMIC@#pragma omp atomic@"diff += local_diff;
#pragma omp barrier
iters++;
if ((diff/(n*n) < TOL) || (iters == ITER_LIMIT)) done = 1;
#pragma omp barrier
}
printf(""[%d] diff = %.10f\n"", iters, diff/(n*n));
}
int main (int argc, char **argv)
{"
./610749801/parallel2.c@26@ATOMIC@#pragma omp atomic@f[i].x += mag * dir.x / dist;
./610749801/parallel2.c@28@ATOMIC@#pragma omp atomic@f[i].y += mag * dir.y / dist;
./610749801/parallel2.c@30@ATOMIC@#pragma omp atomic@f[i].z += mag * dir.z / dist;
./610749801/parallel2.c@32@ATOMIC@#pragma omp atomic@f[j].x -= mag * dir.x / dist;
./610749801/parallel2.c@34@ATOMIC@#pragma omp atomic@f[j].y -= mag * dir.y / dist;
./610749801/parallel2.c@36@ATOMIC@#pragma omp atomic@f[j].z -= mag * dir.z / dist;
./202611037/Exemplo10(atomic).c@29@ATOMIC@#pragma omp atomic@degree[edge[j].vertex1]++;
./202611037/Exemplo10(atomic).c@31@ATOMIC@#pragma omp atomic@degree[edge[j].vertex2]++;
./596527964/openmp_slae_2.c@49@ATOMIC@#pragma omp atomic@accuracy += calc_norm_square(Axb + line_offsets[thread_id], line_counts[thread_id]);
./124247514/if-clauseModificado.c@29@ATOMIC@#pragma omp atomic@suma += sumalocal;
./253940516/omp_atomic_exemple.c@15@ATOMIC@#pragma omp atomic@contador++;
./438068728/h5_problem2.c@114@ATOMIC@#pragma omp atomic@producer_done++;
./430289473/omp_version.c@106@ATOMIC@#pragma omp atomic@triangles_vector[i] /= 2;
./163540180/fig4.62-atomic-func.c@24@ATOMIC@#pragma omp atomic@ic += bigfunc(TID);
./163540180/fig4.61-atomic.c@22@ATOMIC@#pragma omp atomic@ic += 1;
./93849114/pi_omp_atomic.c@32@ATOMIC@#pragma omp atomic@sum += 4.0/(1.0+x*x);
./93849114/pi-v15.c@31@ATOMIC@#pragma omp atomic@sum += 4.0/(1.0+x*x);
./93849114/pi-v15.c@41@ATOMIC@#pragma omp atomic@sum += 4.0/(1.0+x*x);
./93849114/pi-v17.c@31@ATOMIC@#pragma omp atomic@sum += 4.0/(1.0+x*x);
./93849114/pi-v16.c@31@ATOMIC@#pragma omp atomic@sum += 4.0/(1.0+x*x);
./93849114/pi-v5.c@31@ATOMIC@#pragma omp atomic@sum += 4.0/(1.0+x*x);
./93849114/pi-v14.c@30@ATOMIC@#pragma omp atomic@sum += 4.0/(1.0+x*x);
./93849114/pi-v14.c@40@ATOMIC@#pragma omp atomic@sum += 4.0/(1.0+x*x);
./147263317/atomic.c@8@ATOMIC@#pragma omp atomic@sum++;
./294798894/matrixsyn.c@46@ATOMIC@#pragma omp atomic@C[i][j] = C[i][j]+ (A[i][k] * B[k][j]);
./124639581/openMpHamming.c@26@ATOMIC@#pragma omp atomic@hammingValues[i][j]++;
./124639581/openMpHamming.c@33@ATOMIC@#pragma omp atomic@sum += psum;
./124639581/openMpHamming.c@71@ATOMIC@#pragma omp atomic@sum += psum;
./124639581/openMpHamming.c@109@ATOMIC@#pragma omp atomic@sum += psum;
./121361183/gauss-omp-fast.c@39@ATOMIC@#pragma omp atomic@counters[0]++;
./121361183/gauss-omp-fast.c@65@ATOMIC@#pragma omp atomic@counters[i]++;
./121361183/gauss-omp-fast.c@90@ATOMIC@#pragma omp atomic@counters[dim-1]++;
./121361183/gauss-omp-fast.c@108@ATOMIC@#pragma omp atomic@counters[i]++;
./121361183/gauss-omp-cond.c@41@ATOMIC@#pragma omp atomic@counters[0]=1;
./121361183/gauss-omp.c@39@ATOMIC@#pragma omp atomic@counters[0]++;
./121361183/gauss-omp.c@73@ATOMIC@#pragma omp atomic@counters[i]++;
./121361183/test-cond.c@26@ATOMIC@#pragma omp atomic@i--;
./121361183/cond_omp.c@27@ATOMIC@#pragma omp atomic@cond->cond++;
./121361183/test1.c@21@ATOMIC@#pragma omp atomic@cond=cond+3;
./121361183/test1.c@24@ATOMIC@#pragma omp atomic@cond=cond+10;
./121361183/test1.c@35@ATOMIC@#pragma omp atomic@cond--;
./121361183/gaussJ-omp-fast.c@37@ATOMIC@#pragma omp atomic@counters[0]++;
./121361183/gaussJ-omp-fast.c@60@ATOMIC@#pragma omp atomic@counters[i]++;
./121361183/gaussJ-omp-fast.c@87@ATOMIC@#pragma omp atomic@counters[dim-1]++;
./121361183/gaussJ-omp-fast.c@110@ATOMIC@#pragma omp atomic@counters[i]++;
./121361183/jacobi-omp-fast1.c@28@ATOMIC@#pragma omp atomic@flag++;
./121361183/openmp_diag.c@39@ATOMIC@#pragma omp atomic@counters[0]++;
./121361183/openmp_diag.c@55@ATOMIC@#pragma omp atomic@counters[dim-1]++;
./121361183/openmp_diag.c@73@ATOMIC@#pragma omp atomic@counters[i]++;
./121361183/gauss-omp-lbalance.c@40@ATOMIC@#pragma omp atomic@counters[0]++;
./121361183/gauss-omp-lbalance.c@83@ATOMIC@#pragma omp atomic@counters[i]++;
./121361183/gauss-omp-lbalance.c@112@ATOMIC@#pragma omp atomic@counters[dim-1]++;
./121361183/gauss-omp-lbalance.c@130@ATOMIC@#pragma omp atomic@counters[i]++;
./161696083/test_target_teams_distribute_depend_disjoint_section.c@24@ATOMIC@#pragma omp atomic@d[x] += a[x] + b[x];
./161696083/test_target_teams_distribute_depend_disjoint_section.c@29@ATOMIC@#pragma omp atomic@c[x] += 2*(a[x] + b[x]) + d[x];
./161696083/test_interop_target.c@20@ATOMIC@#pragma omp atomic@A[j] += 5;
./161696083/test_taskloop_simd_reduction.c@22@ATOMIC@#pragma omp atomic@sum += a[i]*b[i];
./161696083/test_taskloop_simd_reduction.c@29@ATOMIC@#pragma omp atomic@sum++;
./161696083/test_team_default_shared.c@19@ATOMIC@#pragma omp atomic@share++;
./161696083/test_taskwait_depend.c@19@ATOMIC@#pragma omp atomic@errors += err;
./161696083/test_target_teams_distribute_shared.c@20@ATOMIC@#pragma omp atomic@share = share + a[x];
./161696083/test_target_teams_distribute_depend_in_in.c@24@ATOMIC@#pragma omp atomic@d[x] += a[x] + b[x];
./161696083/test_target_teams_distribute_depend_in_in.c@29@ATOMIC@#pragma omp atomic@c[x] += 2*(a[x] + b[x]) + d[x];
./161696083/reduction_separated_directives.cpp@19@ATOMIC@#pragma omp atomic@counts_team += 1;
./161696083/reduction_separated_directives.c@18@ATOMIC@#pragma omp atomic@counts_team += 1;
./161696083/test_masked_filter.c@22@ATOMIC@#pragma omp atomic@total = total-1;
./161696083/test_target_teams_distribute_default_shared.c@23@ATOMIC@#pragma omp atomic@share = share + a[x];
./161696083/test_taskloop_reduction.c@22@ATOMIC@#pragma omp atomic@sum += a[i]*b[i];
./161696083/test_taskloop_reduction.c@29@ATOMIC@#pragma omp atomic@sum++;
./161696083/test_masked.c@22@ATOMIC@#pragma omp atomic@total = total-1;
./483750905/pi.c@133@ATOMIC@#pragma omp atomic@sum = sum + x;
./483750905/matrix.c@220@ATOMIC@#pragma omp atomic@adder += matrix_A[i][j] * matrix_B[j][a];                      }
./483750905/menuUltimoJuan.c@213@ATOMIC@#pragma omp atomic@sum = sum + x;
./244443993/dz1z5.c@231@ATOMIC@#pragma omp atomic@gridData[idx].real += (w * pt.real);
./244443993/dz1z5.c@233@ATOMIC@#pragma omp atomic@gridData[idx].imag += (w * pt.imag);
./244443993/dz1z5.c@235@ATOMIC@#pragma omp atomic@sampleDensity[idx] += 1.0;
./244443993/CPU_kernels.c@219@ATOMIC@#pragma omp atomic@gridData[idx].real += (w*pt.real);
./244443993/CPU_kernels.c@221@ATOMIC@#pragma omp atomic@gridData[idx].imag += (w*pt.imag);
./244443993/CPU_kernels.c@223@ATOMIC@#pragma omp atomic@sampleDensity[idx] += 1.0;
./241424068/if-clauseModificado.c@28@ATOMIC@#pragma omp atomic@suma += sumalocal;
./604432689/main.c@180@ATOMIC@#pragma omp atomic@"#endif
has_edge[(src / CHAR_BIT) % bitmap_size_in_bytes] |= (1 << (src % CHAR_BIT));
}
if (tgt / bitmap_size_in_bytes / CHAR_BIT == my_col) {
#ifdef _OPENMP
#pragma omp atomic
#endif
has_edge[(tgt / CHAR_BIT) % bitmap_size_in_bytes] |= (1 << (tgt % CHAR_BIT));
}
}"
./604432689/main.c@186@ATOMIC@#pragma omp atomic@"#endif
has_edge[(tgt / CHAR_BIT) % bitmap_size_in_bytes] |= (1 << (tgt % CHAR_BIT));
}
}
}
free(buf);
#if 0
MPI_Allreduce(MPI_IN_PLACE, has_edge, bitmap_size_in_bytes, MPI_UNSIGNED_CHAR, MPI_BOR, this_col);
#endif
MPI_Comm_free(&this_col);"
./604432689/oned_csc.c@45@ATOMIC@#pragma omp atomic@++counts[SWIZZLE_VERTEX(get_v1_from_edge(&inbuf[i])) / ULONG_BITS];
./604432689/oned_csr.c@39@ATOMIC@#pragma omp atomic@++counts[VERTEX_LOCAL(get_v0_from_edge(&inbuf[i]))];
./228656264/a.16.1.c@19@ATOMIC@#pragma omp atomic@x[index[i]] += work1 (i);
./228656264/reduction-2.C@20@ATOMIC@#pragma omp atomic@j |= 1;
./228656264/reduction-2.C@32@ATOMIC@#pragma omp atomic@j |= 2;
./228656264/reduction-2.C@35@ATOMIC@#pragma omp atomic@j |= 4;
./228656264/reduction-2.C@38@ATOMIC@#pragma omp atomic@j |= 8;
./228656264/atomic-10.C@9@ATOMIC@#pragma omp atomic@x1++;
./228656264/atomic-10.C@11@ATOMIC@#pragma omp atomic@x2--;
./228656264/atomic-10.C@13@ATOMIC@#pragma omp atomic@++x3;
./228656264/atomic-10.C@15@ATOMIC@#pragma omp atomic@--x4;
./228656264/atomic-10.C@17@ATOMIC@#pragma omp atomic@x5 += 1;
./228656264/atomic-10.C@19@ATOMIC@#pragma omp atomic@x1 -= y6;
./228656264/atomic-10.C@21@ATOMIC@#pragma omp atomic@x2 |= 1;
./228656264/atomic-10.C@23@ATOMIC@#pragma omp atomic@x3 &= 1;
./228656264/atomic-10.C@25@ATOMIC@#pragma omp atomic@x4 ^= 1;
./228656264/atomic-10.C@27@ATOMIC@#pragma omp atomic@x5 *= 3;
./228656264/atomic-10.C@29@ATOMIC@#pragma omp atomic@x1 /= 3;
./228656264/atomic-10.C@31@ATOMIC@#pragma omp atomic@x2 /= 3;
./228656264/atomic-10.C@33@ATOMIC@#pragma omp atomic@x3 <<= 3;
./228656264/atomic-10.C@35@ATOMIC@#pragma omp atomic@x4 >>= 3;
./228656264/atomic-10.C@41@ATOMIC@#pragma omp atomic@y6++;
./228656264/atomic-10.C@43@ATOMIC@#pragma omp atomic@y2--;
./228656264/atomic-10.C@45@ATOMIC@#pragma omp atomic@++y3;
./228656264/atomic-10.C@47@ATOMIC@#pragma omp atomic@--y4;
./228656264/atomic-10.C@49@ATOMIC@#pragma omp atomic@y5 += 1;
./228656264/atomic-10.C@51@ATOMIC@#pragma omp atomic@y6 -= x1;
./228656264/atomic-10.C@53@ATOMIC@#pragma omp atomic@y2 |= 1;
./228656264/atomic-10.C@55@ATOMIC@#pragma omp atomic@y3 &= 1;
./228656264/atomic-10.C@57@ATOMIC@#pragma omp atomic@y4 ^= 1;
./228656264/atomic-10.C@59@ATOMIC@#pragma omp atomic@y5 *= 3;
./228656264/atomic-10.C@61@ATOMIC@#pragma omp atomic@y6 /= 3;
./228656264/atomic-10.C@63@ATOMIC@#pragma omp atomic@y2 /= 3;
./228656264/atomic-10.C@65@ATOMIC@#pragma omp atomic@y3 <<= 3;
./228656264/atomic-10.C@67@ATOMIC@#pragma omp atomic@y4 >>= 3;
./228656264/atomic-10.C@73@ATOMIC@#pragma omp atomic@z1++;
./228656264/atomic-10.C@75@ATOMIC@#pragma omp atomic@z2--;
./228656264/atomic-10.C@77@ATOMIC@#pragma omp atomic@++z3;
./228656264/atomic-10.C@79@ATOMIC@#pragma omp atomic@--z4;
./228656264/atomic-10.C@81@ATOMIC@#pragma omp atomic@z5 += 1;
./228656264/atomic-10.C@83@ATOMIC@#pragma omp atomic@z1 |= 1;
./228656264/atomic-10.C@85@ATOMIC@#pragma omp atomic@z2 &= 1;
./228656264/atomic-10.C@87@ATOMIC@#pragma omp atomic@z3 ^= 1;
./228656264/atomic-10.C@89@ATOMIC@#pragma omp atomic@z4 *= 3;
./228656264/atomic-10.C@91@ATOMIC@#pragma omp atomic@z5 /= 3;
./228656264/atomic-10.C@93@ATOMIC@#pragma omp atomic@z1 /= 3;
./228656264/atomic-10.C@95@ATOMIC@#pragma omp atomic@z2 <<= 3;
./228656264/atomic-10.C@97@ATOMIC@#pragma omp atomic@z3 >>= 3;
./228656264/atomic-10.C@103@ATOMIC@#pragma omp atomic@a1 += 8.0;
./228656264/atomic-10.C@105@ATOMIC@#pragma omp atomic@a2 *= 3.5;
./228656264/atomic-10.C@107@ATOMIC@#pragma omp atomic@a3 -= a1 + a2;
./228656264/atomic-10.C@109@ATOMIC@#pragma omp atomic@a4 /= 2.0;
./228656264/atomic-8.C@14@ATOMIC@#pragma omp atomic@x = x + 7 + 6;
./228656264/atomic-8.C@18@ATOMIC@#pragma omp atomic@x = x * (2 - 1);
./228656264/atomic-8.C@63@ATOMIC@#pragma omp atomic@x = x * -4 / 2;
./228656264/task-1.C@12@ATOMIC@#pragma omp atomic@k++;
./228656264/task-1.C@53@ATOMIC@#pragma omp atomic@k++;
./228656264/ctor-4.C@29@ATOMIC@#pragma omp atomic@ccount++;
./228656264/ctor-4.C@34@ATOMIC@#pragma omp atomic@dcount++;
./228656264/ctor-4.C@41@ATOMIC@#pragma omp atomic@ecount++;
./228656264/debug-1.c@46@ATOMIC@#pragma omp atomic@v3k++;
./228656264/task-4.C@9@ATOMIC@#pragma omp atomic@e++;
./228656264/pr39591-2.c@11@ATOMIC@#pragma omp atomic@err++;
./228656264/ctor-7.C@20@ATOMIC@#pragma omp atomic@icount++;
./228656264/ctor-7.C@25@ATOMIC@#pragma omp atomic@dcount++;
./228656264/ctor-7.C@30@ATOMIC@#pragma omp atomic@xcount++;
./228656264/for-7.C@15@ATOMIC@#pragma omp atomic@cnt++;
./228656264/for-7.C@24@ATOMIC@#pragma omp atomic@cnt++;
./228656264/pr29947-2.c@16@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-2.c@35@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-2.c@54@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-2.c@73@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-2.c@93@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-2.c@113@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-2.c@133@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-2.c@153@ATOMIC@#pragma omp atomic@++cnt;
./228656264/atomic-14.C@14@ATOMIC@#pragma omp atomic@x = x + (7 + 6);
./228656264/atomic-14.C@18@ATOMIC@#pragma omp atomic@x = x * (2 - 1);
./228656264/atomic-14.C@63@ATOMIC@#pragma omp atomic@x = x * (-4 / 2);
./228656264/task-2.C@14@ATOMIC@#pragma omp atomic@e += 1;
./228656264/task-2.C@32@ATOMIC@#pragma omp atomic@e += 1;
./228656264/ordered-4.c@9@ATOMIC@#pragma omp atomic@j[i]++;
./228656264/ordered-4.c@33@ATOMIC@#pragma omp atomic@j[i]++;
./228656264/ordered-4.c@49@ATOMIC@#pragma omp atomic@j[i]++;
./228656264/ordered-4.c@73@ATOMIC@#pragma omp atomic@j[i]++;
./228656264/cancel-test.h@9@ATOMIC@#pragma omp atomic@s++;
./228656264/cancel-test.h@14@ATOMIC@#pragma omp atomic@s++;
./228656264/cancel-test.h@20@ATOMIC@#pragma omp atomic@s--;
./228656264/cancel-test.h@25@ATOMIC@#pragma omp atomic@s++;
./228656264/reduction-4.C@11@ATOMIC@#pragma omp atomic@j |= 1;
./228656264/reduction-4.C@14@ATOMIC@#pragma omp atomic@j |= 2;
./228656264/loop-12.C@10@ATOMIC@#pragma omp atomic@arr[loopidx * 5 + idx]++;
./228656264/pr35185.C@22@ATOMIC@#pragma omp atomic@err++;
./228656264/ctor-2.C@26@ATOMIC@#pragma omp atomic@ccount++;
./228656264/ctor-2.C@32@ATOMIC@#pragma omp atomic@dcount++;
./228656264/ctor-2.C@37@ATOMIC@#pragma omp atomic@xcount++;
./228656264/taskloop-1.c@10@ATOMIC@#pragma omp atomic@e |= 1;
./228656264/taskloop-1.c@22@ATOMIC@#pragma omp atomic@e |= 1;
./228656264/thread-limit-2.c@48@ATOMIC@#pragma omp atomic@--cnt;
./228656264/nestedfn-3.c@32@ATOMIC@#pragma omp atomic@l += bar ();
./228656264/pr26943-4.c@28@ATOMIC@#pragma omp atomic@a += i;
./228656264/pr26943-4.c@33@ATOMIC@#pragma omp atomic@e[0] += i;
./228656264/pr39591-1.c@19@ATOMIC@#pragma omp atomic@err++;
./228656264/target-35.c@34@ATOMIC@#pragma omp atomic@b[y] += z;
./228656264/target-35.c@36@ATOMIC@#pragma omp atomic@*a += 1;
./228656264/atomic-9.C@16@ATOMIC@#pragma omp atomic@x = x + 7 + 6;
./228656264/atomic-9.C@20@ATOMIC@#pragma omp atomic@x = x * (2 - 1);
./228656264/atomic-9.C@65@ATOMIC@#pragma omp atomic@x = x * -4 / 2;
./228656264/omp-nested-1.c@11@ATOMIC@#pragma omp atomic@i++;
./228656264/pr39591-3.c@11@ATOMIC@#pragma omp atomic@err++;
./228656264/pr26943-2.c@20@ATOMIC@#pragma omp atomic@a += i;
./228656264/pr26943-2.c@25@ATOMIC@#pragma omp atomic@e[0] += i;
./228656264/pr33880.c@14@ATOMIC@#pragma omp atomic@j += 1;
./228656264/pr33880.c@20@ATOMIC@#pragma omp atomic@j += 1;
./228656264/pr33880.c@45@ATOMIC@#pragma omp atomic@m += 1;
./228656264/pr33880.c@59@ATOMIC@#pragma omp atomic@m += 1;
./228656264/pr33880.c@66@ATOMIC@#pragma omp atomic@m += 1;
./228656264/pr33880.c@102@ATOMIC@#pragma omp atomic@m += 1;
./228656264/nested-3.c@37@ATOMIC@#pragma omp atomic@e[0] += 1;
./228656264/nested-3.c@57@ATOMIC@#pragma omp atomic@e[1] += 1;
./228656264/nested-3.c@79@ATOMIC@#pragma omp atomic@e[2] += 1;
./228656264/reduction-3.C@20@ATOMIC@#pragma omp atomic@j |= 1;
./228656264/reduction-3.C@33@ATOMIC@#pragma omp atomic@j |= 2;
./228656264/reduction-3.C@36@ATOMIC@#pragma omp atomic@j |= 4;
./228656264/reduction-3.C@39@ATOMIC@#pragma omp atomic@j |= 8;
./228656264/nestedfn-5.c@12@ATOMIC@#pragma omp atomic@++*j;
./228656264/nestedfn-5.c@18@ATOMIC@#pragma omp atomic@++*j;
./228656264/ctor-13.C@20@ATOMIC@#pragma omp atomic@ic++;
./228656264/ctor-13.C@25@ATOMIC@#pragma omp atomic@dc++;
./228656264/ctor-13.C@30@ATOMIC@#pragma omp atomic@cc++;
./228656264/ctor-13.C@35@ATOMIC@#pragma omp atomic@ac++;
./228656264/ctor-13.C@41@ATOMIC@#pragma omp atomic@xc++;
./228656264/pr48591.c@12@ATOMIC@#pragma omp atomic@f += 8.5Q;
./228656264/ctor-6.C@15@ATOMIC@#pragma omp atomic@count++;
./228656264/thread-limit-1.c@34@ATOMIC@#pragma omp atomic@--cnt;
./228656264/atomic-2.C@10@ATOMIC@#pragma omp atomic@d *= 1.25;
./228656264/atomic-2.C@12@ATOMIC@#pragma omp atomic@ld /= 0.75;
./228656264/pr29947-1.c@16@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-1.c@35@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-1.c@54@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-1.c@73@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-1.c@93@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-1.c@113@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-1.c@133@ATOMIC@#pragma omp atomic@++cnt;
./228656264/pr29947-1.c@153@ATOMIC@#pragma omp atomic@++cnt;
./228656264/atomic-5.C@12@ATOMIC@#pragma omp atomic@d += 1.0L;
./228656264/ctor-11.C@23@ATOMIC@#pragma omp atomic@icount++;
./228656264/ctor-11.C@28@ATOMIC@#pragma omp atomic@ccount++;
./228656264/ctor-11.C@33@ATOMIC@#pragma omp atomic@dcount++;
./228656264/ctor-11.C@39@ATOMIC@#pragma omp atomic@xcount++;
./228656264/pr64868.c@7@ATOMIC@#pragma omp atomic@f = 1.0f / f;
./228656264/pr64868.c@9@ATOMIC@#pragma omp atomic@f = 1 / f;
./228656264/pr64868.c@11@ATOMIC@#pragma omp atomic@f = f / 2.0f;
./228656264/pr64868.c@13@ATOMIC@#pragma omp atomic@f = f / 2;
./228656264/pr64868.c@15@ATOMIC@#pragma omp atomic@f /= 2.0f;
./228656264/pr64868.c@17@ATOMIC@#pragma omp atomic@f /= 2;
./228656264/pr64868.c@19@ATOMIC@#pragma omp atomic@d = 1.0 / d;
./228656264/pr64868.c@21@ATOMIC@#pragma omp atomic@d = 1 / d;
./228656264/pr64868.c@23@ATOMIC@#pragma omp atomic@d = d / 2.0;
./228656264/pr64868.c@25@ATOMIC@#pragma omp atomic@d = d / 2;
./228656264/pr64868.c@27@ATOMIC@#pragma omp atomic@d /= 2.0;
./228656264/pr64868.c@29@ATOMIC@#pragma omp atomic@d /= 2;
./228656264/pr64868.c@31@ATOMIC@#pragma omp atomic@ld = 1.0L / ld;
./228656264/pr64868.c@33@ATOMIC@#pragma omp atomic@ld = 1 / ld;
./228656264/pr64868.c@35@ATOMIC@#pragma omp atomic@ld = ld / 2.0L;
./228656264/pr64868.c@37@ATOMIC@#pragma omp atomic@ld = ld / 2;
./228656264/pr64868.c@39@ATOMIC@#pragma omp atomic@ld /= 2.0L;
./228656264/pr64868.c@41@ATOMIC@#pragma omp atomic@ld /= 2;
./228656264/pr64868.c@52@ATOMIC@#pragma omp atomic@v *= 16;
./228656264/pr64868.c@54@ATOMIC@#pragma omp atomic@v = 1.0 / v;
./228656264/pr64868.c@56@ATOMIC@#pragma omp atomic@v = N1 / v;
./228656264/pr64868.c@58@ATOMIC@#pragma omp atomic@v = v / 2.0;
./228656264/pr64868.c@60@ATOMIC@#pragma omp atomic@v = v / N2;
./228656264/pr64868.c@62@ATOMIC@#pragma omp atomic@v /= 2.0;
./228656264/pr64868.c@64@ATOMIC@#pragma omp atomic@v /= N2;
./228656264/ctor-3.C@24@ATOMIC@#pragma omp atomic@icount++;
./228656264/ctor-3.C@33@ATOMIC@#pragma omp atomic@dcount++;
./228656264/ctor-3.C@40@ATOMIC@#pragma omp atomic@ccount++;
./228656264/pr36802-2.c@16@ATOMIC@#pragma omp atomic@n += 1;
./228656264/pr36802-2.c@22@ATOMIC@#pragma omp atomic@q += i;
./228656264/pr36802-2.c@28@ATOMIC@#pragma omp atomic@n += 1;
./228656264/reduction-1.C@11@ATOMIC@#pragma omp atomic@j |= 1;
./228656264/reduction-1.C@14@ATOMIC@#pragma omp atomic@j |= 2;
./228656264/task-6.C@13@ATOMIC@#pragma omp atomic@k++;
./228656264/task-6.C@56@ATOMIC@#pragma omp atomic@k++;
./228656264/private-1.c@13@ATOMIC@#pragma omp atomic@k++;
./228656264/atomic-3.C@18@ATOMIC@#pragma omp atomic@e[0] += x;
./228656264/atomic-3.C@20@ATOMIC@#pragma omp atomic@e[16] += x;
./228656264/atomic-3.C@22@ATOMIC@#pragma omp atomic@g += y;
./228656264/atomic-3.C@24@ATOMIC@#pragma omp atomic@__real__ d += x;
./228656264/atomic-3.C@26@ATOMIC@#pragma omp atomic@__imag__ f += x;
./228656264/pr30703.C@13@ATOMIC@#pragma omp atomic@ctor++;
./228656264/pr30703.C@19@ATOMIC@#pragma omp atomic@cctor++;
./228656264/pr30703.C@24@ATOMIC@#pragma omp atomic@dtor++;
./228656264/pr30703.C@36@ATOMIC@#pragma omp atomic@j += 1;
./228656264/ctor-1.C@19@ATOMIC@#pragma omp atomic@icount++;
./228656264/ctor-1.C@24@ATOMIC@#pragma omp atomic@dcount++;
./228656264/ctor-1.C@29@ATOMIC@#pragma omp atomic@xcount++;
./228656264/pr30494.c@10@ATOMIC@#pragma omp atomic@errors += 1;
./228656264/pr30494.c@14@ATOMIC@#pragma omp atomic@errors += 1;
./228656264/cancel-for-2.C@20@ATOMIC@#pragma omp atomic@v++;
./228656264/cancel-for-2.C@27@ATOMIC@#pragma omp atomic@w += 8;
./228656264/cancel-for-2.C@34@ATOMIC@#pragma omp atomic@v += 2;
./228656264/cancel-for-2.C@55@ATOMIC@#pragma omp atomic@v++;
./228656264/cancel-for-2.C@63@ATOMIC@#pragma omp atomic@w += 8;
./228656264/cancel-for-2.C@71@ATOMIC@#pragma omp atomic@v += 2;
./228656264/loop-6.C@10@ATOMIC@#pragma omp atomic@arr[loopidx * 5 + idx]++;
./228656264/atomic-15.C@7@ATOMIC@#pragma omp atomic@x = -3 + x;
./228656264/ctor-5.C@17@ATOMIC@#pragma omp atomic@count++;
./228656264/pr27337.C@14@ATOMIC@#pragma omp atomic@n[0]++;
./228656264/pr27337.C@20@ATOMIC@#pragma omp atomic@n[1]++;
./228656264/pr27337.C@29@ATOMIC@#pragma omp atomic@n[2]++;
./228656264/pr27337.C@50@ATOMIC@#pragma omp atomic@ret.i += omp_get_thread_num () + 1;
./228656264/shared-1.C@24@ATOMIC@#pragma omp atomic@a += omp_get_num_threads ();
./228656264/shared-1.C@26@ATOMIC@#pragma omp atomic@b += omp_get_num_threads ();
./228656264/pr39573.C@5@ATOMIC@#pragma omp atomic@z += x[2];
./228656264/nestedfn-4.c@18@ATOMIC@#pragma omp atomic@l++;
./228656264/nestedfn-4.c@24@ATOMIC@#pragma omp atomic@l++;
./228656264/nestedfn-4.c@29@ATOMIC@#pragma omp atomic@l++;
./228656264/nestedfn-4.c@35@ATOMIC@#pragma omp atomic@l++;
./228656264/nestedfn-4.c@39@ATOMIC@#pragma omp atomic@l++;
./228656264/nestedfn-4.c@44@ATOMIC@#pragma omp atomic@l++;
./228656264/pr26943-3.c@27@ATOMIC@#pragma omp atomic@a += i;
./228656264/pr26943-3.c@32@ATOMIC@#pragma omp atomic@e[0] += i;
./228656264/ctor-12.C@8@ATOMIC@#pragma omp atomic@ctors++;
./228656264/ctor-12.C@14@ATOMIC@#pragma omp atomic@copyctors++;
./228656264/ctor-12.C@20@ATOMIC@#pragma omp atomic@assignops++;
./228656264/ctor-12.C@26@ATOMIC@#pragma omp atomic@dtors++;
./228656264/ctor-12.C@49@ATOMIC@#pragma omp atomic@n++;
./228656264/pr36802-3.c@16@ATOMIC@#pragma omp atomic@n += 1;
./228656264/pr36802-3.c@25@ATOMIC@#pragma omp atomic@n += 1;
./228656264/pr36802-3.c@31@ATOMIC@#pragma omp atomic@q += i;
./228656264/atomic-6.C@9@ATOMIC@#pragma omp atomic@u.d += 1.0L;
./228656264/atomic-1.C@15@ATOMIC@#pragma omp atomic@d += 7.5;
./228656264/atomic-1.C@17@ATOMIC@#pragma omp atomic@d *= 2.5;
./228656264/atomic-1.C@19@ATOMIC@#pragma omp atomic@d /= 0.25;
./228656264/atomic-1.C@25@ATOMIC@#pragma omp atomic@x.e += 7.5;
./228656264/atomic-1.C@27@ATOMIC@#pragma omp atomic@x.e *= 2.5;
./228656264/atomic-1.C@29@ATOMIC@#pragma omp atomic@x.e /= 0.25;
./228656264/atomic-4.C@9@ATOMIC@#pragma omp atomic@d += 1.0L;
./228656264/pr35549.c@12@ATOMIC@#pragma omp atomic@n += 1;
./228656264/pr35549.c@17@ATOMIC@#pragma omp atomic@n += 1;
./228656264/pr34513.C@12@ATOMIC@#pragma omp atomic@shrd += 1;
./228656264/pr34513.C@16@ATOMIC@#pragma omp atomic@errors += 1;
./228656264/sort-1.c@230@ATOMIC@#pragma omp atomic@*busy += 1;
./228656264/sort-1.c@240@ATOMIC@#pragma omp atomic@*busy -= 1;
./173319591/simpar-mpi.c@153@ATOMIC@#pragma omp atomic@cell->mass_sum += particle->mass;
./173319591/simpar-mpi.c@155@ATOMIC@#pragma omp atomic@cell->center_of_mass.x += particle->mass * particle->position.x;
./173319591/simpar-mpi.c@157@ATOMIC@#pragma omp atomic@cell->center_of_mass.y += particle->mass * particle->position.y;
./256562535/CalcFolderSize.c@52@ATOMIC@#pragma omp atomic@sum += localsum;
./256562535/task1.c@14@ATOMIC@#pragma omp atomic@inc++;
./256562535/Atomic.c@22@ATOMIC@#pragma omp atomic@sum+=localsum;
./256562535/NQueensParallel.c@17@ATOMIC@#pragma omp atomic@solutions++;
./256562535/NQueensSeq.c@17@ATOMIC@#pragma omp atomic@solutions++;
./256562535/medium.c@9@ATOMIC@#pragma omp atomic@sum++;
./276759666/Ejemplo_4_3_OpenMP.c@19@ATOMIC@#pragma omp atomic@suma = suma + i;
./307084800/hello_ad.c@10@ATOMIC@#pragma omp atomic@i++;
./307084800/bugged5.c@34@ATOMIC@#pragma omp atomic@a[i] += DELTA * i;
./307084800/bugged5.c@38@ATOMIC@#pragma omp atomic@b[i] += DELTA + i;
./307084800/bugged5.c@45@ATOMIC@#pragma omp atomic@b[i] += PI * i;
./307084800/bugged5.c@49@ATOMIC@#pragma omp atomic@a[i] += PI + i;
./307084800/sum.c@13@ATOMIC@#pragma omp atomic@sum += local_sum;
./315333330/a.16.1.c@19@ATOMIC@#pragma omp atomic@x[index[i]] += work1 (i);
./315333330/task-1.C@12@ATOMIC@#pragma omp atomic@k++;
./315333330/task-1.C@53@ATOMIC@#pragma omp atomic@k++;
./315333330/atomic-1.c@15@ATOMIC@#pragma omp atomic@d += 7.5;
./315333330/atomic-1.c@17@ATOMIC@#pragma omp atomic@d *= 2.5;
./315333330/atomic-1.c@19@ATOMIC@#pragma omp atomic@d /= 0.25;
./315333330/atomic-1.c@25@ATOMIC@#pragma omp atomic@x.e += 7.5;
./315333330/atomic-1.c@27@ATOMIC@#pragma omp atomic@x.e *= 2.5;
./315333330/atomic-1.c@29@ATOMIC@#pragma omp atomic@x.e /= 0.25;
./315333330/ctor-4.C@29@ATOMIC@#pragma omp atomic@ccount++;
./315333330/ctor-4.C@34@ATOMIC@#pragma omp atomic@dcount++;
./315333330/ctor-4.C@41@ATOMIC@#pragma omp atomic@ecount++;
./315333330/debug-1.c@46@ATOMIC@#pragma omp atomic@v3k++;
./315333330/task-4.C@9@ATOMIC@#pragma omp atomic@e++;
./315333330/pr39591-2.c@11@ATOMIC@#pragma omp atomic@err++;
./315333330/ctor-7.C@20@ATOMIC@#pragma omp atomic@icount++;
./315333330/ctor-7.C@25@ATOMIC@#pragma omp atomic@dcount++;
./315333330/ctor-7.C@30@ATOMIC@#pragma omp atomic@xcount++;
./315333330/pr29947-2.c@16@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-2.c@35@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-2.c@54@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-2.c@73@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-2.c@93@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-2.c@113@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-2.c@133@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-2.c@153@ATOMIC@#pragma omp atomic@++cnt;
./315333330/reduction-2.c@20@ATOMIC@#pragma omp atomic@j |= 1;
./315333330/reduction-2.c@32@ATOMIC@#pragma omp atomic@j |= 2;
./315333330/reduction-2.c@35@ATOMIC@#pragma omp atomic@j |= 4;
./315333330/reduction-2.c@38@ATOMIC@#pragma omp atomic@j |= 8;
./315333330/task-2.C@14@ATOMIC@#pragma omp atomic@e += 1;
./315333330/task-2.C@32@ATOMIC@#pragma omp atomic@e += 1;
./315333330/a.17.1.c@11@ATOMIC@#pragma omp atomic@u.n++;
./315333330/a.17.1.c@13@ATOMIC@#pragma omp atomic@u.x += 1.0;
./315333330/ordered-4.c@9@ATOMIC@#pragma omp atomic@j[i]++;
./315333330/ordered-4.c@33@ATOMIC@#pragma omp atomic@j[i]++;
./315333330/ordered-4.c@49@ATOMIC@#pragma omp atomic@j[i]++;
./315333330/ordered-4.c@73@ATOMIC@#pragma omp atomic@j[i]++;
./315333330/atomic-2.c@10@ATOMIC@#pragma omp atomic@d *= 1.25;
./315333330/atomic-2.c@12@ATOMIC@#pragma omp atomic@ld /= 0.75;
./315333330/cancel-test.h@9@ATOMIC@#pragma omp atomic@s++;
./315333330/cancel-test.h@14@ATOMIC@#pragma omp atomic@s++;
./315333330/cancel-test.h@20@ATOMIC@#pragma omp atomic@s--;
./315333330/cancel-test.h@25@ATOMIC@#pragma omp atomic@s++;
./315333330/pr59297.C@15@ATOMIC@#pragma omp atomic@x (y[0]) += 1;
./315333330/pr59297.C@17@ATOMIC@#pragma omp atomic@z += x(y[1]);
./315333330/loop-12.C@10@ATOMIC@#pragma omp atomic@arr[loopidx * 5 + idx]++;
./315333330/pr35185.C@22@ATOMIC@#pragma omp atomic@err++;
./315333330/ctor-2.C@26@ATOMIC@#pragma omp atomic@ccount++;
./315333330/ctor-2.C@32@ATOMIC@#pragma omp atomic@dcount++;
./315333330/ctor-2.C@37@ATOMIC@#pragma omp atomic@xcount++;
./315333330/atomic-14.c@14@ATOMIC@#pragma omp atomic@x = x + (7 + 6);
./315333330/atomic-14.c@18@ATOMIC@#pragma omp atomic@x = x * (2 - 1);
./315333330/atomic-14.c@63@ATOMIC@#pragma omp atomic@x = x * (-4 / 2);
./315333330/taskloop-1.c@10@ATOMIC@#pragma omp atomic@e |= 1;
./315333330/taskloop-1.c@22@ATOMIC@#pragma omp atomic@e |= 1;
./315333330/thread-limit-2.c@48@ATOMIC@#pragma omp atomic@--cnt;
./315333330/nestedfn-3.c@32@ATOMIC@#pragma omp atomic@l += bar ();
./315333330/pr26943-4.c@28@ATOMIC@#pragma omp atomic@a += i;
./315333330/pr26943-4.c@33@ATOMIC@#pragma omp atomic@e[0] += i;
./315333330/reduction-4.c@11@ATOMIC@#pragma omp atomic@j |= 1;
./315333330/reduction-4.c@14@ATOMIC@#pragma omp atomic@j |= 2;
./315333330/pr39591-1.c@19@ATOMIC@#pragma omp atomic@err++;
./315333330/atomic-23.c@8@ATOMIC@#pragma omp atomic@++s.a;
./315333330/pr35738.c@7@ATOMIC@#pragma omp atomic@i += q;
./315333330/pr35738.c@9@ATOMIC@#pragma omp atomic@i += foo;
./315333330/pr35738.c@11@ATOMIC@#pragma omp atomic@i += p;
./315333330/atomic-6.c@9@ATOMIC@#pragma omp atomic@u.d += 1.0L;
./315333330/target-35.c@34@ATOMIC@#pragma omp atomic@b[y] += z;
./315333330/target-35.c@36@ATOMIC@#pragma omp atomic@*a += 1;
./315333330/pr86291.C@39@ATOMIC@#pragma omp atomic@c++;
./315333330/_Atomic-1.c@85@ATOMIC@#pragma omp atomic@j += c;
./315333330/omp-nested-1.c@11@ATOMIC@#pragma omp atomic@i++;
./315333330/pr69389.c@19@ATOMIC@#pragma omp atomic@s.b |= 1;
./315333330/pr69389.c@44@ATOMIC@#pragma omp atomic@s.b = s.b & 7;
./315333330/pr69389.c@50@ATOMIC@#pragma omp atomic@s.b = ~7 & s.b;
./315333330/pr39591-3.c@11@ATOMIC@#pragma omp atomic@err++;
./315333330/pr26943-2.c@20@ATOMIC@#pragma omp atomic@a += i;
./315333330/pr26943-2.c@25@ATOMIC@#pragma omp atomic@e[0] += i;
./315333330/pr33880.c@14@ATOMIC@#pragma omp atomic@j += 1;
./315333330/pr33880.c@20@ATOMIC@#pragma omp atomic@j += 1;
./315333330/pr33880.c@45@ATOMIC@#pragma omp atomic@m += 1;
./315333330/pr33880.c@59@ATOMIC@#pragma omp atomic@m += 1;
./315333330/pr33880.c@66@ATOMIC@#pragma omp atomic@m += 1;
./315333330/pr33880.c@102@ATOMIC@#pragma omp atomic@m += 1;
./315333330/private-1.C@13@ATOMIC@#pragma omp atomic@k++;
./315333330/nested-3.c@37@ATOMIC@#pragma omp atomic@e[0] += 1;
./315333330/nested-3.c@57@ATOMIC@#pragma omp atomic@e[1] += 1;
./315333330/nested-3.c@79@ATOMIC@#pragma omp atomic@e[2] += 1;
./315333330/pr84341.c@4@ATOMIC@#pragma omp atomic@i = &i + 1;
./315333330/nestedfn-5.c@12@ATOMIC@#pragma omp atomic@++*j;
./315333330/nestedfn-5.c@18@ATOMIC@#pragma omp atomic@++*j;
./315333330/ctor-13.C@20@ATOMIC@#pragma omp atomic@ic++;
./315333330/ctor-13.C@25@ATOMIC@#pragma omp atomic@dc++;
./315333330/ctor-13.C@30@ATOMIC@#pragma omp atomic@cc++;
./315333330/ctor-13.C@35@ATOMIC@#pragma omp atomic@ac++;
./315333330/ctor-13.C@41@ATOMIC@#pragma omp atomic@xc++;
./315333330/pr48591.c@12@ATOMIC@#pragma omp atomic@f += 8.5Q;
./315333330/ctor-6.C@15@ATOMIC@#pragma omp atomic@count++;
./315333330/thread-limit-1.c@34@ATOMIC@#pragma omp atomic@--cnt;
./315333330/tpl-atomic-1.C@4@ATOMIC@#pragma omp atomic@check |= sizeof(T);
./315333330/tpl-atomic-1.C@9@ATOMIC@#pragma omp atomic@*x += y;
./315333330/atomic-4.c@9@ATOMIC@#pragma omp atomic@d += 1.0L;
./315333330/pr29947-1.c@16@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-1.c@35@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-1.c@54@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-1.c@73@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-1.c@93@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-1.c@113@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-1.c@133@ATOMIC@#pragma omp atomic@++cnt;
./315333330/pr29947-1.c@153@ATOMIC@#pragma omp atomic@++cnt;
./315333330/ctor-11.C@23@ATOMIC@#pragma omp atomic@icount++;
./315333330/ctor-11.C@28@ATOMIC@#pragma omp atomic@ccount++;
./315333330/ctor-11.C@33@ATOMIC@#pragma omp atomic@dcount++;
./315333330/ctor-11.C@39@ATOMIC@#pragma omp atomic@xcount++;
./315333330/pr64868.c@7@ATOMIC@#pragma omp atomic@f = 1.0f / f;
./315333330/pr64868.c@9@ATOMIC@#pragma omp atomic@f = 1 / f;
./315333330/pr64868.c@11@ATOMIC@#pragma omp atomic@f = f / 2.0f;
./315333330/pr64868.c@13@ATOMIC@#pragma omp atomic@f = f / 2;
./315333330/pr64868.c@15@ATOMIC@#pragma omp atomic@f /= 2.0f;
./315333330/pr64868.c@17@ATOMIC@#pragma omp atomic@f /= 2;
./315333330/pr64868.c@19@ATOMIC@#pragma omp atomic@d = 1.0 / d;
./315333330/pr64868.c@21@ATOMIC@#pragma omp atomic@d = 1 / d;
./315333330/pr64868.c@23@ATOMIC@#pragma omp atomic@d = d / 2.0;
./315333330/pr64868.c@25@ATOMIC@#pragma omp atomic@d = d / 2;
./315333330/pr64868.c@27@ATOMIC@#pragma omp atomic@d /= 2.0;
./315333330/pr64868.c@29@ATOMIC@#pragma omp atomic@d /= 2;
./315333330/pr64868.c@31@ATOMIC@#pragma omp atomic@ld = 1.0L / ld;
./315333330/pr64868.c@33@ATOMIC@#pragma omp atomic@ld = 1 / ld;
./315333330/pr64868.c@35@ATOMIC@#pragma omp atomic@ld = ld / 2.0L;
./315333330/pr64868.c@37@ATOMIC@#pragma omp atomic@ld = ld / 2;
./315333330/pr64868.c@39@ATOMIC@#pragma omp atomic@ld /= 2.0L;
./315333330/pr64868.c@41@ATOMIC@#pragma omp atomic@ld /= 2;
./315333330/pr64868.c@52@ATOMIC@#pragma omp atomic@v *= 16;
./315333330/pr64868.c@54@ATOMIC@#pragma omp atomic@v = 1.0 / v;
./315333330/pr64868.c@56@ATOMIC@#pragma omp atomic@v = N1 / v;
./315333330/pr64868.c@58@ATOMIC@#pragma omp atomic@v = v / 2.0;
./315333330/pr64868.c@60@ATOMIC@#pragma omp atomic@v = v / N2;
./315333330/pr64868.c@62@ATOMIC@#pragma omp atomic@v /= 2.0;
./315333330/pr64868.c@64@ATOMIC@#pragma omp atomic@v /= N2;
./315333330/tpl-atomic-2.C@4@ATOMIC@#pragma omp atomic@s += 1;
./315333330/tpl-atomic-2.C@9@ATOMIC@#pragma omp atomic@*f |= 1;
./315333330/tpl-atomic-2.C@14@ATOMIC@#pragma omp atomic@*f |= sizeof (T);
./315333330/tpl-atomic-2.C@19@ATOMIC@#pragma omp atomic@*t += 1;
./315333330/tpl-atomic-2.C@24@ATOMIC@#pragma omp atomic@*f |= (T)sizeof(T);
./315333330/ctor-3.C@24@ATOMIC@#pragma omp atomic@icount++;
./315333330/ctor-3.C@33@ATOMIC@#pragma omp atomic@dcount++;
./315333330/ctor-3.C@40@ATOMIC@#pragma omp atomic@ccount++;
./315333330/pr36802-2.c@16@ATOMIC@#pragma omp atomic@n += 1;
./315333330/pr36802-2.c@22@ATOMIC@#pragma omp atomic@q += i;
./315333330/pr36802-2.c@28@ATOMIC@#pragma omp atomic@n += 1;
./315333330/pr27388-1.c@11@ATOMIC@#pragma omp atomic@o += n;
./315333330/reduction-3.c@20@ATOMIC@#pragma omp atomic@j |= 1;
./315333330/reduction-3.c@33@ATOMIC@#pragma omp atomic@j |= 2;
./315333330/reduction-3.c@36@ATOMIC@#pragma omp atomic@j |= 4;
./315333330/reduction-3.c@39@ATOMIC@#pragma omp atomic@j |= 8;
./315333330/a.17.2.c@11@ATOMIC@#pragma omp atomic@*i += 1;
./315333330/a.17.2.c@13@ATOMIC@#pragma omp atomic@*r += 1.0;
./315333330/pr59467.c@16@ATOMIC@#pragma omp atomic@y += z;
./315333330/pr59467.c@29@ATOMIC@#pragma omp atomic@y += z;
./315333330/pr59467.c@42@ATOMIC@#pragma omp atomic@y += z;
./315333330/pr59467.c@53@ATOMIC@#pragma omp atomic@y += x;
./315333330/pr48716.c@8@ATOMIC@#pragma omp atomic@s++;
./315333330/pr48716.c@16@ATOMIC@#pragma omp atomic@s++;
./315333330/reduction-1.c@11@ATOMIC@#pragma omp atomic@j |= 1;
./315333330/reduction-1.c@14@ATOMIC@#pragma omp atomic@j |= 2;
./315333330/atomic-15.c@7@ATOMIC@#pragma omp atomic@x = -3 + x;
./315333330/task-6.C@13@ATOMIC@#pragma omp atomic@k++;
./315333330/task-6.C@56@ATOMIC@#pragma omp atomic@k++;
./315333330/atomic-3.c@18@ATOMIC@#pragma omp atomic@e[0] += x;
./315333330/atomic-3.c@20@ATOMIC@#pragma omp atomic@e[16] += x;
./315333330/atomic-3.c@22@ATOMIC@#pragma omp atomic@g += y;
./315333330/atomic-3.c@24@ATOMIC@#pragma omp atomic@__real__ d += x;
./315333330/atomic-3.c@26@ATOMIC@#pragma omp atomic@__imag__ f += x;
./315333330/for-7.c@15@ATOMIC@#pragma omp atomic@cnt++;
./315333330/for-7.c@24@ATOMIC@#pragma omp atomic@cnt++;
./315333330/pr30703.C@13@ATOMIC@#pragma omp atomic@ctor++;
./315333330/pr30703.C@19@ATOMIC@#pragma omp atomic@cctor++;
./315333330/pr30703.C@24@ATOMIC@#pragma omp atomic@dtor++;
./315333330/pr30703.C@36@ATOMIC@#pragma omp atomic@j += 1;
./315333330/ctor-1.C@19@ATOMIC@#pragma omp atomic@icount++;
./315333330/ctor-1.C@24@ATOMIC@#pragma omp atomic@dcount++;
./315333330/ctor-1.C@29@ATOMIC@#pragma omp atomic@xcount++;
./315333330/atomic-10.c@9@ATOMIC@#pragma omp atomic@x1++;
./315333330/atomic-10.c@11@ATOMIC@#pragma omp atomic@x2--;
./315333330/atomic-10.c@13@ATOMIC@#pragma omp atomic@++x3;
./315333330/atomic-10.c@15@ATOMIC@#pragma omp atomic@--x4;
./315333330/atomic-10.c@17@ATOMIC@#pragma omp atomic@x5 += 1;
./315333330/atomic-10.c@19@ATOMIC@#pragma omp atomic@x1 -= y6;
./315333330/atomic-10.c@21@ATOMIC@#pragma omp atomic@x2 |= 1;
./315333330/atomic-10.c@23@ATOMIC@#pragma omp atomic@x3 &= 1;
./315333330/atomic-10.c@25@ATOMIC@#pragma omp atomic@x4 ^= 1;
./315333330/atomic-10.c@27@ATOMIC@#pragma omp atomic@x5 *= 3;
./315333330/atomic-10.c@29@ATOMIC@#pragma omp atomic@x1 /= 3;
./315333330/atomic-10.c@31@ATOMIC@#pragma omp atomic@x2 /= 3;
./315333330/atomic-10.c@33@ATOMIC@#pragma omp atomic@x3 <<= 3;
./315333330/atomic-10.c@35@ATOMIC@#pragma omp atomic@x4 >>= 3;
./315333330/atomic-10.c@41@ATOMIC@#pragma omp atomic@y6++;
./315333330/atomic-10.c@43@ATOMIC@#pragma omp atomic@y2--;
./315333330/atomic-10.c@45@ATOMIC@#pragma omp atomic@++y3;
./315333330/atomic-10.c@47@ATOMIC@#pragma omp atomic@--y4;
./315333330/atomic-10.c@49@ATOMIC@#pragma omp atomic@y5 += 1;
./315333330/atomic-10.c@51@ATOMIC@#pragma omp atomic@y6 -= x1;
./315333330/atomic-10.c@53@ATOMIC@#pragma omp atomic@y2 |= 1;
./315333330/atomic-10.c@55@ATOMIC@#pragma omp atomic@y3 &= 1;
./315333330/atomic-10.c@57@ATOMIC@#pragma omp atomic@y4 ^= 1;
./315333330/atomic-10.c@59@ATOMIC@#pragma omp atomic@y5 *= 3;
./315333330/atomic-10.c@61@ATOMIC@#pragma omp atomic@y6 /= 3;
./315333330/atomic-10.c@63@ATOMIC@#pragma omp atomic@y2 /= 3;
./315333330/atomic-10.c@65@ATOMIC@#pragma omp atomic@y3 <<= 3;
./315333330/atomic-10.c@67@ATOMIC@#pragma omp atomic@y4 >>= 3;
./315333330/atomic-10.c@73@ATOMIC@#pragma omp atomic@z1++;
./315333330/atomic-10.c@75@ATOMIC@#pragma omp atomic@z2--;
./315333330/atomic-10.c@77@ATOMIC@#pragma omp atomic@++z3;
./315333330/atomic-10.c@79@ATOMIC@#pragma omp atomic@--z4;
./315333330/atomic-10.c@81@ATOMIC@#pragma omp atomic@z5 += 1;
./315333330/atomic-10.c@83@ATOMIC@#pragma omp atomic@z1 |= 1;
./315333330/atomic-10.c@85@ATOMIC@#pragma omp atomic@z2 &= 1;
./315333330/atomic-10.c@87@ATOMIC@#pragma omp atomic@z3 ^= 1;
./315333330/atomic-10.c@89@ATOMIC@#pragma omp atomic@z4 *= 3;
./315333330/atomic-10.c@91@ATOMIC@#pragma omp atomic@z5 /= 3;
./315333330/atomic-10.c@93@ATOMIC@#pragma omp atomic@z1 /= 3;
./315333330/atomic-10.c@95@ATOMIC@#pragma omp atomic@z2 <<= 3;
./315333330/atomic-10.c@97@ATOMIC@#pragma omp atomic@z3 >>= 3;
./315333330/atomic-10.c@103@ATOMIC@#pragma omp atomic@a1 += 8.0;
./315333330/atomic-10.c@105@ATOMIC@#pragma omp atomic@a2 *= 3.5;
./315333330/atomic-10.c@107@ATOMIC@#pragma omp atomic@a3 -= a1 + a2;
./315333330/atomic-10.c@109@ATOMIC@#pragma omp atomic@a4 /= 2.0;
./315333330/atomic-9.c@16@ATOMIC@#pragma omp atomic@x = x + 7 + 6;
./315333330/atomic-9.c@20@ATOMIC@#pragma omp atomic@x = x * (2 - 1);
./315333330/atomic-9.c@65@ATOMIC@#pragma omp atomic@x = x * -4 / 2;
./315333330/pr30494.c@10@ATOMIC@#pragma omp atomic@errors += 1;
./315333330/pr30494.c@14@ATOMIC@#pragma omp atomic@errors += 1;
./315333330/cancel-for-2.C@20@ATOMIC@#pragma omp atomic@v++;
./315333330/cancel-for-2.C@27@ATOMIC@#pragma omp atomic@w += 8;
./315333330/cancel-for-2.C@34@ATOMIC@#pragma omp atomic@v += 2;
./315333330/cancel-for-2.C@55@ATOMIC@#pragma omp atomic@v++;
./315333330/cancel-for-2.C@63@ATOMIC@#pragma omp atomic@w += 8;
./315333330/cancel-for-2.C@71@ATOMIC@#pragma omp atomic@v += 2;
./315333330/loop-6.C@10@ATOMIC@#pragma omp atomic@arr[loopidx * 5 + idx]++;
./315333330/ctor-5.C@17@ATOMIC@#pragma omp atomic@count++;
./315333330/pr27337.C@14@ATOMIC@#pragma omp atomic@n[0]++;
./315333330/pr27337.C@20@ATOMIC@#pragma omp atomic@n[1]++;
./315333330/pr27337.C@29@ATOMIC@#pragma omp atomic@n[2]++;
./315333330/pr27337.C@50@ATOMIC@#pragma omp atomic@ret.i += omp_get_thread_num () + 1;
./315333330/shared-1.C@24@ATOMIC@#pragma omp atomic@a += omp_get_num_threads ();
./315333330/shared-1.C@26@ATOMIC@#pragma omp atomic@b += omp_get_num_threads ();
./315333330/pr39573.C@5@ATOMIC@#pragma omp atomic@z += x[2];
./315333330/nestedfn-4.c@18@ATOMIC@#pragma omp atomic@l++;
./315333330/nestedfn-4.c@24@ATOMIC@#pragma omp atomic@l++;
./315333330/nestedfn-4.c@29@ATOMIC@#pragma omp atomic@l++;
./315333330/nestedfn-4.c@35@ATOMIC@#pragma omp atomic@l++;
./315333330/nestedfn-4.c@39@ATOMIC@#pragma omp atomic@l++;
./315333330/nestedfn-4.c@44@ATOMIC@#pragma omp atomic@l++;
./315333330/pr26943-3.c@27@ATOMIC@#pragma omp atomic@a += i;
./315333330/pr26943-3.c@32@ATOMIC@#pragma omp atomic@e[0] += i;
./315333330/ctor-12.C@8@ATOMIC@#pragma omp atomic@ctors++;
./315333330/ctor-12.C@14@ATOMIC@#pragma omp atomic@copyctors++;
./315333330/ctor-12.C@20@ATOMIC@#pragma omp atomic@assignops++;
./315333330/ctor-12.C@26@ATOMIC@#pragma omp atomic@dtors++;
./315333330/ctor-12.C@49@ATOMIC@#pragma omp atomic@n++;
./315333330/atomic-5.c@12@ATOMIC@#pragma omp atomic@d += 1.0L;
./315333330/pr36802-3.c@16@ATOMIC@#pragma omp atomic@n += 1;
./315333330/pr36802-3.c@25@ATOMIC@#pragma omp atomic@n += 1;
./315333330/pr36802-3.c@31@ATOMIC@#pragma omp atomic@q += i;
./315333330/pr59152.c@10@ATOMIC@#pragma omp atomic@b[v3]++;
./315333330/pr59152.c@21@ATOMIC@#pragma omp atomic@b[v3]++;
./315333330/pr59152.c@32@ATOMIC@#pragma omp atomic@b[v3]++;
./315333330/atomic-8.c@14@ATOMIC@#pragma omp atomic@x = x + 7 + 6;
./315333330/atomic-8.c@18@ATOMIC@#pragma omp atomic@x = x * (2 - 1);
./315333330/atomic-8.c@63@ATOMIC@#pragma omp atomic@x = x * -4 / 2;
./315333330/pr35549.c@12@ATOMIC@#pragma omp atomic@n += 1;
./315333330/pr35549.c@17@ATOMIC@#pragma omp atomic@n += 1;
./315333330/pr68128-2.c@136@ATOMIC@#pragma omp atomic@a34++;
./315333330/pr34513.C@12@ATOMIC@#pragma omp atomic@shrd += 1;
./315333330/pr34513.C@16@ATOMIC@#pragma omp atomic@errors += 1;
./315333330/sort-1.c@230@ATOMIC@#pragma omp atomic@*busy += 1;
./315333330/sort-1.c@240@ATOMIC@#pragma omp atomic@*busy -= 1;
./408823577/07_touch_by_all_threadprivate.c@70@ATOMIC@#pragma omp atomic@endrun += 1;
./242289757/mandel_par.c@57@ATOMIC@#pragma omp atomic@numoutside++;
./242289757/3_mandel_fix.c@63@ATOMIC@#pragma omp atomic@numoutside++;
./409680523/pi_spmdv2.c@29@ATOMIC@#pragma omp atomic@full_sum += partial_sum;
./409680523/pi_spmd.c@27@ATOMIC@#pragma omp atomic@partial_sum += + 4.0/(1.0+x*x);
./271946455/stddev.c@23@ATOMIC@#pragma omp atomic@mean[x] += data[k][x] / 100;
./271946455/stddev.c@30@ATOMIC@#pragma omp atomic@std_dev[t] += ((data[k][t] - mean[t]) * (data[k][t] - mean[t])) / 99;
./271946455/mean.c@22@ATOMIC@#pragma omp atomic@sum += a[i];
./271946455/symm.c@31@ATOMIC@#pragma omp atomic@C[k][j] += alpha * B[i][j] * A[i][k];
./271946455/symm.c@35@ATOMIC@#pragma omp atomic@temp2 += B[k][j] * A[i][k];
./271946455/doitgen.c@26@ATOMIC@#pragma omp atomic@sum[k] += A[i][j][h] * C4[h][k];
./271946455/2mm.c@29@ATOMIC@#pragma omp atomic@temp[i][j] += alpha * a[i][k] * b[k][j];
./271946455/2mm.c@40@ATOMIC@#pragma omp atomic@d[i][j] += temp[i][k] * c[k][j];
./271946455/syr2k.c@33@ATOMIC@#pragma omp atomic@C[i][j] += (B[i][k] * A[j][k] * alpha) + (B[j][k] * A[i][k] * alpha);
./271946455/gramschmidt.c@24@ATOMIC@#pragma omp atomic@norm += A[i][k] * A[i][k];
./271946455/gramschmidt.c@35@ATOMIC@#pragma omp atomic@R[k][j] += Q[i][k] * A[i][j];
./271946455/mvt.c@24@ATOMIC@#pragma omp atomic@x1[i] += A[i][j] * y_1[j];
./271946455/mvt.c@31@ATOMIC@#pragma omp atomic@x2[i] += A[j][i] * y_2[j];
./271946455/gemm.c@33@ATOMIC@#pragma omp atomic@C[i][j] += alpha * A[i][k] * B[k][j];
./271946455/covariance.c@24@ATOMIC@#pragma omp atomic@mean[x] += data[k][x] / 3000;
./271946455/covariance.c@32@ATOMIC@#pragma omp atomic@cov[i][j] += ((data[k][i] - mean[i]) * (data[k][j] - mean[j])) / 2999;
./271946455/correlation.c@25@ATOMIC@#pragma omp atomic@mean[x] += data[k][x] / 3000;
./271946455/correlation.c@33@ATOMIC@#pragma omp atomic@cov[i][j] += ((data[k][i] - mean[i]) * (data[k][j] - mean[j])) / 99;
./271946455/correlation.c@41@ATOMIC@#pragma omp atomic@std_dev[t] += ((data[k][t] - mean[t]) * (data[k][t] - mean[t])) / 99;
./271946455/atax.c@24@ATOMIC@#pragma omp atomic@tmp[i] += A[i][j] * x[j];
./271946455/atax.c@28@ATOMIC@#pragma omp atomic@y[k] += A[i][k] * tmp[i];
./271946455/trmm.c@26@ATOMIC@#pragma omp atomic@B[i][j] += A[k][i] * B[k][j];
./271946455/3mm.c@27@ATOMIC@#pragma omp atomic@ab[i][j] += a[i][k] * b[k][j];
./271946455/3mm.c@36@ATOMIC@#pragma omp atomic@cd[i][j] += c[i][k] * d[k][j];
./271946455/3mm.c@45@ATOMIC@#pragma omp atomic@abcd[i][j] += ab[i][k] * cd[k][j];
./271946455/gemver.c@29@ATOMIC@#pragma omp atomic@A[i][j] += u1[i] * v1[j] + u2[i] * v2[j];
./271946455/gemver.c@36@ATOMIC@#pragma omp atomic@x[i] += beta * A[j][i] * y[j];
./271946455/gemver.c@48@ATOMIC@#pragma omp atomic@w[i][j] += alpha * A[i][j] * x[i];
./271946455/syrk.c@33@ATOMIC@#pragma omp atomic@C[i][j] += A[i][k] * A[j][k] * alpha;
./271946455/bicg.c@24@ATOMIC@#pragma omp atomic@s[j] += A[i][j] * r[i];
./271946455/bicg.c@28@ATOMIC@#pragma omp atomic@q[i] += A[i][j] * p[j];
./116970186/pfdg.c@136@ATOMIC@#pragma omp atomic@*prime_count += count;
./2997204/keepass_fmt_plug.c@149@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
else if (cur_salt->version == 2 && cur_salt->algorithm == 0) {
unsigned char dec_buf[32];
AES_cbc_encrypt(cur_salt->contents, dec_buf, 32,
&akey, iv, AES_DECRYPT);
if (!memcmp(dec_buf, cur_salt->expected_bytes, 32)) {
cracked[index] = 1;"
./2997204/keepass_fmt_plug.c@161@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
else if (cur_salt->version == 2 && cur_salt->algorithm == 2) {
unsigned char dec_buf[32];
chacha_decrypt_bytes(&ckey, cur_salt->contents, dec_buf, 32, 20);
if (!memcmp(dec_buf, cur_salt->expected_bytes, 32)) {
cracked[index] = 1;
#ifdef _OPENMP"
./2997204/keepass_fmt_plug.c@172@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
else if (cur_salt->version == 1 && cur_salt->algorithm == 1) {
int crypto_size;
decrypted_content = mem_alloc(cur_salt->contentsize);
crypto_size = Twofish_Decrypt(&tkey, cur_salt->contents,
decrypted_content,
cur_salt->contentsize, iv);"
./2997204/keepass_fmt_plug.c@191@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
MEM_FREE(decrypted_content);
} else {
error_msg(""KeePass v2 w/ Twofish not supported yet"");
}
}
return count;"
./2997204/bks_fmt_plug.c@228@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
} else if (cur_salt->format == 1) {
unsigned char compute_checkum[20];
unsigned char iv[16];
unsigned char key[32];
Twofish_key tkey;
int datalen = 0;
unsigned char store_data_decrypted[MAX_STORE_DATA_LENGTH];"
./2997204/bks_fmt_plug.c@261@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
#else
size_t lens[SSE_GROUP_SZ_SHA1], j;
const unsigned char *keys[SSE_GROUP_SZ_SHA1];
for (j = 0; j < SSE_GROUP_SZ_SHA1; ++j) {
lens[j] = saved_len[index+j];
keys[j] = (const unsigned char*)(saved_key[index+j]);"
./2997204/bks_fmt_plug.c@291@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
} else if (cur_salt->format == 1) {
unsigned char iv_[SSE_GROUP_SZ_SHA1][16], *iv[SSE_GROUP_SZ_SHA1];
unsigned char ckey_[SSE_GROUP_SZ_SHA1][32], *ckey[SSE_GROUP_SZ_SHA1];
Twofish_key tkey;
int datalen = 0;
unsigned char store_data_decrypted[MAX_STORE_DATA_LENGTH];"
./2997204/bks_fmt_plug.c@332@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
#endif
}
return count;
}
static int cmp_all(void *binary, int count)"
./2997204/axcrypt_fmt_plug.c@136@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
else if (cur_salt->version == 2) {
unsigned char seed[MIN_KEYS_PER_CRYPT][64];
int i;
#ifdef SIMD_COEF_64
int lens[MIN_KEYS_PER_CRYPT];"
./2997204/axcrypt_fmt_plug.c@186@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{"
./2997204/androidbackup_fmt_plug.c@126@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
} else {
cracked[index+i] = 0;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)"
./2997204/andotp_fmt_plug.c@161@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/opencl_diskcryptor_fmt_plug.c@249@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/pdf_fmt_plug.c@499@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
if (crypt_out->R == 3 || crypt_out->R == 4)
if (memcmp(output, crypt_out->u, 16) == 0) {
cracked[index] = 1;
#ifdef _OPENMP
#pragma omp atomic
#endif
any_cracked |= 1;"
./2997204/pdf_fmt_plug.c@507@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/o5logon_fmt_plug.c@217@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
} else {
unsigned char pt[16];
memcpy(iv, cur_salt->ct + 16, 16);
aesDec(cur_salt->ct + 32, pt, key, 1, iv);
if (!memcmp(pt + 8, ""\x08\x08\x08\x08\x08\x08\x08\x08"", 8))"
./2997204/o5logon_fmt_plug.c@231@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/cardano_fmt_plug.c@119@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/bt_hash_type_64.c@75@ATOMIC@#pragma omp atomic@"#endif
hash_table_collisions[hash_table_idx]++;
if (error && (bt_hash_table_64[hash_table_idx] != (unsigned int)(hash & 0xffffffff)  ||
bt_hash_table_64[hash_table_idx + bt_hash_table_size] != (unsigned int)(hash >> 32) ||
hash_table_collisions[hash_table_idx] > 1)) {
fprintf(stderr, ""Error building tables: Loaded hash idx:%u, No. of collisions:%u\n"", i, hash_table_collisions[hash_table_idx]);
error = 0;
}
}
#if _OPENMP"
./2997204/bt_hash_type_64.c@237@ATOMIC@#pragma omp atomic@"#endif
collisions[idx]++;
}
counter = 0;
#if _OPENMP
#pragma omp barrier
#endif
#if _OPENMP
#pragma omp for
#endif"
./2997204/bt_hash_type_64.c@252@ATOMIC@#pragma omp atomic@"#endif
counter += (collisions[i] - 3);
}
#if _OPENMP
#pragma omp barrier
#pragma omp sections
#endif
{
#if _OPENMP
#pragma omp section"
./2997204/krb5_tgsrep_fmt_plug.c@130@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/bitshares_fmt_plug.c@164@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
} else {
secp256k1_context *ctxs;
secp256k1_pubkey pubkey;
SHA256_CTX sctx;
unsigned char output[128];
size_t outlen = 33;
int padbyte;"
./2997204/bitshares_fmt_plug.c@202@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
}
}
return count;
}
static int cmp_all(void *binary, int count)"
./2997204/bt_hash_type_128.c@92@ATOMIC@#pragma omp atomic@"#endif
hash_table_collisions[hash_table_idx]++;
if (error && (bt_hash_table_128[hash_table_idx] != (unsigned int)(hash.LO64 & 0xffffffff)  ||
bt_hash_table_128[hash_table_idx + bt_hash_table_size] != (unsigned int)(hash.LO64 >> 32) ||
bt_hash_table_128[hash_table_idx + 2 * bt_hash_table_size] != (unsigned int)(hash.HI64 & 0xffffffff) ||
bt_hash_table_128[hash_table_idx + 3 * bt_hash_table_size] != (unsigned int)(hash.HI64 >> 32) ||
hash_table_collisions[hash_table_idx] > 1)) {
fprintf(stderr, ""Error building tables: Loaded hash idx:%u, No. of collisions:%u\n"", i, hash_table_collisions[hash_table_idx]);
error = 0;
}"
./2997204/bt_hash_type_128.c@256@ATOMIC@#pragma omp atomic@"#endif
collisions[idx]++;
}
counter = 0;
#if _OPENMP
#pragma omp barrier
#pragma omp for
#endif
for (i = 0; i < bt_hash_table_size; i++) {
hash_table[i].iter = 0;"
./2997204/bt_hash_type_128.c@269@ATOMIC@#pragma omp atomic@"#endif
counter += (collisions[i] - 3);
}
#if _OPENMP
#pragma omp barrier
#pragma omp sections
#endif
{
#if _OPENMP
#pragma omp section"
./2997204/gpg_fmt_plug.c@92@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/diskcryptor_fmt_plug.c@130@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/krb5_asrep_fmt_plug.c@163@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}  else if (cur_salt->etype == 17 || cur_salt->etype == 18) {
const int key_size = (cur_salt->etype == 17) ? 16 : 32;
#ifdef SIMD_COEF_32
unsigned char *pin[MIN_KEYS_PER_CRYPT], *pout[MIN_KEYS_PER_CRYPT];
for (i = 0; i < MIN_KEYS_PER_CRYPT; ++i) {
len[i] = strlen(saved_key[i+index]);"
./2997204/krb5_asrep_fmt_plug.c@204@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
}
if (cur_salt->etype == 23)
new_keys = 0;
return count;
}"
./2997204/bitcoin_fmt_plug.c@254@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
#else
AES_KEY aes_key;
unsigned char key_iv[SHA512_DIGEST_LENGTH];
unsigned char iv[16];
unsigned char output[16];
memcpy(iv, cur_salt->cry_master + cur_salt->cry_master_length - 32, 16);"
./2997204/bitcoin_fmt_plug.c@279@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
#endif
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/o3logon_fmt_plug.c@235@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static void *get_salt(char *ciphertext)
{
static ora9_salt salt;
UTF8 tmp[MAX_USERNAME_LEN*5+1];"
./2997204/encdatavault_md5_fmt_plug.c@136@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
} else {
ivs[0].u64[0] = 0;
for (j = 1; j < ENC_MAX_KEY_NUM; j++) {
ivs[j].u64[0] = kdf_out[i][ENC_MAX_KEY_NUM - j].u64[0];
}
enc_aes_ctr_iterated(cur_salt->keychain, result, kdf_out[i][0].u8, ivs, ENC_KEYCHAIN_SIZE,
ENC_MAX_KEY_NUM, 0);"
./2997204/encdatavault_md5_fmt_plug.c@157@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{"
./2997204/tacacs_plus_fmt_plug.c@179@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/bestcrypt_ve_fmt_plug.c@311@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
if (failed) {
#ifdef _OPENMP
if (failed < 0) {
fprintf(stderr, ""OpenMP thread number out of range\n"");
error();
}
#endif"
./2997204/monero_fmt_plug.c@156@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
continue;
}
memcpy(iv, cur_salt->ct, IVLEN);
chacha_keysetup(&ckey, km, 256);
chacha_ivsetup(&ckey, iv, NULL, IVLEN);
chacha_decrypt_bytes(&ckey, cur_salt->ct + IVLEN + 2, out, 32, 8);
if (memmem(out, 32, (void*)""key_data"", 8) || memmem(out, 32, (void*)""m_creation_timestamp"", 20)) {
cracked[index] = 1;"
./2997204/monero_fmt_plug.c@168@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/o10glogon_fmt_plug.c@250@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static void *get_salt(char *ciphertext)
{
static ora10g_salt salt;
UTF8 tmp[MAX_USERNAME_LEN*5+1];"
./2997204/cryptosafe_fmt_plug.c@94@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/telegram_fmt_plug.c@148@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/encfs_fmt_plug.c@124@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/opencl_7z_fmt_plug.c@287@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/radius_fmt_plug.c@207@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/bt.c@194@ATOMIC@#pragma omp atomic@"#endif
offset_data[offset_data_idx].collisions++;
}
#if _OPENMP
#pragma omp barrier
#pragma omp single
#endif
for (i = 0; i < offset_table_size; i++)
if (offset_data[i].collisions) {
if (bt_malloc((void **)&offset_data[i].hash_location_list, offset_data[i].collisions * sizeof(unsigned int)))"
./2997204/opencl_dashlane_fmt_plug.c@222@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/securezip_fmt_plug.c@110@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/ntlmv1_mschapv2_fmt_plug.c@920@ATOMIC@#pragma omp atomic@"#endif
bitmap[value >> 5] |= 1U << (value & 0x1f);
}
else
for (i = 0; i < NBKEYS * BLOCK_LOOPS; i++) {
crypt_key[i] = *(uint32_t*)
&nthash[GETOUTPOS_W32(3, i)] >> 16;
}
#else
#ifdef _OPENMP"
./2997204/ntlmv1_mschapv2_fmt_plug.c@942@ATOMIC@#pragma omp atomic@"#endif
bitmap[value >> 5] |= 1U << (value & 0x1f);
}
}
#endif
keys_prepared = 1;
}
return count;
}
static int cmp_one(void *binary, int index)"
./2997204/keyring_fmt_plug.c@274@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
MEM_FREE(buffers);
}
return count;
}
static int cmp_all(void *binary, int count)
{"
./2997204/bt_hash_type_192.c@96@ATOMIC@#pragma omp atomic@"#endif
hash_table_collisions[hash_table_idx]++;
if (error && (bt_hash_table_192[hash_table_idx] != (unsigned int)(hash.LO & 0xffffffff) ||
bt_hash_table_192[hash_table_idx + bt_hash_table_size] != (unsigned int)(hash.LO >> 32) ||
bt_hash_table_192[hash_table_idx + 2 * bt_hash_table_size] != (unsigned int)(hash.MI & 0xffffffff) ||
bt_hash_table_192[hash_table_idx + 3 * bt_hash_table_size] != (unsigned int)(hash.MI >> 32) ||
bt_hash_table_192[hash_table_idx + 4 * bt_hash_table_size] != (unsigned int)(hash.HI & 0xffffffff) ||
bt_hash_table_192[hash_table_idx + 5 * bt_hash_table_size] != (unsigned int)(hash.HI >> 32) ||
hash_table_collisions[hash_table_idx] > 1)) {
fprintf(stderr, ""Error building tables: Loaded hash idx:%u, No. of collisions:%u\n"", i, hash_table_collisions[hash_table_idx]);"
./2997204/bt_hash_type_192.c@261@ATOMIC@#pragma omp atomic@"#endif
collisions[idx]++;
}
counter = 0;
#if _OPENMP
#pragma omp barrier
#pragma omp for
#endif
for (i = 0; i < bt_hash_table_size; i++) {
hash_table[i].iter = 0;"
./2997204/bt_hash_type_192.c@274@ATOMIC@#pragma omp atomic@"#endif
counter += (collisions[i] - 3);
}
#if _OPENMP
#pragma omp barrier
#pragma omp sections
#endif
{
#if _OPENMP
#pragma omp section"
./2997204/bitwarden_fmt_plug.c@110@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/encdatavault_pbkdf2_fmt_plug.c@132@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
} else {
ivs[0].u64[0] = 0;
for (j = 1; j < ENC_MAX_KEY_NUM; j++) {
ivs[j].u64[0] = kdf_out[i][ENC_MAX_KEY_NUM - j].u64[0];
}
enc_aes_ctr_iterated(cur_salt->keychain, result, kdf_out[i][0].u8, ivs, ENC_KEYCHAIN_SIZE,
ENC_MAX_KEY_NUM, 0);"
./2997204/encdatavault_pbkdf2_fmt_plug.c@153@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{"
./2997204/krb5_tgs_fmt_plug.c@116@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
new_keys = 0;
return *pcount;
}
static int cmp_all(void *binary, int count)
{"
./2997204/opencl_gpg_fmt_plug.c@249@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}"
./2997204/tezos_fmt_plug.c@147@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
}
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;"
./2997204/putty_fmt_plug.c@325@ATOMIC@#pragma omp atomic@"#endif
any_cracked |= 1;
}
return count;
}
static int cmp_all(void *binary, int count)
{
return any_cracked;
}
static int cmp_one(void *binary, int index)"
./2997204/mysql_fmt_plug.c@130@ATOMIC@#pragma omp atomic@retval |= 1;
./172883198/lbp_omp.c@45@ATOMIC@#pragma omp atomic@((int*)hist)[tmp]++;
./172883198/lbp_omp.c@151@ATOMIC@#pragma omp atomic@"#endif
correct_count++;
else
#if DEBUG_OPT_TEST
#pragma omp atomic
#endif
incorrect_count++;
}
}
double end_parallel = GET_TIME;"
./172883198/lbp_omp.c@156@ATOMIC@#pragma omp atomic@"#endif
incorrect_count++;
}
}
double end_parallel = GET_TIME;
start_seq = GET_TIME;
double parallel_time = end_parallel - start_parallel;
for (int i = 0; i < people_count; ++i) {
for (int j = k; j < sample_count_per_person; ++j) {
sprintf(buff, ""%d.%d.txt"", i + 1, j + 1);"
./531045827/pi_atomic.c@20@ATOMIC@#pragma omp atomic@pi += sum * step;
./61401280/sptensor.c@89@ATOMIC@#pragma omp atomic@++hist[inds[x]];
./60191570/success_atomic_03.c@6@ATOMIC@#pragma omp atomic@d += 3.0;
./60191570/success_atomic_04.c@13@ATOMIC@#pragma omp atomic@res += q*(i + 1);
./60191570/success_no_openmp.c@7@ATOMIC@#pragma omp atomic@x++;
./60191570/success_commutative_01.c@10@ATOMIC@#pragma omp atomic@res += v[i];
./60191570/success_taskloop_05.cpp@14@ATOMIC@#pragma omp atomic@var++;
./60191570/success_taskloop_05.cpp@30@ATOMIC@#pragma omp atomic@var++;
./60191570/success_concurrent_01.c@10@ATOMIC@#pragma omp atomic@res += v[i];
./60191570/success_atomic_02.c@6@ATOMIC@#pragma omp atomic@i += 2;
./60191570/success_atomic_02.c@8@ATOMIC@#pragma omp atomic@i++;
./60191570/success_for_02.cpp@9@ATOMIC@#pragma omp atomic@x += i;
./60191570/success_task_15.cpp@6@ATOMIC@#pragma omp atomic@d1 += d2;
./60191570/success_taskloop_06.c@14@ATOMIC@#pragma omp atomic@var++;
./60191570/success_taskloop_06.c@30@ATOMIC@#pragma omp atomic@var++;
./60191570/success_task_14.cpp@12@ATOMIC@#pragma omp atomic@res += v[i];
./60191570/success_concurrent_02.c@11@ATOMIC@#pragma omp atomic@res += v[i];
./60191570/success_03.cpp@9@ATOMIC@#pragma omp atomic@x += i;
./60191570/success_no_openmp.cpp@7@ATOMIC@#pragma omp atomic@x++;
./60191570/success_04.cpp@11@ATOMIC@#pragma omp atomic@*x += i;
./596098733/09-AtomicOperations-OpenMP.c@6@ATOMIC@#pragma omp atomic@shared_counter++;
./92494521/DRB147-critical1-orig-gpu-no.c@9@ATOMIC@#pragma omp atomic@var++;
./92494521/DRB147-critical1-orig-gpu-no.c@11@ATOMIC@#pragma omp atomic@var -= 2;
./92494521/DRB108-atomic-orig-no.c@7@ATOMIC@#pragma omp atomic@a+=1;
./624120083/monte_omp.c@16@ATOMIC@#pragma omp atomic@count++;
./242248042/ocean6868.c@74@ATOMIC@#pragma omp atomic@"diff += mydiff;
#pragma omp barrier
done = diff/(dim*dim) < tol;
#pragma omp single
{
C = A; A = B; B = C;
}
}
}
return iter;"
./242248042/testocean.c@212@ATOMIC@#pragma omp atomic@"diff += mydiff;
#pragma omp barrier
done = diff / (dim * dim) < tol;
#pragma omp single nowait
{
C = A;
A = B;
B = C;
}
#pragma omp barrier"
./242248042/swapCheck2.c@8@ATOMIC@#pragma omp atomic@D = D + 1;
./242248042/swapCheck3.c@8@ATOMIC@#pragma omp atomic@D = D + 1;
./242248042/updateSwap.c@12@ATOMIC@#pragma omp atomic@D = D + 1;
./242248042/barr-check.c@9@ATOMIC@#pragma omp atomic@Y = Y + 1;
./242248042/barr-check.c@12@ATOMIC@#pragma omp atomic@Y = Y + 2;
./242248042/barr-check.c@22@ATOMIC@#pragma omp atomic@Y = Y + 1;
./242248042/atomic-test.c@8@ATOMIC@#pragma omp atomic@x += foo(foo(0));
./242248042/cs6868-ocean.c@70@ATOMIC@#pragma omp atomic@"diff += mydiff;
#pragma omp barrier
done = diff/(dim*dim) < tol;
#pragma omp single
{
C = A; A = B; B = C;
}
}
}
return iter;"
./242248042/expand1.c@7@ATOMIC@#pragma omp atomic@X = X + 1;
./242248042/expand1.c@9@ATOMIC@#pragma omp atomic@Y = Y + 1;
./242248042/test37.c@9@ATOMIC@#pragma omp atomic@a = a + 2;
./242248042/swapCheck.c@8@ATOMIC@#pragma omp atomic@D = D + 1;
./242248042/singleFlowConflict.c@7@ATOMIC@#pragma omp atomic@X = X +1;
./405671279/mandel-omp-point-task.c@65@ATOMIC@#pragma omp atomic@histogram[k-1]++;
./405671279/mandel-omp-point-taskloop.c@64@ATOMIC@#pragma omp atomic@histogram[k-1]++;
./405671279/mandel-omp-optional-row.c@64@ATOMIC@#pragma omp atomic@histogram[k-1]++;
./405671279/mandel-omp-row-taskloop.c@64@ATOMIC@#pragma omp atomic@histogram[k-1]++;
./405671279/mandel-omp-point-taskloop-nogroup.c@64@ATOMIC@#pragma omp atomic@histogram[k-1]++;
./405671279/mandel-omp-optional-point.c@64@ATOMIC@#pragma omp atomic@histogram[k-1]++;
./96894970/mpi_ompss_pils.c@53@ATOMIC@#pragma omp atomic@*iter_time += local_iter_time;
./127048111/util.c@36@ATOMIC@#pragma omp atomic@T->xadj[G->adjncy[e]]++;
./127048111/kt.c@719@ATOMIC@#pragma omp atomic@adjwgt[ei]++;
./127048111/kt.c@721@ATOMIC@#pragma omp atomic@adjwgt[ejstart+hmap[l]]++;
./127048111/kt.c@728@ATOMIC@#pragma omp atomic@adjwgt[ei]++;
./127048111/kt.c@730@ATOMIC@#pragma omp atomic@adjwgt[ejstart+hmap[l]]++;
./127048111/kt.c@738@ATOMIC@#pragma omp atomic@adjwgt[ei]++;
./127048111/kt.c@740@ATOMIC@#pragma omp atomic@adjwgt[ejstart+tmap[adjncy[ei]]]++;
./127048111/kt.c@748@ATOMIC@#pragma omp atomic@adjwgt[xadj[vi]+tadjncy[ej+1]-1] += nlocal;
./127048111/kt.c@768@ATOMIC@#pragma omp atomic@adjwgt[ei]++;
./127048111/kt.c@770@ATOMIC@#pragma omp atomic@adjwgt[ejstart+hmap[vk&hmsizel]]++;
./127048111/kt.c@778@ATOMIC@#pragma omp atomic@adjwgt[ei]++;
./127048111/kt.c@780@ATOMIC@#pragma omp atomic@adjwgt[ejstart+tmap[adjncy[ei]]]++;
./127048111/kt.c@788@ATOMIC@#pragma omp atomic@adjwgt[xadj[vi]+tadjncy[ej+1]-1] += nlocal;
./127048111/kt.c@820@ATOMIC@#pragma omp atomic@adjwgt[ei]++;
./127048111/kt.c@822@ATOMIC@#pragma omp atomic@adjwgt[ejstart+tmap1[adjncy[ei]]]++;
./127048111/kt.c@830@ATOMIC@#pragma omp atomic@adjwgt[xadj[vi]+tadjncy[ej+1]-1] += nlocal;
./514584527/omp-trap1.c@42@ATOMIC@#pragma omp atomic@result += partial_result;
./71593983/arrayProb.cpp@27@ATOMIC@#pragma omp atomic@sum += 1;
./244972575/backup.c@380@ATOMIC@#pragma omp atomic@accessMat(culture_cells, cells[i].pos_row, cells[i].pos_col)++;
./244972575/evolution_OpenMP_g110.c@350@ATOMIC@#pragma omp atomic@accessMat(culture_cells, cells[i].pos_row, cells[i].pos_col)++;
./244972575/evolution_OpenMP_g110.c@466@ATOMIC@#pragma omp atomic@accessMat(culture_cells, cells[i].pos_row, cells[i].pos_col)++;
./244972575/viernesJunglaNoche.c@378@ATOMIC@#pragma omp atomic@accessMat(culture_cells, cells[i].pos_row, cells[i].pos_col)++;
./58348790/atomic.c@8@ATOMIC@#pragma omp atomic@count++;
./142718254/combiner_single_broadcast_postamble.h@48@ATOMIC@#pragma omp atomic@ip_active_vertices++;
./142718254/combiner_spread_postamble.h@227@ATOMIC@#pragma omp atomic@ip_active_vertices += ip_all_spread_vertices_omp[ip_my_thread_num * IP_CACHE_LINE_LENGTH].size;
./352144340/char_freq_par_atomic.c@51@ATOMIC@#pragma omp atomic@freq[buffer[i] - base]++;
./423823812/counting_sort.c@110@ATOMIC@#pragma omp atomic@C[A[i] - min]++;
./13330867/random.c@202@ATOMIC@#pragma omp atomic@"#elif defined(CHUNKED)
if (index >= low && index < up) {
#endif
Table[index] ^= ran[j];
#if VERBOSE
#pragma omp atomic
Hist[index] += 1;
#endif
#if CHUNKED
}"
./13330867/random.c@208@ATOMIC@#pragma omp atomic@Hist[index] += 1;
./13330867/refcount.c@234@ATOMIC@#pragma omp atomic@COUNTER1++;
./13330867/refcount.c@236@ATOMIC@#pragma omp atomic@COUNTER2++;
./13330867/refcount.c@273@ATOMIC@#pragma omp atomic@COUNTER1++;
./13330867/refcount.c@275@ATOMIC@#pragma omp atomic@COUNTER2++;
./517667293/seq_kmeans.c@73@ATOMIC@#pragma omp atomic@newClusterSize[index]++;
./517667293/seq_kmeans.c@76@ATOMIC@#pragma omp atomic@newClusters[index][j] += objects[i][j];
./134549171/PI_1.c@34@ATOMIC@#pragma omp atomic@pi += sum;
./134549171/Mandel.c@74@ATOMIC@#pragma omp atomic@numoutside++;
./165330523/mandel_par.c@57@ATOMIC@#pragma omp atomic@numoutside++;
./95979680/paralelo.c@60@ATOMIC@#pragma omp atomic@count[i] += local_count[i];
./262637828/MPIOpenMPVersion.c@37@ATOMIC@#pragma omp atomic@count++;
./262637828/OpenMpVersion.c@31@ATOMIC@#pragma omp atomic@numoutside++;
./109233621/atomic.c@7@ATOMIC@#pragma omp atomic@count++;
./389501007/02_pi.cpp@32@ATOMIC@#pragma omp atomic@global_ans += my_ans;
./389501007/04_array_sum.cpp@107@ATOMIC@#pragma omp atomic@global_total += my_total;
./269991796/pi_mc_omp.c@49@ATOMIC@#pragma omp atomic@nIn++;
./269991796/pi_mc_omp.c@52@ATOMIC@#pragma omp atomic@m++;
./182564675/tsynch.c@22@ATOMIC@#pragma omp atomic@result++;
./182564675/ttask.c@16@ATOMIC@#pragma omp atomic@result += argum;
./182564675/ttask.c@23@ATOMIC@#pragma omp atomic@result += argum;
./182564675/tworkshare.c@14@ATOMIC@#pragma omp atomic@result++;
./182564675/tworkshare.c@22@ATOMIC@#pragma omp atomic@result++;
./182564675/tworkshare.c@28@ATOMIC@#pragma omp atomic@result++;
./182564675/tsynchtasks.c@13@ATOMIC@#pragma omp atomic@result += argum;
./182564675/tsynchtasks.c@19@ATOMIC@#pragma omp atomic@result += argum;
./182564675/tsynchtasks.c@26@ATOMIC@#pragma omp atomic@result += argum;
./182564675/ttaskloop.c@11@ATOMIC@#pragma omp atomic@result++;
./182564675/ttaskloop.c@17@ATOMIC@#pragma omp atomic@result+=argum;
./182564675/ttaskloop.c@23@ATOMIC@#pragma omp atomic@result+=argum;
./182564675/ttaskloop.c@29@ATOMIC@#pragma omp atomic@result+=argum;
./193826361/mandel_par.c@40@ATOMIC@#pragma omp atomic@numoutside++;
./127780906/pi_omp_n.c@20@ATOMIC@#pragma omp atomic@sum += local_sum;
./162153281/kMeans1.cpp@67@ATOMIC@#pragma omp atomic@l++;
./107320494/host_matrix_csr.cpp@4488@ATOMIC@#pragma omp atomic@"#endif
cast_w->vec_[col] += 1.0f;
}
}

if(global == true)
{
PtrType gst_row_begin = cast_gst->mat_.row_offset[i];
PtrType gst_row_end   = cast_gst->mat_.row_offset[i + 1];
"
./107320494/host_matrix_csr.cpp@4509@ATOMIC@#pragma omp atomic@"#endif
cast_w->vec_[col + this->nrow_] += 1.0f;
}
}
}
}

return true;
}
"
./115144968/bare_concurrent_container.h@162@ATOMIC@#pragma omp atomic@total_size += ostrs[i].size();
./115144968/bare_concurrent_map.h@237@ATOMIC@#pragma omp atomic@total_size += ostrs[i].size();
./546806621/omp_atomic.c@70@ATOMIC@#pragma omp atomic@num_n0++;
./546806621/parallel.c@65@ATOMIC@#pragma omp atomic@num_n0++;
./538481564/omp10.cpp@29@ATOMIC@#pragma omp atomic@count++;
./632610376/main.cpp@66@ATOMIC@#pragma omp atomic@sum++;
./632610376/main.cpp@73@ATOMIC@#pragma omp atomic@sum--;
./632610376/main.cpp@131@ATOMIC@#pragma omp atomic@sum += tmpSum;
./632610376/main.cpp@141@ATOMIC@#pragma omp atomic@sum += tmpSum;
./79154277/dot_product.cpp@25@ATOMIC@#pragma omp atomic@result += my_result;
./79154277/false_sharing3.cpp@37@ATOMIC@#pragma omp atomic@odds += result[p];
./79154277/false_sharing1.cpp@31@ATOMIC@#pragma omp atomic@odds += result[p];
./79154277/false_sharing2.cpp@29@ATOMIC@#pragma omp atomic@odds += odds_mine;
./201914841/spatial_index.h@416@ATOMIC@#pragma omp atomic@++buckets[j][digit];
./330808759/min_examples.cpp@287@ATOMIC@#pragma omp atomic@x += 1;
./544987708/JobsQueue.h@81@ATOMIC@#pragma omp atomic@numProducers--;
./127241896/main.cpp@58@ATOMIC@#pragma omp atomic@histogramArray[getColor(i).getValue()]++;
./127241896/main.cpp@76@ATOMIC@#pragma omp atomic@histogramArray[getColor(getPixel(b_size, _block, i, j)).getValue()]++;
./311134324/MultiplyMatrixParallel.h@25@ATOMIC@#pragma omp atomic@*value += increment;
./61810048/Histogram.cpp@96@ATOMIC@#pragma omp atomic@output_array[ind] += double_buffer[ipart];
./61810048/DiagnosticScalar.h@50@ATOMIC@#pragma omp atomic@( *values_ )[index]+=v;
./61810048/DiagnosticRadiationSpectrum.cpp@161@ATOMIC@#pragma omp atomic@data_sum[ind+i] += increment;
./133093266/main_q1.cpp@39@ATOMIC@#pragma omp atomic@sums[0] +=sums_th[0];
./133093266/main_q1.cpp@41@ATOMIC@#pragma omp atomic@sums[1] += sums_th[1];
./46390503/stream.c@167@ATOMIC@#pragma omp atomic@k++;
./354394776/main.cpp@35@ATOMIC@#pragma omp atomic@resultado = resultado + vetor[i];
./318024551/papiwrapperutil.h@606@ATOMIC@#pragma omp atomic@values[i] += localVal;
./164461391/neuron.h@78@ATOMIC@#pragma omp atomic@optimization[i]->derivative += enter[i] * d_res_function_multiplied_error;
./164461391/neuron.h@82@ATOMIC@#pragma omp atomic@optimization.back()->derivative -= d_res_function_multiplied_error;
./154528299/cpp_omp_sample.cpp@103@ATOMIC@#pragma omp atomic@total = total + myid ;
./113714836/adaptive_maxpool_2d.h@92@ATOMIC@#pragma omp atomic@grad_input[inp_offset + idx] += pixv(g_out_nc, out_W, y, x);
./113714836/adaptive_avgpool_2d.h@98@ATOMIC@#pragma omp atomic@pixv(grad_input_nc, inp_W, i, j) += val;
./131303714/fixed_pagerank.cpp@41@ATOMIC@#pragma omp atomic@g[*neighbors.first].fixed_value += update;
./131303714/pagerank.cpp@39@ATOMIC@#pragma omp atomic@g[*neighbors.first].value += update;
./172961883/main.cpp@124@ATOMIC@#pragma omp atomic@sum += _temp_sum;
./172961883/main.cpp@166@ATOMIC@#pragma omp atomic@sum += _temp_sum;
./576609870/modularity.hxx@75@ATOMIC@#pragma omp atomic@cin[c] += w;
./576609870/modularity.hxx@78@ATOMIC@#pragma omp atomic@ctot[c] += w;
./142054383/5.c@59@ATOMIC@#pragma omp atomic@Sum = Sum + partial_sum;
./142054383/5v1.c@38@ATOMIC@#pragma omp atomic@
./268889840/omp_atomic.cpp@29@ATOMIC@#pragma omp atomic@dot_prod += a[i]*b[i];
./440081601/util.cpp@8@ATOMIC@#pragma omp atomic@a += b;
./79063435/GeneralMatrixMatrix.h@120@ATOMIC@#pragma omp atomic@info[i].users -= 1;
./510426841/main.cpp@57@ATOMIC@#pragma omp atomic@attempts++;
./212375578/10.cpp@14@ATOMIC@#pragma omp atomic@count += 1;
./548297608/task03.cpp@26@ATOMIC@#pragma omp atomic@a -= omp_get_thread_num();
./548297608/task10.cpp@20@ATOMIC@#pragma omp atomic@counter++;
./419120644/test.cpp@55@ATOMIC@#pragma omp atomic@result += tmp;
./269819313/main_threads.cpp@131@ATOMIC@#pragma omp atomic@k++;
./210781113/phasechanges.cxx@214@ATOMIC@#pragma omp atomic@--elemmarkers[e][current_mt];
./210781113/phasechanges.cxx@216@ATOMIC@#pragma omp atomic@++elemmarkers[e][new_mt];
./245904983/Matrix.h@547@ATOMIC@#pragma omp atomic@shared_buff[j] += _matrix[k+i*_cols] * other(k, j);
./245904983/Matrix.h@606@ATOMIC@#pragma omp atomic@res(0, j) += _matrix[j+i*_cols];
./249790277/reorient_facets_raycast.cpp@158@ATOMIC@#pragma omp atomic@C_vote_parity[c].first  += hits_front.size() % 2;
./249790277/reorient_facets_raycast.cpp@160@ATOMIC@#pragma omp atomic@C_vote_parity[c].second += hits_back .size() % 2;
./249790277/reorient_facets_raycast.cpp@166@ATOMIC@#pragma omp atomic@C_vote_infinity[c].first++;
./249790277/reorient_facets_raycast.cpp@169@ATOMIC@#pragma omp atomic@C_vote_distance[c].first += hits_front[0].t;
./249790277/reorient_facets_raycast.cpp@175@ATOMIC@#pragma omp atomic@C_vote_infinity[c].second++;
./249790277/reorient_facets_raycast.cpp@178@ATOMIC@#pragma omp atomic@C_vote_distance[c].second += hits_back[0].t;
./249790277/histc.cpp@23@ATOMIC@#pragma omp atomic@N(B(j))++;
./216350647/Program.cpp@51@ATOMIC@#pragma omp atomic@"result += Integrate(a, a + difference, n, f);
}

#pragma omp section
{
#pragma omp atomic
result += Integrate(a + difference, a + 2 * difference, n, f);
}

#pragma omp section"
./216350647/Program.cpp@57@ATOMIC@#pragma omp atomic@"result += Integrate(a + difference, a + 2 * difference, n, f);
}

#pragma omp section
{
#pragma omp atomic
result += Integrate(a + 2 * difference, a + 3 * difference, n, f);
}

#pragma omp section"
./216350647/Program.cpp@63@ATOMIC@#pragma omp atomic@"result += Integrate(a + 2 * difference, a + 3 * difference, n, f);
}

#pragma omp section
{
#pragma omp atomic
result += Integrate(a + 3 * difference, b, n, f);
}
}
return result;"
./216350647/Program.cpp@69@ATOMIC@#pragma omp atomic@"result += Integrate(a + 3 * difference, b, n, f);
}
}
return result;
}
static void PreSet(int n) {
std::cout << std::setprecision(12);
omp_set_num_threads(n);
omp_set_nested(true);
}"
./209143275/omptest.cpp@40@ATOMIC@#pragma omp atomic@fp_ops+=4;
./209143275/omptest.cpp@53@ATOMIC@#pragma omp atomic@fp_ops+=1;
./209143275/main.cpp@39@ATOMIC@#pragma omp atomic@x[0]+=x[0];
./209143275/main.cpp@58@ATOMIC@#pragma omp atomic@x[0]+=x[0];
./209143275/main.cpp@66@ATOMIC@#pragma omp atomic@x[0]+=-a1_STACKf.top();
./209143275/main.cpp@92@ATOMIC@#pragma omp atomic@x[0]+=x[0];
./81815495/reduction_builder_and_solver.hpp@907@ATOMIC@#pragma omp atomic@b_value += rhs_value;
./81815495/reduction_builder_and_solver.hpp@924@ATOMIC@#pragma omp atomic@b_value += rhs_value;
./81815495/reduction_builder_and_solver.hpp@932@ATOMIC@#pragma omp atomic@b_value += rhs_value;
./81815495/qs_convection_diffusion_explicit_cpp_template.cpp@142@ATOMIC@#pragma omp atomic@r_geometry[i_node].FastGetSolutionStepValue(reaction_variable) += rhs[i_node];
./81815495/qs_convection_diffusion_explicit_cpp_template.cpp@232@ATOMIC@#pragma omp atomic@r_geometry[i_node].GetValue(rVariable) += rhs_oss[i_node];
./81815495/d_convection_diffusion_explicit.cpp@96@ATOMIC@#pragma omp atomic@r_geometry[i_node].FastGetSolutionStepValue(reaction_variable) += rhs[i_node];
./81815495/d_convection_diffusion_explicit.cpp@162@ATOMIC@#pragma omp atomic@r_geometry[i_node].GetValue(rVariable) += rhs_oss[i_node];
./81815495/helmholtz_thickness.h@559@ATOMIC@#pragma omp atomic@rgeom[i_node].FastGetSolutionStepValue(rVariable) += (rWeight * rValues[i_node]);
./81815495/U_Pw_condition.cpp@326@ATOMIC@#pragma omp atomic@"r_external_force[j] += rRHSVector[index + j];
}
}
} else if(rRHSVariable == RESIDUAL_VECTOR && rDestinationVariable == REACTION ) {

for(SizeType i=0; i< TNumNodes; ++i) {
SizeType index = (TDim + 1) * i;
array_1d<double, 3 >& r_force_residual = rGeom[i].FastGetSolutionStepValue(FORCE_RESIDUAL);
double& r_flux_residual = rGeom[i].FastGetSolutionStepValue(FLUX_RESIDUAL);
"
./81815495/U_Pw_condition.cpp@338@ATOMIC@#pragma omp atomic@"r_force_residual[j] += rRHSVector[index + j];
}

#pragma omp atomic
r_flux_residual += rRHSVector[index + TDim];
}
}

KRATOS_CATCH( """" )
}"
./81815495/U_Pw_condition.cpp@342@ATOMIC@#pragma omp atomic@r_flux_residual += rRHSVector[index + TDim];
./81815495/linear_strain_energy_opt_response.h@195@ATOMIC@#pragma omp atomic@r_nodal_variable[0] += gradient_contribution[0];
./81815495/linear_strain_energy_opt_response.h@197@ATOMIC@#pragma omp atomic@r_nodal_variable[1] += gradient_contribution[1];
./81815495/linear_strain_energy_opt_response.h@199@ATOMIC@#pragma omp atomic@r_nodal_variable[2] += gradient_contribution[2];
./81815495/linear_strain_energy_opt_response.h@261@ATOMIC@#pragma omp atomic@r_nodal_variable[0] += gradient_contribution[0];
./81815495/linear_strain_energy_opt_response.h@263@ATOMIC@#pragma omp atomic@r_nodal_variable[1] += gradient_contribution[1];
./81815495/linear_strain_energy_opt_response.h@265@ATOMIC@#pragma omp atomic@r_nodal_variable[2] += gradient_contribution[2];
./81815495/linear_strain_energy_opt_response.h@294@ATOMIC@#pragma omp atomic@r_this_geometry[i_node].FastGetSolutionStepValue(KratosComponents<Variable<double>>::Get(material_gradien_name)) += d_pe_d_fd * inner_prod(d_RHS_d_E,lambda) / number_of_nodes;
./81815495/linear_strain_energy_opt_response.h@322@ATOMIC@#pragma omp atomic@r_this_geometry[i_node].FastGetSolutionStepValue(KratosComponents<Variable<double>>::Get(thickness_gradien_name)) += d_ppt_d_ft * inner_prod(d_RHS_d_T,lambda) / number_of_nodes;
./81815495/compute_nodal_value_process.cpp@142@ATOMIC@#pragma omp atomic@r_gradient[k] += rN * rGaussPointVolume * rGaussPointValue[k];
./81815495/compute_nodal_value_process.cpp@154@ATOMIC@#pragma omp atomic@value += rN * rGaussPointVolume * rGaussPointValue;
./81815495/helmholtz_material.h@546@ATOMIC@#pragma omp atomic@rgeom[i_node].FastGetSolutionStepValue(rVariable) += (rWeight * rValues[i_node]);
./81815495/qs_convection_diffusion_explicit.cpp@142@ATOMIC@#pragma omp atomic@r_geometry[i_node].FastGetSolutionStepValue(reaction_variable) += rhs[i_node];
./81815495/qs_convection_diffusion_explicit.cpp@232@ATOMIC@#pragma omp atomic@r_geometry[i_node].GetValue(rVariable) += rhs_oss[i_node];
./81815495/truss_element.cpp@381@ATOMIC@#pragma omp atomic@r_nodal_mass += element_mass_vector(index);
./81815495/truss_element.cpp@412@ATOMIC@#pragma omp atomic@"r_force_residual[j] += rRHSVector[index + j] - damping_residual_contribution[index + j];
}
}
}
else if (rDestinationVariable == NODAL_INERTIA) {

VectorType mass_vector(nb_dofs);
CalculateLumpedMassVector(mass_vector, rCurrentProcessInfo);

for (IndexType i = 0; i < nb_nodes; ++i) {"
./81815495/truss_element.cpp@427@ATOMIC@#pragma omp atomic@r_nodal_mass += mass_vector[index];
./81815495/truss_element.cpp@431@ATOMIC@#pragma omp atomic@r_nodal_inertia[k] += 0.0;
./81815495/mass_opt_response.h@201@ATOMIC@#pragma omp atomic@r_this_geometry[i_node].FastGetSolutionStepValue(D_MASS_D_FD) += d_pd_d_fd * elem_dens_grad / number_of_nodes;
./81815495/mass_opt_response.h@218@ATOMIC@#pragma omp atomic@r_this_geometry[i_node].FastGetSolutionStepValue(D_MASS_D_FT) += d_pt_d_ft * elem_thick_grad / number_of_nodes;
./81815495/U_Pw_element.cpp@814@ATOMIC@#pragma omp atomic@rGeom[i].GetValue(NODAL_MASS) += lumped_mass_matrix(index,index);
./81815495/U_Pw_element.cpp@852@ATOMIC@#pragma omp atomic@"r_external_force[j] += body_force[index + j];

#pragma omp atomic
r_internal_force[j] += -neg_internal_force[index + j];
}
}
} else if( rRHSVariable == RESIDUAL_VECTOR && rDestinationVariable == DAMPING_FORCE ) {

Vector flux_residual = ZeroVector(element_size);
Vector body_force = ZeroVector(element_size);"
./81815495/U_Pw_element.cpp@855@ATOMIC@#pragma omp atomic@"r_internal_force[j] += -neg_internal_force[index + j];
}
}
} else if( rRHSVariable == RESIDUAL_VECTOR && rDestinationVariable == DAMPING_FORCE ) {

Vector flux_residual = ZeroVector(element_size);
Vector body_force = ZeroVector(element_size);
Vector neg_internal_force = ZeroVector(element_size);
this->CalculateExplicitContributions(flux_residual,body_force,neg_internal_force,rCurrentProcessInfo);
Vector damping_force = ZeroVector(element_size);"
./81815495/U_Pw_element.cpp@877@ATOMIC@#pragma omp atomic@"r_external_force[j] += body_force[index + j];

#pragma omp atomic
r_internal_force[j] += -neg_internal_force[index + j];

#pragma omp atomic
r_damping_force[j] += damping_force[index + j];
}
}
} else if(rRHSVariable == RESIDUAL_VECTOR && rDestinationVariable == REACTION ) {"
./81815495/U_Pw_element.cpp@880@ATOMIC@#pragma omp atomic@"r_internal_force[j] += -neg_internal_force[index + j];

#pragma omp atomic
r_damping_force[j] += damping_force[index + j];
}
}
} else if(rRHSVariable == RESIDUAL_VECTOR && rDestinationVariable == REACTION ) {

Vector flux_residual = ZeroVector(element_size);
Vector body_force = ZeroVector(element_size);"
./81815495/U_Pw_element.cpp@883@ATOMIC@#pragma omp atomic@"r_damping_force[j] += damping_force[index + j];
}
}
} else if(rRHSVariable == RESIDUAL_VECTOR && rDestinationVariable == REACTION ) {

Vector flux_residual = ZeroVector(element_size);
Vector body_force = ZeroVector(element_size);
Vector neg_internal_force = ZeroVector(element_size);
this->CalculateExplicitContributions(flux_residual,body_force,neg_internal_force,rCurrentProcessInfo);
"
./81815495/U_Pw_element.cpp@902@ATOMIC@#pragma omp atomic@"r_force_residual[j] += body_force[index + j] + neg_internal_force[index + j];
}

#pragma omp atomic
r_flux_residual += flux_residual[index + TDim];
}
}

KRATOS_CATCH( """" )
}"
./81815495/U_Pw_element.cpp@906@ATOMIC@#pragma omp atomic@r_flux_residual += flux_residual[index + TDim];
./81815495/mpm_grid_base_load_condition.cpp@266@ATOMIC@#pragma omp atomic@"r_force_residual[j] += rRHS[index + j];
}
}
}
}

KRATOS_CATCH( """" )
}

}"
./81815495/nodal_residualbased_elimination_builder_and_solver_for_FSI.h@821@ATOMIC@#pragma omp atomic@r_a += v_a;
./81815495/remove_alone_DEM_elements_process.cpp@36@ATOMIC@#pragma omp atomic@r_number_of_active_elements++;
./81815495/d_convection_diffusion_explicit_cpp_template.cpp@96@ATOMIC@#pragma omp atomic@r_geometry[i_node].FastGetSolutionStepValue(reaction_variable) += rhs[i_node];
./81815495/d_convection_diffusion_explicit_cpp_template.cpp@162@ATOMIC@#pragma omp atomic@r_geometry[i_node].GetValue(rVariable) += rhs_oss[i_node];
./81815495/distance_modification_process.cpp@463@ATOMIC@#pragma omp atomic@activation_index += 1;
./81815495/base_solid_element.cpp@370@ATOMIC@#pragma omp atomic@r_geom[i].GetValue(NODAL_MASS) += element_mass_vector[index];
./81815495/base_solid_element.cpp@415@ATOMIC@#pragma omp atomic@"r_force_residual[j] += rRHSVector[index + j] - damping_residual_contribution[index + j];
}
}
}

KRATOS_CATCH("""")
}


"
./81815495/atomic_utilities.h@36@ATOMIC@#pragma omp atomic@target += value;
./81815495/atomic_utilities.h@83@ATOMIC@#pragma omp atomic@target -= value;
./81815495/atomic_utilities.h@129@ATOMIC@#pragma omp atomic@target *= value;
./81815495/mapper_vertex_morphing_matrix_free.cpp@76@ATOMIC@#pragma omp atomic@mValuesDestination[0][node_i_mapping_id] += weight*nodal_variable[0];
./81815495/mapper_vertex_morphing_matrix_free.cpp@78@ATOMIC@#pragma omp atomic@mValuesDestination[1][node_i_mapping_id] += weight*nodal_variable[1];
./81815495/mapper_vertex_morphing_matrix_free.cpp@80@ATOMIC@#pragma omp atomic@mValuesDestination[2][node_i_mapping_id] += weight*nodal_variable[2];
./81815495/mapper_vertex_morphing_matrix_free.cpp@139@ATOMIC@#pragma omp atomic@mValuesDestination[0][node_i_mapping_id] += weight*node_j.FastGetSolutionStepValue(rOriginVariable);
./81815495/mapper_vertex_morphing_matrix_free.cpp@198@ATOMIC@#pragma omp atomic@mValuesOrigin[0][neighbor_node_mapping_id] += weight*nodal_variable[0];
./81815495/mapper_vertex_morphing_matrix_free.cpp@200@ATOMIC@#pragma omp atomic@mValuesOrigin[1][neighbor_node_mapping_id] += weight*nodal_variable[1];
./81815495/mapper_vertex_morphing_matrix_free.cpp@202@ATOMIC@#pragma omp atomic@mValuesOrigin[2][neighbor_node_mapping_id] += weight*nodal_variable[2];
./81815495/mapper_vertex_morphing_matrix_free.cpp@264@ATOMIC@#pragma omp atomic@mValuesOrigin[0][neighbor_node_mapping_id] += weight*variable_value;
./81815495/spatial_methods.h@118@ATOMIC@#pragma omp atomic@global_sum += sum;
./81815495/spatial_methods.h@205@ATOMIC@#pragma omp atomic@global_sum += sum;
./81815495/spatial_methods.h@340@ATOMIC@#pragma omp atomic@global_variance += variance;
./81815495/qfluid_3d.cpp@294@ATOMIC@#pragma omp atomic@m0 += nodal_contrib;
./81815495/qfluid_3d.cpp@298@ATOMIC@#pragma omp atomic@m1 += nodal_contrib;
./81815495/qfluid_3d.cpp@302@ATOMIC@#pragma omp atomic@m2 += nodal_contrib;
./81815495/qfluid_3d.cpp@306@ATOMIC@#pragma omp atomic@m3 += nodal_contrib;
./81815495/implicit_vertex_morphing.h@679@ATOMIC@#pragma omp atomic@r_nodal_variable[0] += rWeight * rValues[dofs_per_node*i_node+0];
./81815495/implicit_vertex_morphing.h@681@ATOMIC@#pragma omp atomic@r_nodal_variable[1] += rWeight * rValues[dofs_per_node*i_node+1];
./81815495/implicit_vertex_morphing.h@683@ATOMIC@#pragma omp atomic@r_nodal_variable[2] += rWeight * rValues[dofs_per_node*i_node+2];
./81815495/implicit_vertex_morphing.h@702@ATOMIC@#pragma omp atomic@r_nodal_variable[0] += rWeight * rValues[index++];
./81815495/implicit_vertex_morphing.h@704@ATOMIC@#pragma omp atomic@r_nodal_variable[1] += rWeight * rValues[index++];
./81815495/implicit_vertex_morphing.h@711@ATOMIC@#pragma omp atomic@r_nodal_variable[0] += rWeight * rValues[index++];
./81815495/implicit_vertex_morphing.h@713@ATOMIC@#pragma omp atomic@r_nodal_variable[1] += rWeight * rValues[index++];
./81815495/implicit_vertex_morphing.h@715@ATOMIC@#pragma omp atomic@r_nodal_variable[2] += rWeight * rValues[index++];
./81815495/partition_interface_stress_opt_response.h@81@ATOMIC@#pragma omp atomic@intg_stress += CalculateElementStress(elem_i,CurrentProcessInfo);
./81815495/partition_interface_stress_opt_response.h@119@ATOMIC@#pragma omp atomic@r_this_geometry[i_node].FastGetSolutionStepValue(D_STRESS_D_FD) += d_pd_d_fd * elem_sens / number_of_nodes;
./81815495/GeneralMatrixMatrix.h@122@ATOMIC@#pragma omp atomic@info[i].users -= 1;
./81815495/block_builder_and_solver.hpp@881@ATOMIC@#pragma omp atomic@b_value += rhs_value;
./81815495/block_builder_and_solver.hpp@908@ATOMIC@#pragma omp atomic@r_a += v_a;
./81815495/block_builder_and_solver.hpp@1036@ATOMIC@#pragma omp atomic@r_a +=  v_a;
./81815495/block_builder_and_solver.hpp@1054@ATOMIC@#pragma omp atomic@r +=  v;
./324342122/openmp_multithreaded.cpp@38@ATOMIC@#pragma omp atomic@result *= prod;
./124574336/nvector_openmpdev.c@1117@ATOMIC@#pragma omp atomic@zd_dev[j] += to_add;
./124574336/nvector_openmpdev.c@1145@ATOMIC@#pragma omp atomic@zd_dev[j] += to_add;
./124574336/nvector_openmpdev.c@1174@ATOMIC@#pragma omp atomic@zd_dev[j] += to_add;
./124574336/GeneralMatrixMatrix.h@122@ATOMIC@#pragma omp atomic@info[i].users -= 1;
./330267007/matrix_operations.h@106@ATOMIC@#pragma omp atomic@x[x_idx] -= tmp;
./257701336/GeneralMatrixMatrix.h@121@ATOMIC@#pragma omp atomic@"#endif
info[i].users -= 1;
}
}
else
#endif
{
EIGEN_UNUSED_VARIABLE(info);

std::size_t sizeA = kc*mc;"
./265291887/Matrix.h@536@ATOMIC@#pragma omp atomic@shared_buff[j] += _matrix[k+i*_cols] * other(k, j);
./265291887/Matrix.h@608@ATOMIC@#pragma omp atomic@res(0, j) += _matrix[j+i*_cols];
./472427720/parallel_openmp_Final.hpp@210@ATOMIC@#pragma omp atomic@vec_b[mat_A.mat_elements[nz_idx].row_idx] += temp_val;
./472427720/parallel_openmp_Final.hpp@239@ATOMIC@#pragma omp atomic@vec_b[mat_A.row_and_val[idx_nz].idx] += temp_Val;
./472427720/openmp_coo.cpp@94@ATOMIC@#pragma omp atomic@vec_b[mat_A.mat_elements[nz_idx].row_idx] += temp_val;
./348668930/Code.cpp@28@ATOMIC@#pragma omp atomic@solutions++;
./84927230/summation.cpp@36@ATOMIC@#pragma omp atomic@sum += i;
./73482458/variables.c@12@ATOMIC@#pragma omp atomic@var2++;
./355329433/Tracer.cpp@76@ATOMIC@#pragma omp atomic@T->CommunicationMatrix[F_Requestor][F_Holder].SenseAndPlan.Reads++;
./355329433/Tracer.cpp@79@ATOMIC@#pragma omp atomic@T->CommunicationMatrix[F_Requestor][F_Holder].Delegate.Reads++;
./355329433/Tracer.cpp@82@ATOMIC@#pragma omp atomic@T->CommunicationMatrix[F_Requestor][F_Holder].AssignToFlock.Reads++;
./498758905/omp_counting.h@27@ATOMIC@#pragma omp atomic@++count[input[i] - min];
./3769753/PopBubbles.cpp@307@ATOMIC@#pragma omp atomic@g_count.notSimple++;
./3769753/PopBubbles.cpp@314@ATOMIC@#pragma omp atomic@g_count.notSimple++;
./3769753/PopBubbles.cpp@322@ATOMIC@#pragma omp atomic@g_count.notSimple++;
./3769753/PopBubbles.cpp@327@ATOMIC@#pragma omp atomic@g_count.notSimple++;
./3769753/PopBubbles.cpp@343@ATOMIC@#pragma omp atomic@g_count.tooMany++;
./3769753/PopBubbles.cpp@358@ATOMIC@#pragma omp atomic@g_count.tooLong++;
./3769753/PopBubbles.cpp@374@ATOMIC@#pragma omp atomic@g_count.dissimilar++;
./3769753/PopBubbles.cpp@379@ATOMIC@#pragma omp atomic@g_count.popped++;
./3769753/PopBubbles.cpp@459@ATOMIC@#pragma omp atomic@g_count.bubbles++;
./3769753/PopBubbles.cpp@462@ATOMIC@#pragma omp atomic@g_count.scaffold++;
./3769753/bloom-dbg.h@730@ATOMIC@#pragma omp atomic@counters.solidReads++;
./3769753/bloom-dbg.h@735@ATOMIC@#pragma omp atomic@counters.visitedReads++;
./3769753/bloom-dbg.h@889@ATOMIC@#pragma omp atomic@readsUntilCheckpoint--;
./3769753/nttest.cpp@248@ATOMIC@#pragma omp atomic@"#endif
++fHit;
}
for (size_t i = 1; i < seq.size() - opt::kmerLen + 1; i++) {
if(myFilter.contains(fhVal, rhVal, seq[i-1], seq[i+opt::kmerLen-1])) {
#ifdef _OPENMP
#pragma omp atomic
#endif
++fHit;
}"
./3769753/nttest.cpp@255@ATOMIC@#pragma omp atomic@"#endif
++fHit;
}
}
}

void querySeq(BloomFilter & myFilter, const string & seq, size_t & fHit) {
if (seq.size() < opt::kmerLen) return;
for (size_t i = 0; i < seq.size() - opt::kmerLen + 1; i++) {
if(myFilter.contains(seq.c_str()+i)) {"
./3769753/nttest.cpp@267@ATOMIC@#pragma omp atomic@"#endif
++fHit;
}
}
}

void querySeqm(BloomFilter & myFilter, const string & seq, size_t & fHit) {
if (seq.size() < opt::kmerLen) return;
for (size_t i = 0; i < seq.size() - opt::kmerLen + 1; i++) {
string kmer = seq.substr(i, opt::kmerLen);"
./3769753/nttest.cpp@281@ATOMIC@#pragma omp atomic@"#endif
++fHit;
}
}
}

void querySeqc(BloomFilter & myFilter, const string & seq, size_t & fHit) {
if (seq.size() < opt::kmerLen) return;
for (size_t i = 0; i < seq.size() - opt::kmerLen + 1; i++) {
string kmer = seq.substr(i, opt::kmerLen);"
./3769753/nttest.cpp@295@ATOMIC@#pragma omp atomic@"#endif
++fHit;
}
}
}

void querySeqx(BloomFilter & myFilter, const string & seq, size_t & fHit) {
if (seq.size() < opt::kmerLen) return;
for (size_t i = 0; i < seq.size() - opt::kmerLen + 1; i++) {
string kmer = seq.substr(i, opt::kmerLen);"
./3769753/nttest.cpp@309@ATOMIC@#pragma omp atomic@"#endif
++fHit;
}
}
}

void queryBf(BloomFilter &myFilter, const char* faqFile) {
getFtype(faqFile);
ifstream uFile(faqFile);
size_t fHit=0,totKmer=0;"
./3769753/nttest.cpp@341@ATOMIC@#pragma omp atomic@"#endif
totKmer+=opt::squery-opt::kmerLen+1;
}
}
uFile.close();
cerr << ""tkmer="" << totKmer << "" "";
cerr << ""fhits="" << fHit << "" %"" << setprecision(4) << fixed << (double)fHit/(double)totKmer << "" "";
}

void hashSeqb(const string & seq) {"
./23245147/DfCD_Parallel.cpp@530@ATOMIC@#pragma omp atomic@L_xm[i] += l_m_pi;
./23245147/DfCD_Parallel.cpp@533@ATOMIC@#pragma omp atomic@update_diagonals[pivot_i] -= l_m_pi * l_m_pi;
./23245147/DfCD_Parallel.cpp@679@ATOMIC@#pragma omp atomic@out_L_rows[pivot_i] += l_m_pi;
./23245147/DfCD_Parallel.cpp@682@ATOMIC@#pragma omp atomic@update_diagonals[pivot_i] -= l_m_pi * l_m_pi;
./23245147/DfCD.cpp@1434@ATOMIC@#pragma omp atomic@L_xm[i] += l_m_pi;
./23245147/DfCD.cpp@1436@ATOMIC@#pragma omp atomic@diagonals[pivot_i] -= l_m_pi * l_m_pi;
./23245147/DfCD.cpp@2503@ATOMIC@#pragma omp atomic@++(this->cutoffAlive_schwartz_[shellQuartetType]);
./23245147/DfCD.cpp@2507@ATOMIC@#pragma omp atomic@++(this->cutoffAll_schwartz_[shellQuartetType]);
./23245147/TlMoField.cpp@55@ATOMIC@#pragma omp atomic@gridValue += tmp;
./139720828/GeneralMatrixMatrix.h@120@ATOMIC@#pragma omp atomic@info[i].users -= 1;
./212973439/test-openmp.cpp@21@ATOMIC@#pragma omp atomic@counter++;
./384461901/GeneralMatrixMatrix.h@120@ATOMIC@#pragma omp atomic@info[i].users -= 1;
./266121574/LinearRegression.cpp@31@ATOMIC@#pragma omp atomic@result += intermediate;
./266121574/Regression.h@92@ATOMIC@#pragma omp atomic@output += intermediate;
./266121574/Regression.h@212@ATOMIC@#pragma omp atomic@output += intermediate;
./85618549/KalmanFilter.cpp@88@ATOMIC@#pragma omp atomic@++invalidSamples;
./85618549/ObservationEquation.cpp@18@ATOMIC@#pragma omp atomic@++nop;
./69469951/vectorblocks.cpp@395@ATOMIC@#pragma omp atomic@++progressCounter;
./69469951/vectorblocks.cpp@470@ATOMIC@#pragma omp atomic@++progressCounter;
./69469951/window.cpp@552@ATOMIC@#pragma omp atomic@++currentObject;
./69469951/khistogram.cpp@1269@ATOMIC@#pragma omp atomic@++currentRow;
./244902238/updateLR.cpp@39@ATOMIC@#pragma omp atomic@L[nonZeroUserIndexes[l] * numberOfFeatures + k] += convergenceCoefficient * (2 * delta[l] * StoreR[k * numberOfItems + nonZeroItemIndexes[l]]);
./244902238/updateLR.cpp@41@ATOMIC@#pragma omp atomic@R[k * numberOfItems + nonZeroItemIndexes[l]] += convergenceCoefficient * (2 * delta[l] * StoreL[nonZeroUserIndexes[l] * numberOfFeatures + k]);
./244902238/computeB.cpp@12@ATOMIC@#pragma omp atomic@B[i * numberOfItems + j] += L[i * numberOfFeatures + k] * R[k * numberOfItems + j];
./98416076/som.cpp@187@ATOMIC@#pragma omp atomic@++NBSTABLES;
./82070754/task11.cpp@25@ATOMIC@#pragma omp atomic@n++;
./447856665/omp.h@132@ATOMIC@#pragma omp atomic@res += val;
./447856665/omp.h@147@ATOMIC@#pragma omp atomic@res += val;
./135134258/GeneralMatrixMatrix.h@120@ATOMIC@#pragma omp atomic@info[i].users -= 1;
./144825443/openMP_Points2Tiles.cpp@249@ATOMIC@#pragma omp atomic@nPointCount[nR * nResolution + nC] += 1;
./349078607/paralel_atomic_pi_PI3.cpp@22@ATOMIC@#pragma omp atomic@sum = sum + 4.0/(1.+ x*x);
./349078607/paralel_atomic_pi.cpp@22@ATOMIC@#pragma omp atomic@sum = sum + 4.0/(1.+ x*x);
./349078607/parallel_tab_pi.cpp@28@ATOMIC@#pragma omp atomic@sum += tab[10 * id];
./349078607/parallel_local_pi_PI4.cpp@23@ATOMIC@#pragma omp atomic@suml = suml + 4.0 / (1. + x * x);
./349078607/parallel_local_pi_PI4.cpp@26@ATOMIC@#pragma omp atomic@sum += suml;
./349078607/parallel_tab_exp_pi_PI7.cpp@32@ATOMIC@#pragma omp atomic@sum += tab[data_spacer + id];
./349078607/parallel_local_pi.cpp@23@ATOMIC@#pragma omp atomic@suml = suml + 4.0 / (1. + x * x);
./349078607/parallel_local_pi.cpp@26@ATOMIC@#pragma omp atomic@sum += suml;
./349078607/parallel_tab_pi_PI6.cpp@30@ATOMIC@#pragma omp atomic@sum += tab[data_spacer * id];
./36948145/buddhabrot_omp4.cpp@432@ATOMIC@#pragma omp atomic@iCel++;
./36948145/buddhabrot_omp3float.cpp@434@ATOMIC@#pragma omp atomic@iCel++;
./36948145/buddhabrot_omp1.cpp@445@ATOMIC@#pragma omp atomic@iCel++;
./36948145/buddhabrot_omp3.cpp@434@ATOMIC@#pragma omp atomic@iCel++;
./285634219/kernel_gpu.cpp@66@ATOMIC@#pragma omp atomic@gBest[j] += tempParticle1[j];
./285634219/Vector_functions.hpp@80@ATOMIC@#pragma omp atomic@vec_coefs[idx] += coefs[i];
./285634219/omp-Vector_functions.hpp@78@ATOMIC@#pragma omp atomic@vec_coefs[idx] += coefs[i];
./285634219/omp-SparseMatrix_functions.hpp@129@ATOMIC@#pragma omp atomic@row_coefs[loc-row_indices] += input_coefs[i];
./285634219/omp-SparseMatrix_functions.hpp@433@ATOMIC@#pragma omp atomic@b.coefs[i] -= sum*prescribed_value;
./285634219/cuBool_cpu.h@324@ATOMIC@#pragma omp atomic@distance_update_sum += distance_update;
./285634219/SparseMatrix_functions.hpp@131@ATOMIC@#pragma omp atomic@row_coefs[loc-row_indices] += input_coefs[i];
./285634219/SparseMatrix_functions.hpp@435@ATOMIC@#pragma omp atomic@b.coefs[i] -= sum*prescribed_value;
./410821171/Practice7.cpp@55@ATOMIC@#pragma omp atomic@sum += local_sum;
./438852969/scalar_product.cpp@40@ATOMIC@#pragma omp atomic@scalar_product = scalar_product + prod;
./117122510/atomic.hpp@23@ATOMIC@#pragma omp atomic@out += val;
./117122510/atomic.hpp@32@ATOMIC@#pragma omp atomic@values[0] += real(val);
./117122510/atomic.hpp@34@ATOMIC@#pragma omp atomic@values[1] += imag(val);
./117122510/par_ilut_kernels.cpp@190@ATOMIC@#pragma omp atomic@total_histogram[bucket] += local_histogram[bucket];
./635454936/BFSParallel.cpp@21@ATOMIC@#pragma omp atomic capture@"{
insert = levels[toIdx];
levels[toIdx] = currentLevel + 1;
}
if (insert == -1) {
localNextFrontier.push_back(toIdx);
}
}
}
}"
./635454936/BFSParallel.cpp@33@ATOMIC@#pragma omp atomic capture@"{
localOffset = offset;
offset += localNextFrontier.size();
}
#pragma omp barrier
#pragma omp single
{
frontier.resize(offset);
offset = 0;
currentLevel++;"
./161696083/test_target_teams_distribute_nowait.c@26@ATOMIC@#pragma omp atomic capture@my_ticket = ticket[0]++;
./228656264/atomic-8.C@26@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 1 ^ 2;
}
if (v != 0)
abort ();
#pragma omp atomic capture
{
v = x;
x = x | 4 | 2;"
./228656264/atomic-8.C@33@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 4 | 2;
}
if (v != 3)
abort ();
#pragma omp atomic read
v = x;
if (v != 7)
abort ();"
./228656264/atomic-8.C@44@ATOMIC@#pragma omp atomic capture@"{
x = x ^ 6 & 2;
v = x;
}
if (v != 5)
abort ();
#pragma omp atomic capture
{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();"
./228656264/atomic-8.C@51@ATOMIC@#pragma omp atomic capture@"{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();
#pragma omp atomic capture
{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)"
./228656264/atomic-8.C@55@ATOMIC@#pragma omp atomic capture@"{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)
abort ();
#pragma omp atomic
x = x * -4 / 2;
#pragma omp atomic read"
./228656264/atomic-8.C@76@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] += 6;
v = p[foo (), 0];
}
if (cnt != 4 || v != 6)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] += 6;"
./228656264/atomic-8.C@83@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] += 6;
}
if (cnt != 6 || v != 6)
abort ();
#pragma omp atomic read
v = x;
if (v != 12)
abort ();"
./228656264/atomic-8.C@94@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] = p[foo (), 0] + 6;
v = p[foo (), 0];
}
if (cnt != 9 || v != 18)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;"
./228656264/atomic-8.C@101@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;
}
if (cnt != 12 || v != 18)
abort ();
#pragma omp atomic read
v = x;
if (v != 24)
abort ();"
./228656264/atomic-8.C@112@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]++; }
#pragma omp atomic capture
{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture"
./228656264/atomic-8.C@114@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture"
./228656264/atomic-8.C@116@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture"
./228656264/atomic-8.C@118@ATOMIC@#pragma omp atomic capture@"{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture"
./228656264/atomic-8.C@122@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;"
./228656264/atomic-8.C@124@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./228656264/atomic-8.C@126@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./228656264/atomic-8.C@128@ATOMIC@#pragma omp atomic capture@"{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./228656264/atomic-11.C@25@ATOMIC@#pragma omp atomic capture@v = x++;
./228656264/atomic-11.C@33@ATOMIC@#pragma omp atomic capture@v = ++x;
./228656264/atomic-11.C@41@ATOMIC@#pragma omp atomic capture@"{ v = x; x *= 3; }
if (v != 20)
abort ();
#pragma omp atomic read
v = x;
if (v != 60)
abort ();
#pragma omp atomic capture
{
x |= 2;"
./228656264/atomic-11.C@49@ATOMIC@#pragma omp atomic capture@"{
x |= 2;
v = x;
}
if (v != 62)
abort ();
#pragma omp atomic read
v = x;
if (v != 62)
abort ();"
./228656264/atomic-11.C@60@ATOMIC@#pragma omp atomic capture@"{ v = x; x++; }
if (v != 62)
abort ();
#pragma omp atomic capture
{ v = x; ++x; }
if (v != 63)
abort ();
#pragma omp atomic capture
{
++x;"
./228656264/atomic-11.C@64@ATOMIC@#pragma omp atomic capture@"{ v = x; ++x; }
if (v != 63)
abort ();
#pragma omp atomic capture
{
++x;
v = x;
}
if (v != 65)
abort ();"
./228656264/atomic-11.C@68@ATOMIC@#pragma omp atomic capture@"{
++x;
v = x;
}
if (v != 65)
abort ();
#pragma omp atomic capture
{x++;v=x;}if (v != 66)
abort ();
#pragma omp atomic read"
./228656264/atomic-11.C@75@ATOMIC@#pragma omp atomic capture@"{x++;v=x;}if (v != 66)
abort ();
#pragma omp atomic read
v = x;
if (v != 66)
abort ();
#pragma omp atomic capture
{ v = x; x--; }
if (v != 66)
abort ();"
./228656264/atomic-11.C@82@ATOMIC@#pragma omp atomic capture@"{ v = x; x--; }
if (v != 66)
abort ();
#pragma omp atomic capture
{ v = x; --x; }
if (v != 65)
abort ();
#pragma omp atomic capture
{
--x;"
./228656264/atomic-11.C@86@ATOMIC@#pragma omp atomic capture@"{ v = x; --x; }
if (v != 65)
abort ();
#pragma omp atomic capture
{
--x;
v = x;
}
if (v != 63)
abort ();"
./228656264/atomic-11.C@90@ATOMIC@#pragma omp atomic capture@"{
--x;
v = x;
}
if (v != 63)
abort ();
#pragma omp atomic capture
{ x--; v = x; } if (v != 62)
abort ();
#pragma omp atomic read"
./228656264/atomic-11.C@97@ATOMIC@#pragma omp atomic capture@"{ x--; v = x; } if (v != 62)
abort ();
#pragma omp atomic read
v = x;
if (v != 62)
abort ();
#pragma omp atomic write
y = 17.5f;
#pragma omp atomic read
f = y;"
./228656264/atomic-11.C@116@ATOMIC@#pragma omp atomic capture@f = y *= 2.0f;
./228656264/atomic-11.C@120@ATOMIC@#pragma omp atomic capture@f = y++;
./228656264/atomic-11.C@128@ATOMIC@#pragma omp atomic capture@f = --y;
./228656264/atomic-11.C@136@ATOMIC@#pragma omp atomic capture@"{ f = y; y /= 2.0f; }
if (f != 70.0)
abort ();
#pragma omp atomic read
f = y;
if (f != 35.0)
abort ();
#pragma omp atomic capture
{ y /= 2.0f; f = y; }
if (f != 17.5)"
./228656264/atomic-11.C@144@ATOMIC@#pragma omp atomic capture@"{ y /= 2.0f; f = y; }
if (f != 17.5)
abort ();
#pragma omp atomic read
f = y;
if (f != 17.5)
abort ();
return 0;
}"
./228656264/taskloop-4.c@38@ATOMIC@#pragma omp atomic capture@k = v++;
./228656264/taskloop-4.c@55@ATOMIC@#pragma omp atomic capture@k = v++;
./228656264/atomic-14.C@26@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 1 ^ 2;
}
if (v != 0)
abort ();
#pragma omp atomic capture
{
v = x;
x = x | 4 | 2;"
./228656264/atomic-14.C@33@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 4 | 2;
}
if (v != 3)
abort ();
#pragma omp atomic read
v = x;
if (v != 7)
abort ();"
./228656264/atomic-14.C@44@ATOMIC@#pragma omp atomic capture@"{
x = x ^ 6 & 2;
v = x;
}
if (v != 5)
abort ();
#pragma omp atomic capture
{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();"
./228656264/atomic-14.C@51@ATOMIC@#pragma omp atomic capture@"{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();
#pragma omp atomic capture
{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)"
./228656264/atomic-14.C@55@ATOMIC@#pragma omp atomic capture@"{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)
abort ();
#pragma omp atomic
x = x * (-4 / 2);
#pragma omp atomic read"
./228656264/atomic-14.C@76@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] += 6;
v = p[foo (), 0];
}
if (cnt != 4 || v != 6)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] += 6;"
./228656264/atomic-14.C@83@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] += 6;
}
if (cnt != 6 || v != 6)
abort ();
#pragma omp atomic read
v = x;
if (v != 12)
abort ();"
./228656264/atomic-14.C@94@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] = p[foo (), 0] + 6;
v = p[foo (), 0];
}
if (cnt != 9 || v != 18)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;"
./228656264/atomic-14.C@101@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;
}
if (cnt != 12 || v != 18)
abort ();
#pragma omp atomic read
v = x;
if (v != 24)
abort ();"
./228656264/atomic-14.C@112@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]++; }
#pragma omp atomic capture
{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture"
./228656264/atomic-14.C@114@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture"
./228656264/atomic-14.C@116@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture"
./228656264/atomic-14.C@118@ATOMIC@#pragma omp atomic capture@"{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture"
./228656264/atomic-14.C@122@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;"
./228656264/atomic-14.C@124@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./228656264/atomic-14.C@126@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./228656264/atomic-14.C@128@ATOMIC@#pragma omp atomic capture@"{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./228656264/atomic-13.C@17@ATOMIC@#pragma omp atomic capture@i = l += 4;
./228656264/atomic-13.C@19@ATOMIC@#pragma omp atomic capture@m = j += 4;
./228656264/atomic-13.C@23@ATOMIC@#pragma omp atomic capture@"{
i = l;
l += 4;
}
#pragma omp atomic capture
{
m = j;
j += 4;
}
if (i != 88 || m != 99)"
./228656264/atomic-13.C@28@ATOMIC@#pragma omp atomic capture@"{
m = j;
j += 4;
}
if (i != 88 || m != 99)
abort ();
#pragma omp atomic capture
{
l += 4;
i = l;"
./228656264/atomic-13.C@35@ATOMIC@#pragma omp atomic capture@"{
l += 4;
i = l;
}
#pragma omp atomic capture
{
j += 4;
m = j;
}
if (i != 96 || m != 107)"
./228656264/atomic-13.C@40@ATOMIC@#pragma omp atomic capture@"{
j += 4;
m = j;
}
if (i != 96 || m != 107)
abort ();
}
int
main ()
{"
./228656264/thread-limit-2.c@43@ATOMIC@#pragma omp atomic capture@v = ++cnt;
./228656264/atomic-9.C@28@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 1 ^ 2;
}
if (v != 0)
abort ();
#pragma omp atomic capture
{
v = x;
x = x | 4 | 2;"
./228656264/atomic-9.C@35@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 4 | 2;
}
if (v != 3)
abort ();
#pragma omp atomic read
v = x;
if (v != 7)
abort ();"
./228656264/atomic-9.C@46@ATOMIC@#pragma omp atomic capture@"{
x = x ^ 6 & 2;
v = x;
}
if (v != 5)
abort ();
#pragma omp atomic capture
{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();"
./228656264/atomic-9.C@53@ATOMIC@#pragma omp atomic capture@"{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();
#pragma omp atomic capture
{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)"
./228656264/atomic-9.C@57@ATOMIC@#pragma omp atomic capture@"{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)
abort ();
#pragma omp atomic
x = x * -4 / 2;
#pragma omp atomic read"
./228656264/atomic-9.C@78@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] += 6;
v = p[foo (), 0];
}
if (cnt != 4 || v != 6)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] += 6;"
./228656264/atomic-9.C@85@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] += 6;
}
if (cnt != 6 || v != 6)
abort ();
#pragma omp atomic read
v = x;
if (v != 12)
abort ();"
./228656264/atomic-9.C@96@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] = p[foo (), 0] + 6;
v = p[foo (), 0];
}
if (cnt != 9 || v != 18)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;"
./228656264/atomic-9.C@103@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;
}
if (cnt != 12 || v != 18)
abort ();
#pragma omp atomic read
v = x;
if (v != 24)
abort ();"
./228656264/atomic-9.C@114@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]++; }
#pragma omp atomic capture
{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture"
./228656264/atomic-9.C@116@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture"
./228656264/atomic-9.C@118@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture"
./228656264/atomic-9.C@120@ATOMIC@#pragma omp atomic capture@"{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture"
./228656264/atomic-9.C@124@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
}"
./228656264/atomic-9.C@126@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
}
int x = 6;
int"
./228656264/atomic-9.C@128@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
}
int x = 6;
int
main ()
{"
./228656264/atomic-9.C@130@ATOMIC@#pragma omp atomic capture@"{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
}
int x = 6;
int
main ()
{
bar <int> ();
return 0;"
./228656264/atomic-7.C@18@ATOMIC@#pragma omp atomic capture@i = l += 4;
./228656264/atomic-7.C@20@ATOMIC@#pragma omp atomic capture@m = j += 4;
./228656264/atomic-7.C@24@ATOMIC@#pragma omp atomic capture@"{
i = l;
l += 4;
}
#pragma omp atomic capture
{
m = j;
j += 4;
}
if (i != 88 || m != 99)"
./228656264/atomic-7.C@29@ATOMIC@#pragma omp atomic capture@"{
m = j;
j += 4;
}
if (i != 88 || m != 99)
abort ();
#pragma omp atomic capture
{
l += 4;
i = l;"
./228656264/atomic-7.C@36@ATOMIC@#pragma omp atomic capture@"{
l += 4;
i = l;
}
#pragma omp atomic capture
{
j += 4;
m = j;
}
if (i != 96 || m != 107)"
./228656264/atomic-7.C@41@ATOMIC@#pragma omp atomic capture@"{
j += 4;
m = j;
}
if (i != 96 || m != 107)
abort ();
}
long long l, m;
int i, j;
int"
./228656264/thread-limit-1.c@29@ATOMIC@#pragma omp atomic capture@v = ++cnt;
./228656264/pr64824.c@7@ATOMIC@#pragma omp atomic capture@a = b = c << b;
./228656264/atomic-16.c@19@ATOMIC@#pragma omp atomic capture@v = p[foo () + foo (), 0] = p[foo () + foo (), 0] + 3;
./228656264/atomic-16.c@23@ATOMIC@#pragma omp atomic capture@v = p[foo (), 0] = 12 * 1 / 2 + (foo (), 0) + p[foo (), 0];
./228656264/atomic-16.c@27@ATOMIC@#pragma omp atomic capture@"{
v = p[foo () & 0]; p[foo () & 0] = (foo (), 1) * 9 - p[foo () & 0];
}
if (cnt != 13 || v != 25)
abort ();
#pragma omp atomic read
v = x;
if (v != -16)
abort ();
#pragma omp atomic capture"
./228656264/atomic-16.c@37@ATOMIC@#pragma omp atomic capture@"{
p[0 & foo ()] = 16 - 2 + 3 + p[0 & foo ()]; v = p[0 & foo ()];
}
if (cnt != 16 || v != 1)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0]; p[foo (), 0] = (foo (), 7) ? 13 : foo () + 6;
}
if (cnt != 19 || v != 1)"
./228656264/atomic-16.c@43@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0]; p[foo (), 0] = (foo (), 7) ? 13 : foo () + 6;
}
if (cnt != 19 || v != 1)
abort ();
#pragma omp atomic read
v = x;
if (v != 13)
abort ();
return 0;"
./228656264/atomic-12.C@6@ATOMIC@#pragma omp atomic capture@v = ++x1;
./228656264/atomic-12.C@10@ATOMIC@#pragma omp atomic capture@v = x2++;
./228656264/atomic-12.C@14@ATOMIC@#pragma omp atomic capture@v = --x3;
./228656264/atomic-12.C@18@ATOMIC@#pragma omp atomic capture@v = x4--;
./228656264/atomic-12.C@22@ATOMIC@#pragma omp atomic capture@"{ v = x5; x5 |= 1; }
if (v)
abort ();
#pragma omp atomic capture
{ x6 |= 1; v = x6; }
if (!v)
abort ();
}
void
bar (void)"
./228656264/atomic-12.C@26@ATOMIC@#pragma omp atomic capture@"{ x6 |= 1; v = x6; }
if (!v)
abort ();
}
void
bar (void)
{
#pragma omp atomic write
x1 = 0;
#pragma omp atomic write"
./228656264/atomic-12.C@42@ATOMIC@#pragma omp atomic capture@"{ ++x1; v = x1; }
if (!v)
abort ();
#pragma omp atomic capture
{ v = x2; x2++; }
if (v)
abort ();
#pragma omp atomic capture
{ --x3; v = x3; }
if (v)"
./228656264/atomic-12.C@46@ATOMIC@#pragma omp atomic capture@"{ v = x2; x2++; }
if (v)
abort ();
#pragma omp atomic capture
{ --x3; v = x3; }
if (v)
abort ();
#pragma omp atomic capture
{ v = x4; x4--; }
if (!v)"
./228656264/atomic-12.C@50@ATOMIC@#pragma omp atomic capture@"{ --x3; v = x3; }
if (v)
abort ();
#pragma omp atomic capture
{ v = x4; x4--; }
if (!v)
abort ();
#pragma omp atomic write
x1 = 0;
#pragma omp atomic write"
./228656264/atomic-12.C@54@ATOMIC@#pragma omp atomic capture@"{ v = x4; x4--; }
if (!v)
abort ();
#pragma omp atomic write
x1 = 0;
#pragma omp atomic write
x2 = 0;
#pragma omp atomic write
x3 = 1;
#pragma omp atomic write"
./228656264/atomic-12.C@66@ATOMIC@#pragma omp atomic capture@"{ x1++; v = x1; }
if (!v)
abort ();
#pragma omp atomic capture
{ v = x2; ++x2; }
if (v)
abort ();
#pragma omp atomic capture
{ x3--; v = x3; }
if (v)"
./228656264/atomic-12.C@70@ATOMIC@#pragma omp atomic capture@"{ v = x2; ++x2; }
if (v)
abort ();
#pragma omp atomic capture
{ x3--; v = x3; }
if (v)
abort ();
#pragma omp atomic capture
{ v = x4; --x4; }
if (!v)"
./228656264/atomic-12.C@74@ATOMIC@#pragma omp atomic capture@"{ x3--; v = x3; }
if (v)
abort ();
#pragma omp atomic capture
{ v = x4; --x4; }
if (!v)
abort ();
}
int
main ()"
./228656264/atomic-12.C@78@ATOMIC@#pragma omp atomic capture@"{ v = x4; --x4; }
if (!v)
abort ();
}
int
main ()
{
#pragma omp atomic write
x3 = 1;
#pragma omp atomic write"
./228656264/atomic-18.c@7@ATOMIC@#pragma omp atomic capture@a = b = c << b;
./228656264/atomic-18.c@18@ATOMIC@#pragma omp atomic capture@a = b = c + b;
./228656264/atomic-18.c@29@ATOMIC@#pragma omp atomic capture@a = b = c + b;
./228656264/atomic-18.c@40@ATOMIC@#pragma omp atomic capture@a = b = c << b;
./228656264/atomic-15.C@19@ATOMIC@#pragma omp atomic capture@v = x = x | 16;
./228656264/atomic-15.C@23@ATOMIC@#pragma omp atomic capture@v = x = x + 14 * 2 / 4;
./228656264/atomic-15.C@27@ATOMIC@#pragma omp atomic capture@v = x = 5 | x;
./228656264/atomic-15.C@31@ATOMIC@#pragma omp atomic capture@v = x = 40 + 12 - 2 - 7 - x;
./228656264/atomic-15.C@39@ATOMIC@#pragma omp atomic capture@"{ v = x; x = 3 + x; }
if (v != 6)
abort ();
#pragma omp atomic capture
{ v = x; x = -1 * -1 * -1 * -1 - x; }
if (v != 9)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)"
./228656264/atomic-15.C@43@ATOMIC@#pragma omp atomic capture@"{ v = x; x = -1 * -1 * -1 * -1 - x; }
if (v != 9)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)
abort ();
#pragma omp atomic capture
{ x = 2 * 2 - x; v = x; }
if (v != 12)"
./228656264/atomic-15.C@51@ATOMIC@#pragma omp atomic capture@"{ x = 2 * 2 - x; v = x; }
if (v != 12)
abort ();
#pragma omp atomic capture
{ x = 7 & x; v = x; }
if (v != 4)
abort ();
#pragma omp atomic capture
{ v = x; x = 6; }
if (v != 4)"
./228656264/atomic-15.C@55@ATOMIC@#pragma omp atomic capture@"{ x = 7 & x; v = x; }
if (v != 4)
abort ();
#pragma omp atomic capture
{ v = x; x = 6; }
if (v != 4)
abort ();
#pragma omp atomic read
v = x;
if (v != 6)"
./228656264/atomic-15.C@59@ATOMIC@#pragma omp atomic capture@"{ v = x; x = 6; }
if (v != 4)
abort ();
#pragma omp atomic read
v = x;
if (v != 6)
abort ();
#pragma omp atomic capture
{ v = x; x = 7 * 8 + 23; }
if (v != 6)"
./228656264/atomic-15.C@67@ATOMIC@#pragma omp atomic capture@"{ v = x; x = 7 * 8 + 23; }
if (v != 6)
abort ();
#pragma omp atomic read
v = x;
if (v != 79)
abort ();
#pragma omp atomic capture
{ v = x; x = 23 + 6 * 4; }
if (v != 79)"
./228656264/atomic-15.C@75@ATOMIC@#pragma omp atomic capture@"{ v = x; x = 23 + 6 * 4; }
if (v != 79)
abort ();
#pragma omp atomic read
v = x;
if (v != 47)
abort ();
#pragma omp atomic capture
{ v = x; x = l ? 17 : 12; }
if (v != 47)"
./228656264/atomic-15.C@83@ATOMIC@#pragma omp atomic capture@"{ v = x; x = l ? 17 : 12; }
if (v != 47)
abort ();
#pragma omp atomic capture
{ v = x; x = l = s++ + 3; }
if (v != 17 || l != 4 || s != 2)
abort ();
#pragma omp atomic read
v = x;
if (v != 4)"
./228656264/atomic-15.C@87@ATOMIC@#pragma omp atomic capture@"{ v = x; x = l = s++ + 3; }
if (v != 17 || l != 4 || s != 2)
abort ();
#pragma omp atomic read
v = x;
if (v != 4)
abort ();
return 0;
}"
./315333330/atomic-11.C@25@ATOMIC@#pragma omp atomic capture@v = x++;
./315333330/atomic-11.C@33@ATOMIC@#pragma omp atomic capture@v = ++x;
./315333330/atomic-11.C@41@ATOMIC@#pragma omp atomic capture@"{ v = x; x *= 3; }
if (v != 20)
abort ();
#pragma omp atomic read
v = x;
if (v != 60)
abort ();
#pragma omp atomic capture
{
x |= 2;"
./315333330/atomic-11.C@49@ATOMIC@#pragma omp atomic capture@"{
x |= 2;
v = x;
}
if (v != 62)
abort ();
#pragma omp atomic read
v = x;
if (v != 62)
abort ();"
./315333330/atomic-11.C@60@ATOMIC@#pragma omp atomic capture@"{ v = x; x++; }
if (v != 62)
abort ();
#pragma omp atomic capture
{ v = x; ++x; }
if (v != 63)
abort ();
#pragma omp atomic capture
{
++x;"
./315333330/atomic-11.C@64@ATOMIC@#pragma omp atomic capture@"{ v = x; ++x; }
if (v != 63)
abort ();
#pragma omp atomic capture
{
++x;
v = x;
}
if (v != 65)
abort ();"
./315333330/atomic-11.C@68@ATOMIC@#pragma omp atomic capture@"{
++x;
v = x;
}
if (v != 65)
abort ();
#pragma omp atomic capture
{x++;v=x;}if (v != 66)
abort ();
#pragma omp atomic read"
./315333330/atomic-11.C@75@ATOMIC@#pragma omp atomic capture@"{x++;v=x;}if (v != 66)
abort ();
#pragma omp atomic read
v = x;
if (v != 66)
abort ();
#pragma omp atomic capture
{ v = x; x--; }
if (v != 66)
abort ();"
./315333330/atomic-11.C@82@ATOMIC@#pragma omp atomic capture@"{ v = x; x--; }
if (v != 66)
abort ();
#pragma omp atomic capture
{ v = x; --x; }
if (v != 65)
abort ();
#pragma omp atomic capture
{
--x;"
./315333330/atomic-11.C@86@ATOMIC@#pragma omp atomic capture@"{ v = x; --x; }
if (v != 65)
abort ();
#pragma omp atomic capture
{
--x;
v = x;
}
if (v != 63)
abort ();"
./315333330/atomic-11.C@90@ATOMIC@#pragma omp atomic capture@"{
--x;
v = x;
}
if (v != 63)
abort ();
#pragma omp atomic capture
{ x--; v = x; } if (v != 62)
abort ();
#pragma omp atomic read"
./315333330/atomic-11.C@97@ATOMIC@#pragma omp atomic capture@"{ x--; v = x; } if (v != 62)
abort ();
#pragma omp atomic read
v = x;
if (v != 62)
abort ();
#pragma omp atomic write
y = 17.5f;
#pragma omp atomic read
f = y;"
./315333330/atomic-11.C@116@ATOMIC@#pragma omp atomic capture@f = y *= 2.0f;
./315333330/atomic-11.C@120@ATOMIC@#pragma omp atomic capture@f = y++;
./315333330/atomic-11.C@128@ATOMIC@#pragma omp atomic capture@f = --y;
./315333330/atomic-11.C@136@ATOMIC@#pragma omp atomic capture@"{ f = y; y /= 2.0f; }
if (f != 70.0)
abort ();
#pragma omp atomic read
f = y;
if (f != 35.0)
abort ();
#pragma omp atomic capture
{ y /= 2.0f; f = y; }
if (f != 17.5)"
./315333330/atomic-11.C@144@ATOMIC@#pragma omp atomic capture@"{ y /= 2.0f; f = y; }
if (f != 17.5)
abort ();
#pragma omp atomic read
f = y;
if (f != 17.5)
abort ();
return 0;
}"
./315333330/taskloop-4.c@38@ATOMIC@#pragma omp atomic capture@k = v++;
./315333330/taskloop-4.c@55@ATOMIC@#pragma omp atomic capture@k = v++;
./315333330/_Atomic-3.c@41@ATOMIC@#pragma omp atomic capture@i = x *= 2;
./315333330/_Atomic-3.c@49@ATOMIC@#pragma omp atomic capture@i = p[2] *= 2;
./315333330/atomic-14.c@26@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 1 ^ 2;
}
if (v != 0)
abort ();
#pragma omp atomic capture
{
v = x;
x = x | 4 | 2;"
./315333330/atomic-14.c@33@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 4 | 2;
}
if (v != 3)
abort ();
#pragma omp atomic read
v = x;
if (v != 7)
abort ();"
./315333330/atomic-14.c@44@ATOMIC@#pragma omp atomic capture@"{
x = x ^ 6 & 2;
v = x;
}
if (v != 5)
abort ();
#pragma omp atomic capture
{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();"
./315333330/atomic-14.c@51@ATOMIC@#pragma omp atomic capture@"{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();
#pragma omp atomic capture
{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)"
./315333330/atomic-14.c@55@ATOMIC@#pragma omp atomic capture@"{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)
abort ();
#pragma omp atomic
x = x * (-4 / 2);
#pragma omp atomic read"
./315333330/atomic-14.c@76@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] += 6;
v = p[foo (), 0];
}
if (cnt != 4 || v != 6)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] += 6;"
./315333330/atomic-14.c@83@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] += 6;
}
if (cnt != 6 || v != 6)
abort ();
#pragma omp atomic read
v = x;
if (v != 12)
abort ();"
./315333330/atomic-14.c@94@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] = p[foo (), 0] + 6;
v = p[foo (), 0];
}
if (cnt != 9 || v != 18)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;"
./315333330/atomic-14.c@101@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;
}
if (cnt != 12 || v != 18)
abort ();
#pragma omp atomic read
v = x;
if (v != 24)
abort ();"
./315333330/atomic-14.c@112@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]++; }
#pragma omp atomic capture
{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture"
./315333330/atomic-14.c@114@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture"
./315333330/atomic-14.c@116@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture"
./315333330/atomic-14.c@118@ATOMIC@#pragma omp atomic capture@"{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture"
./315333330/atomic-14.c@122@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;"
./315333330/atomic-14.c@124@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./315333330/atomic-14.c@126@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./315333330/atomic-14.c@128@ATOMIC@#pragma omp atomic capture@"{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./315333330/thread-limit-2.c@43@ATOMIC@#pragma omp atomic capture@v = ++cnt;
./315333330/atomic-23.c@15@ATOMIC@#pragma omp atomic capture@"{
r = s.a;
s.a = 0;
}
return r;
}
int
f3 (void)
{
int r;"
./315333330/atomic-23.c@26@ATOMIC@#pragma omp atomic capture@"{
r = s.a;
s.a = s.a + 32;
}
return r;
}
int
f4 (void)
{
int r;"
./315333330/atomic-23.c@37@ATOMIC@#pragma omp atomic capture@r = s.a = s.a + 32;
./315333330/_Atomic-1.c@87@ATOMIC@#pragma omp atomic capture@b = j += c;
./315333330/_Atomic-1.c@89@ATOMIC@#pragma omp atomic capture@b = ++j;
./315333330/_Atomic-1.c@91@ATOMIC@#pragma omp atomic capture@"{ b = j; j = c; }
#pragma omp atomic capture
{ b = j; j++; }
#pragma omp atomic capture
{ j *= c; b = j; }
}"
./315333330/_Atomic-1.c@93@ATOMIC@#pragma omp atomic capture@"{ b = j; j++; }
#pragma omp atomic capture
{ j *= c; b = j; }
}"
./315333330/_Atomic-1.c@95@ATOMIC@#pragma omp atomic capture@"{ j *= c; b = j; }
}"
./315333330/pr69389.c@26@ATOMIC@#pragma omp atomic capture@v = s.b += 8;
./315333330/pr69389.c@34@ATOMIC@#pragma omp atomic capture@"{
v = s.b;
s.b -= 4;
}
return v;
}
void
f6 (void)
{
#pragma omp atomic"
./315333330/pr69389.c@57@ATOMIC@#pragma omp atomic capture@v = s.b = 8 + s.b;
./315333330/pr69389.c@65@ATOMIC@#pragma omp atomic capture@"{
v = s.b;
s.b = s.b - 4;
}
return v;
}
int
main ()
{
if (f1 () != 11)"
./315333330/atomic-13.c@17@ATOMIC@#pragma omp atomic capture@i = l += 4;
./315333330/atomic-13.c@19@ATOMIC@#pragma omp atomic capture@m = j += 4;
./315333330/atomic-13.c@23@ATOMIC@#pragma omp atomic capture@"{
i = l;
l += 4;
}
#pragma omp atomic capture
{
m = j;
j += 4;
}
if (i != 88 || m != 99)"
./315333330/atomic-13.c@28@ATOMIC@#pragma omp atomic capture@"{
m = j;
j += 4;
}
if (i != 88 || m != 99)
abort ();
#pragma omp atomic capture
{
l += 4;
i = l;"
./315333330/atomic-13.c@35@ATOMIC@#pragma omp atomic capture@"{
l += 4;
i = l;
}
#pragma omp atomic capture
{
j += 4;
m = j;
}
if (i != 96 || m != 107)"
./315333330/atomic-13.c@40@ATOMIC@#pragma omp atomic capture@"{
j += 4;
m = j;
}
if (i != 96 || m != 107)
abort ();
}
int
main ()
{"
./315333330/thread-limit-1.c@29@ATOMIC@#pragma omp atomic capture@v = ++cnt;
./315333330/pr64824.c@7@ATOMIC@#pragma omp atomic capture@a = b = c << b;
./315333330/pr67495.c@5@ATOMIC@#pragma omp atomic capture@a = (float)a + b;
./315333330/pr67495.c@13@ATOMIC@#pragma omp atomic capture@(float) a = b += c;
./315333330/pr67495.c@15@ATOMIC@#pragma omp atomic capture@"{ a += b; (float) c = a; }
#pragma omp atomic capture
{ a += b; c = (float) a; }
#pragma omp atomic capture
a = (int)a + b;
#pragma omp atomic read
(int) a = b;
#pragma omp atomic write
(int) a = b;
#pragma omp atomic read"
./315333330/pr67495.c@17@ATOMIC@#pragma omp atomic capture@"{ a += b; c = (float) a; }
#pragma omp atomic capture
a = (int)a + b;
#pragma omp atomic read
(int) a = b;
#pragma omp atomic write
(int) a = b;
#pragma omp atomic read
a = (int) b;
#pragma omp atomic capture"
./315333330/pr67495.c@19@ATOMIC@#pragma omp atomic capture@a = (int)a + b;
./315333330/pr67495.c@27@ATOMIC@#pragma omp atomic capture@(int) a = b += c;
./315333330/pr67495.c@29@ATOMIC@#pragma omp atomic capture@"{ a += b; (int) c = a; }
#pragma omp atomic capture
{ a += b; c = (int) a; }
}"
./315333330/pr67495.c@31@ATOMIC@#pragma omp atomic capture@"{ a += b; c = (int) a; }
}"
./315333330/atomic-15.c@19@ATOMIC@#pragma omp atomic capture@v = x = x | 16;
./315333330/atomic-15.c@23@ATOMIC@#pragma omp atomic capture@v = x = x + 14 * 2 / 4;
./315333330/atomic-15.c@27@ATOMIC@#pragma omp atomic capture@v = x = 5 | x;
./315333330/atomic-15.c@31@ATOMIC@#pragma omp atomic capture@v = x = 40 + 12 - 2 - 7 - x;
./315333330/atomic-15.c@39@ATOMIC@#pragma omp atomic capture@"{ v = x; x = 3 + x; }
if (v != 6)
abort ();
#pragma omp atomic capture
{ v = x; x = -1 * -1 * -1 * -1 - x; }
if (v != 9)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)"
./315333330/atomic-15.c@43@ATOMIC@#pragma omp atomic capture@"{ v = x; x = -1 * -1 * -1 * -1 - x; }
if (v != 9)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)
abort ();
#pragma omp atomic capture
{ x = 2 * 2 - x; v = x; }
if (v != 12)"
./315333330/atomic-15.c@51@ATOMIC@#pragma omp atomic capture@"{ x = 2 * 2 - x; v = x; }
if (v != 12)
abort ();
#pragma omp atomic capture
{ x = 7 & x; v = x; }
if (v != 4)
abort ();
#pragma omp atomic capture
{ v = x; x = 6; }
if (v != 4)"
./315333330/atomic-15.c@55@ATOMIC@#pragma omp atomic capture@"{ x = 7 & x; v = x; }
if (v != 4)
abort ();
#pragma omp atomic capture
{ v = x; x = 6; }
if (v != 4)
abort ();
#pragma omp atomic read
v = x;
if (v != 6)"
./315333330/atomic-15.c@59@ATOMIC@#pragma omp atomic capture@"{ v = x; x = 6; }
if (v != 4)
abort ();
#pragma omp atomic read
v = x;
if (v != 6)
abort ();
#pragma omp atomic capture
{ v = x; x = 7 * 8 + 23; }
if (v != 6)"
./315333330/atomic-15.c@67@ATOMIC@#pragma omp atomic capture@"{ v = x; x = 7 * 8 + 23; }
if (v != 6)
abort ();
#pragma omp atomic read
v = x;
if (v != 79)
abort ();
#pragma omp atomic capture
{ v = x; x = 23 + 6 * 4; }
if (v != 79)"
./315333330/atomic-15.c@75@ATOMIC@#pragma omp atomic capture@"{ v = x; x = 23 + 6 * 4; }
if (v != 79)
abort ();
#pragma omp atomic read
v = x;
if (v != 47)
abort ();
#pragma omp atomic capture
{ v = x; x = l ? 17 : 12; }
if (v != 47)"
./315333330/atomic-15.c@83@ATOMIC@#pragma omp atomic capture@"{ v = x; x = l ? 17 : 12; }
if (v != 47)
abort ();
#pragma omp atomic capture
{ v = x; x = l = s++ + 3; }
if (v != 17 || l != 4 || s != 2)
abort ();
#pragma omp atomic read
v = x;
if (v != 4)"
./315333330/atomic-15.c@87@ATOMIC@#pragma omp atomic capture@"{ v = x; x = l = s++ + 3; }
if (v != 17 || l != 4 || s != 2)
abort ();
#pragma omp atomic read
v = x;
if (v != 4)
abort ();
return 0;
}"
./315333330/atomic-16.c@19@ATOMIC@#pragma omp atomic capture@v = p[foo () + foo (), 0] = p[foo () + foo (), 0] + 3;
./315333330/atomic-16.c@23@ATOMIC@#pragma omp atomic capture@v = p[foo (), 0] = 12 * 1 / 2 + (foo (), 0) + p[foo (), 0];
./315333330/atomic-16.c@27@ATOMIC@#pragma omp atomic capture@"{
v = p[foo () & 0]; p[foo () & 0] = (foo (), 1) * 9 - p[foo () & 0];
}
if (cnt != 13 || v != 25)
abort ();
#pragma omp atomic read
v = x;
if (v != -16)
abort ();
#pragma omp atomic capture"
./315333330/atomic-16.c@37@ATOMIC@#pragma omp atomic capture@"{
p[0 & foo ()] = 16 - 2 + 3 + p[0 & foo ()]; v = p[0 & foo ()];
}
if (cnt != 16 || v != 1)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0]; p[foo (), 0] = (foo (), 7) ? 13 : foo () + 6;
}
if (cnt != 19 || v != 1)"
./315333330/atomic-16.c@43@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0]; p[foo (), 0] = (foo (), 7) ? 13 : foo () + 6;
}
if (cnt != 19 || v != 1)
abort ();
#pragma omp atomic read
v = x;
if (v != 13)
abort ();
return 0;"
./315333330/atomic-12.c@6@ATOMIC@#pragma omp atomic capture@v = ++x1;
./315333330/atomic-12.c@10@ATOMIC@#pragma omp atomic capture@v = x2++;
./315333330/atomic-12.c@14@ATOMIC@#pragma omp atomic capture@v = --x3;
./315333330/atomic-12.c@18@ATOMIC@#pragma omp atomic capture@v = x4--;
./315333330/atomic-12.c@22@ATOMIC@#pragma omp atomic capture@"{ v = x5; x5 |= 1; }
if (v)
abort ();
#pragma omp atomic capture
{ x6 |= 1; v = x6; }
if (!v)
abort ();
}
void
bar (void)"
./315333330/atomic-12.c@26@ATOMIC@#pragma omp atomic capture@"{ x6 |= 1; v = x6; }
if (!v)
abort ();
}
void
bar (void)
{
#pragma omp atomic write
x1 = 0;
#pragma omp atomic write"
./315333330/atomic-12.c@42@ATOMIC@#pragma omp atomic capture@"{ ++x1; v = x1; }
if (!v)
abort ();
#pragma omp atomic capture
{ v = x2; x2++; }
if (v)
abort ();
#pragma omp atomic capture
{ --x3; v = x3; }
if (v)"
./315333330/atomic-12.c@46@ATOMIC@#pragma omp atomic capture@"{ v = x2; x2++; }
if (v)
abort ();
#pragma omp atomic capture
{ --x3; v = x3; }
if (v)
abort ();
#pragma omp atomic capture
{ v = x4; x4--; }
if (!v)"
./315333330/atomic-12.c@50@ATOMIC@#pragma omp atomic capture@"{ --x3; v = x3; }
if (v)
abort ();
#pragma omp atomic capture
{ v = x4; x4--; }
if (!v)
abort ();
#pragma omp atomic write
x1 = 0;
#pragma omp atomic write"
./315333330/atomic-12.c@54@ATOMIC@#pragma omp atomic capture@"{ v = x4; x4--; }
if (!v)
abort ();
#pragma omp atomic write
x1 = 0;
#pragma omp atomic write
x2 = 0;
#pragma omp atomic write
x3 = 1;
#pragma omp atomic write"
./315333330/atomic-12.c@66@ATOMIC@#pragma omp atomic capture@"{ x1++; v = x1; }
if (!v)
abort ();
#pragma omp atomic capture
{ v = x2; ++x2; }
if (v)
abort ();
#pragma omp atomic capture
{ x3--; v = x3; }
if (v)"
./315333330/atomic-12.c@70@ATOMIC@#pragma omp atomic capture@"{ v = x2; ++x2; }
if (v)
abort ();
#pragma omp atomic capture
{ x3--; v = x3; }
if (v)
abort ();
#pragma omp atomic capture
{ v = x4; --x4; }
if (!v)"
./315333330/atomic-12.c@74@ATOMIC@#pragma omp atomic capture@"{ x3--; v = x3; }
if (v)
abort ();
#pragma omp atomic capture
{ v = x4; --x4; }
if (!v)
abort ();
}
int
main ()"
./315333330/atomic-12.c@78@ATOMIC@#pragma omp atomic capture@"{ v = x4; --x4; }
if (!v)
abort ();
}
int
main ()
{
#pragma omp atomic write
x3 = 1;
#pragma omp atomic write"
./315333330/atomic-7.c@18@ATOMIC@#pragma omp atomic capture@i = l += 4;
./315333330/atomic-7.c@20@ATOMIC@#pragma omp atomic capture@m = j += 4;
./315333330/atomic-7.c@24@ATOMIC@#pragma omp atomic capture@"{
i = l;
l += 4;
}
#pragma omp atomic capture
{
m = j;
j += 4;
}
if (i != 88 || m != 99)"
./315333330/atomic-7.c@29@ATOMIC@#pragma omp atomic capture@"{
m = j;
j += 4;
}
if (i != 88 || m != 99)
abort ();
#pragma omp atomic capture
{
l += 4;
i = l;"
./315333330/atomic-7.c@36@ATOMIC@#pragma omp atomic capture@"{
l += 4;
i = l;
}
#pragma omp atomic capture
{
j += 4;
m = j;
}
if (i != 96 || m != 107)"
./315333330/atomic-7.c@41@ATOMIC@#pragma omp atomic capture@"{
j += 4;
m = j;
}
if (i != 96 || m != 107)
abort ();
}
long long l, m;
int i, j;
int"
./315333330/atomic-18.c@7@ATOMIC@#pragma omp atomic capture@a = b = c << b;
./315333330/atomic-18.c@18@ATOMIC@#pragma omp atomic capture@a = b = c + b;
./315333330/atomic-18.c@29@ATOMIC@#pragma omp atomic capture@a = b = c + b;
./315333330/atomic-18.c@40@ATOMIC@#pragma omp atomic capture@a = b = c << b;
./315333330/atomic-9.c@28@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 1 ^ 2;
}
if (v != 0)
abort ();
#pragma omp atomic capture
{
v = x;
x = x | 4 | 2;"
./315333330/atomic-9.c@35@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 4 | 2;
}
if (v != 3)
abort ();
#pragma omp atomic read
v = x;
if (v != 7)
abort ();"
./315333330/atomic-9.c@46@ATOMIC@#pragma omp atomic capture@"{
x = x ^ 6 & 2;
v = x;
}
if (v != 5)
abort ();
#pragma omp atomic capture
{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();"
./315333330/atomic-9.c@53@ATOMIC@#pragma omp atomic capture@"{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();
#pragma omp atomic capture
{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)"
./315333330/atomic-9.c@57@ATOMIC@#pragma omp atomic capture@"{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)
abort ();
#pragma omp atomic
x = x * -4 / 2;
#pragma omp atomic read"
./315333330/atomic-9.c@78@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] += 6;
v = p[foo (), 0];
}
if (cnt != 4 || v != 6)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] += 6;"
./315333330/atomic-9.c@85@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] += 6;
}
if (cnt != 6 || v != 6)
abort ();
#pragma omp atomic read
v = x;
if (v != 12)
abort ();"
./315333330/atomic-9.c@96@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] = p[foo (), 0] + 6;
v = p[foo (), 0];
}
if (cnt != 9 || v != 18)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;"
./315333330/atomic-9.c@103@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;
}
if (cnt != 12 || v != 18)
abort ();
#pragma omp atomic read
v = x;
if (v != 24)
abort ();"
./315333330/atomic-9.c@114@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]++; }
#pragma omp atomic capture
{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture"
./315333330/atomic-9.c@116@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture"
./315333330/atomic-9.c@118@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture"
./315333330/atomic-9.c@120@ATOMIC@#pragma omp atomic capture@"{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture"
./315333330/atomic-9.c@124@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
}"
./315333330/atomic-9.c@126@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
}
int x = 6;
int"
./315333330/atomic-9.c@128@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
}
int x = 6;
int
main ()
{"
./315333330/atomic-9.c@130@ATOMIC@#pragma omp atomic capture@"{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
}
int x = 6;
int
main ()
{
bar <int> ();
return 0;"
./315333330/atomic-8.c@26@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 1 ^ 2;
}
if (v != 0)
abort ();
#pragma omp atomic capture
{
v = x;
x = x | 4 | 2;"
./315333330/atomic-8.c@33@ATOMIC@#pragma omp atomic capture@"{
v = x;
x = x | 4 | 2;
}
if (v != 3)
abort ();
#pragma omp atomic read
v = x;
if (v != 7)
abort ();"
./315333330/atomic-8.c@44@ATOMIC@#pragma omp atomic capture@"{
x = x ^ 6 & 2;
v = x;
}
if (v != 5)
abort ();
#pragma omp atomic capture
{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();"
./315333330/atomic-8.c@51@ATOMIC@#pragma omp atomic capture@"{ x = x - (6 + 4); v = x; }
if (v != -5)
abort ();
#pragma omp atomic capture
{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)"
./315333330/atomic-8.c@55@ATOMIC@#pragma omp atomic capture@"{ v = x; x = x - (1 | 2); }
if (v != -5)
abort ();
#pragma omp atomic read
v = x;
if (v != -8)
abort ();
#pragma omp atomic
x = x * -4 / 2;
#pragma omp atomic read"
./315333330/atomic-8.c@76@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] += 6;
v = p[foo (), 0];
}
if (cnt != 4 || v != 6)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] += 6;"
./315333330/atomic-8.c@83@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] += 6;
}
if (cnt != 6 || v != 6)
abort ();
#pragma omp atomic read
v = x;
if (v != 12)
abort ();"
./315333330/atomic-8.c@94@ATOMIC@#pragma omp atomic capture@"{
p[foo (), 0] = p[foo (), 0] + 6;
v = p[foo (), 0];
}
if (cnt != 9 || v != 18)
abort ();
#pragma omp atomic capture
{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;"
./315333330/atomic-8.c@101@ATOMIC@#pragma omp atomic capture@"{
v = p[foo (), 0];
p[foo (), 0] = p[foo (), 0] + 6;
}
if (cnt != 12 || v != 18)
abort ();
#pragma omp atomic read
v = x;
if (v != 24)
abort ();"
./315333330/atomic-8.c@112@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]++; }
#pragma omp atomic capture
{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture"
./315333330/atomic-8.c@114@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; ++p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture"
./315333330/atomic-8.c@116@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]++; v = p[foo (), 0]; }
#pragma omp atomic capture
{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture"
./315333330/atomic-8.c@118@ATOMIC@#pragma omp atomic capture@"{ ++p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 20 || v != 28)
abort ();
#pragma omp atomic capture
{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture"
./315333330/atomic-8.c@122@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; p[foo (), 0]--; }
#pragma omp atomic capture
{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;"
./315333330/atomic-8.c@124@ATOMIC@#pragma omp atomic capture@"{ v = p[foo (), 0]; --p[foo (), 0]; }
#pragma omp atomic capture
{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./315333330/atomic-8.c@126@ATOMIC@#pragma omp atomic capture@"{ p[foo (), 0]--; v = p[foo (), 0]; }
#pragma omp atomic capture
{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./315333330/atomic-8.c@128@ATOMIC@#pragma omp atomic capture@"{ --p[foo (), 0]; v = p[foo (), 0]; }
if (cnt != 28 || v != 24)
abort ();
return 0;
}"
./408823577/05_dag.c@71@ATOMIC@#pragma omp atomic capture@u_ancestors = ++nodes[idx].u_ancestors;
./408823577/10_lab_exercise.v2.my.c@48@ATOMIC@#pragma omp atomic capture@"{ mystart = next_bunch; next_bunch += bunch; }
if( mystart < ndata ) {
mystop = mystart + bunch;
mystop = (mystop > ndata ? ndata : mystop);
#if defined(DETAILS)
printf(""\tthread %d processing [%d:%d]\n"",
me, mystart, mystop);
#endif
for( ; mystart < mystop; mystart++ )
heavy_work( mystart ); }"
./298775055/MeshGenerator.cpp@161@ATOMIC@#pragma omp atomic capture@indexOffset = _counter++;
./298775055/MeshGenerator.cpp@196@ATOMIC@#pragma omp atomic capture@indexOffset = _counter++;
./298775055/MeshGenerator.cpp@231@ATOMIC@#pragma omp atomic capture@indexOffset = _counter++;
./218161285/CT_OMP_TARGET_IMPL.c@22@ATOMIC@#pragma omp atomic capture@"{
ret = ARRAY[IDX[i]];
ARRAY[IDX[i]] += 1;
}
}
}
}
}

void STRIDE1_ADD( uint64_t *restrict ARRAY,"
./218161285/CT_OMP_TARGET_IMPL.c@46@ATOMIC@#pragma omp atomic capture@"{
ret = ARRAY[i];
ARRAY[i] += 1;
}
}
}
}
}

void STRIDEN_ADD( uint64_t *restrict ARRAY,"
./218161285/CT_OMP_TARGET_IMPL.c@71@ATOMIC@#pragma omp atomic capture@"{
ret = ARRAY[i];
ARRAY[i] += 1;
}
}
}
}
}

"
./218161285/CT_OMP_TARGET_IMPL.c@96@ATOMIC@#pragma omp atomic capture@"{
start = IDX[start];
IDX[start] += zero;
}
}
}
}

void SG_ADD( uint64_t *restrict ARRAY,
uint64_t *restrict IDX,"
./218161285/CT_OMP_TARGET_IMPL.c@126@ATOMIC@#pragma omp atomic capture@"{
src = IDX[i];
IDX[i] += zero;
}

#pragma omp atomic capture
{
dest = IDX[i+1];
IDX[i+1] += zero;
}"
./218161285/CT_OMP_TARGET_IMPL.c@132@ATOMIC@#pragma omp atomic capture@"{
dest = IDX[i+1];
IDX[i+1] += zero;
}

#pragma omp atomic capture
{
val = ARRAY[src];
ARRAY[src] += 1;
}"
./218161285/CT_OMP_TARGET_IMPL.c@138@ATOMIC@#pragma omp atomic capture@"{
val = ARRAY[src];
ARRAY[src] += 1;
}

#pragma omp atomic capture
{
ret = ARRAY[dest];
ARRAY[dest] += val;
}"
./218161285/CT_OMP_TARGET_IMPL.c@144@ATOMIC@#pragma omp atomic capture@"{
ret = ARRAY[dest];
ARRAY[dest] += val;
}
}
}
}
}

void CENTRAL_ADD( uint64_t *restrict ARRAY,"
./218161285/CT_OMP_TARGET_IMPL.c@167@ATOMIC@#pragma omp atomic capture@"{
ret = ARRAY[0];
ARRAY[0] += 1;
}
}
}
}
}

void SCATTER_ADD( uint64_t *restrict ARRAY,"
./218161285/CT_OMP_TARGET_IMPL.c@197@ATOMIC@#pragma omp atomic capture@"{
dest = IDX[i+1];
IDX[i+1] += zero;
}

#pragma omp atomic capture
{
val = ARRAY[i];
ARRAY[i] += 1;
}"
./218161285/CT_OMP_TARGET_IMPL.c@203@ATOMIC@#pragma omp atomic capture@"{
val = ARRAY[i];
ARRAY[i] += 1;
}

#pragma omp atomic capture
{
ret = ARRAY[dest];
ARRAY[dest] += val;
}"
./218161285/CT_OMP_TARGET_IMPL.c@209@ATOMIC@#pragma omp atomic capture@"{
ret = ARRAY[dest];
ARRAY[dest] += val;
}
}
}
}
}

void GATHER_ADD( uint64_t *restrict ARRAY,"
./218161285/CT_OMP_TARGET_IMPL.c@239@ATOMIC@#pragma omp atomic capture@"{
dest = IDX[i+1];
IDX[i+1] += zero;
}

#pragma omp atomic capture
{
val = ARRAY[dest];
ARRAY[dest] += 1;
}"
./218161285/CT_OMP_TARGET_IMPL.c@245@ATOMIC@#pragma omp atomic capture@"{
val = ARRAY[dest];
ARRAY[dest] += 1;
}

#pragma omp atomic capture
{
ret = ARRAY[i];
ARRAY[i] += val;
}"
./218161285/CT_OMP_TARGET_IMPL.c@251@ATOMIC@#pragma omp atomic capture@"{
ret = ARRAY[i];
ARRAY[i] += val;
}
}
}
}
}

"
./399664768/graph.hpp@362@ATOMIC@#pragma omp atomic capture@idx = seq++;
./399664768/graph.hpp@368@ATOMIC@#pragma omp atomic capture@idx = seq++;
./399664768/graph.hpp@440@ATOMIC@#pragma omp atomic capture@idx = seq++;
./399664768/graph.hpp@446@ATOMIC@#pragma omp atomic capture@idx = seq++;
./202712923/atomic_detail.h@75@ATOMIC@#pragma omp atomic capture@#else
./202712923/atomic_detail.h@92@ATOMIC@#pragma omp atomic capture@#else
./202712923/atomic_detail.h@109@ATOMIC@#pragma omp atomic capture@#else
./202712923/atomic_detail.h@126@ATOMIC@#pragma omp atomic capture@#else
./202712923/atomic_detail.h@143@ATOMIC@#pragma omp atomic capture@#else
./58775556/Omega_h_atomics.hpp@21@ATOMIC@#pragma omp atomic capture@"{
oldval = *dest;
*dest += val;
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
return oldval;
#elif defined(OMEGA_H_USE_CUDA) && defined(__CUDA_ARCH__)
return atomicAdd(dest, val);"
./67013333/common.h@24@ATOMIC@#pragma omp atomic capture@"{old = *ptr; *ptr += val;}
return old;
#endif
#else
T old; old = *ptr; *ptr += val;
return old;
#endif
}

template <class T>"
./67013333/common.h@42@ATOMIC@#pragma omp atomic capture@"{old = *ptr; *ptr -= val;}
return old;
#endif
#else
T old; old = *ptr; *ptr -= val;
return old;
#endif
}
;
"
./401825407/db_construction.cpp@182@ATOMIC@#pragma omp atomic capture@i = k++;
./401825407/rna_interaction_search.cpp@137@ATOMIC@#pragma omp atomic capture@i = k++;
./285634219/kernel.cpp@25@ATOMIC@#pragma omp atomic capture@*next = (*consumed)++;
./285634219/kernel.cpp@49@ATOMIC@#pragma omp atomic capture@*next = (*consumed)++;
./285634219/model_eval.cpp@57@ATOMIC@#pragma omp atomic capture@index = g_out_id[0]++;
./285634219/kernel_bucketcount.h@35@ATOMIC@#pragma omp atomic capture@offset = s_offset[warpBase+idx]++;
./285634219/linearprobing.cpp@38@ATOMIC@#pragma omp atomic capture@"{
prev = pHashTable[slot].key;
pHashTable[slot].key = (prev == kEmpty) ? key : prev;
}
if (prev == kEmpty || prev == key)
{
pHashTable[slot].value = value;
break;
}
"
./285634219/linearprobing.cpp@111@ATOMIC@#pragma omp atomic capture@"{ size = kvs_size; kvs_size++; }
device_kvs[size] = pHashTable[tid];
}
}
}

auto end = std::chrono::steady_clock::now();
auto time = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count();
printf(""Kernel execution time (iterate): %f (s)\n"", time * 1e-9f);
"
./285634219/gqsort_kernel.h@75@ATOMIC@#pragma omp atomic capture@"{
lbeg = *psstart;
*psstart += ltsum;
}

#pragma omp atomic capture
{
gbeg = *psend;
*psend -= gtsum;
}"
./285634219/gqsort_kernel.h@81@ATOMIC@#pragma omp atomic capture@"{
gbeg = *psend;
*psend -= gtsum;
}
gbeg -= gtsum;

}
#pragma omp barrier

lfrom = lbeg + lt[localid];"
./285634219/gqsort_kernel.h@106@ATOMIC@#pragma omp atomic capture@"{
old_blockcount = *pblockcount;
(*pblockcount)--;
}

if (old_blockcount == 0) {
uint sstart = *psstart;
uint send = *psend;
uint oldstart = *poldstart;
uint oldend = *poldend;"
./228656264/atomic-17.c@75@ATOMIC@#pragma omp atomic capture , seq_cst@"{ v = x; x = 23 + 6 * 4; }
if (v != 79)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != 47)
abort ();
#pragma omp atomic seq_cst capture
{ v = x; x = l ? 17 : 12; }
if (v != 47)"
./315333330/atomic-17.C@75@ATOMIC@#pragma omp atomic capture , seq_cst@"{ v = x; x = 23 + 6 * 4; }
if (v != 79)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != 47)
abort ();
#pragma omp atomic seq_cst capture
{ v = x; x = l ? 17 : 12; }
if (v != 47)"
./228656264/atomic-17.c@23@ATOMIC@#pragma omp atomic capture seq_cst@v = x = x + 14 * 2 / 4;
./228656264/atomic-17.c@39@ATOMIC@#pragma omp atomic capture seq_cst@"{ v = x; x = 3 + x; }
if (v != 6)
abort ();
#pragma omp atomic seq_cst capture
{ v = x; x = -1 * -1 * -1 * -1 - x; }
if (v != 9)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != -8)"
./228656264/atomic-17.c@59@ATOMIC@#pragma omp atomic capture seq_cst@"{ v = x; x = 6; }
if (v != 4)
abort ();
#pragma omp atomic read, seq_cst
v = x;
if (v != 6)
abort ();
#pragma omp atomic capture seq_cst
{ v = x; x = 7 * 8 + 23; }
if (v != 6)"
./228656264/atomic-17.c@67@ATOMIC@#pragma omp atomic capture seq_cst@"{ v = x; x = 7 * 8 + 23; }
if (v != 6)
abort ();
#pragma omp atomic seq_cst, read
v = x;
if (v != 79)
abort ();
#pragma omp atomic capture , seq_cst
{ v = x; x = 23 + 6 * 4; }
if (v != 79)"
./228656264/atomic-17.c@87@ATOMIC@#pragma omp atomic capture seq_cst@"{ v = x; x = l = s++ + 3; }
if (v != 17 || l != 4 || s != 2)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != 4)
abort ();
return 0;
}"
./228656264/priority.c@17@ATOMIC@#pragma omp atomic capture seq_cst@t = tsknum++;
./315333330/atomic-17.C@23@ATOMIC@#pragma omp atomic capture seq_cst@v = x = x + 14 * 2 / 4;
./315333330/atomic-17.C@39@ATOMIC@#pragma omp atomic capture seq_cst@"{ v = x; x = 3 + x; }
if (v != 6)
abort ();
#pragma omp atomic seq_cst capture
{ v = x; x = -1 * -1 * -1 * -1 - x; }
if (v != 9)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != -8)"
./315333330/atomic-17.C@59@ATOMIC@#pragma omp atomic capture seq_cst@"{ v = x; x = 6; }
if (v != 4)
abort ();
#pragma omp atomic read, seq_cst
v = x;
if (v != 6)
abort ();
#pragma omp atomic capture seq_cst
{ v = x; x = 7 * 8 + 23; }
if (v != 6)"
./315333330/atomic-17.C@67@ATOMIC@#pragma omp atomic capture seq_cst@"{ v = x; x = 7 * 8 + 23; }
if (v != 6)
abort ();
#pragma omp atomic seq_cst, read
v = x;
if (v != 79)
abort ();
#pragma omp atomic capture , seq_cst
{ v = x; x = 23 + 6 * 4; }
if (v != 79)"
./315333330/atomic-17.C@87@ATOMIC@#pragma omp atomic capture seq_cst@"{ v = x; x = l = s++ + 3; }
if (v != 17 || l != 4 || s != 2)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != 4)
abort ();
return 0;
}"
./315333330/priority.c@17@ATOMIC@#pragma omp atomic capture seq_cst@t = tsknum++;
./228656264/atomic-17.c@31@ATOMIC@#pragma omp atomic capture, seq_cst@v = x = 40 + 12 - 2 - 7 - x;
./228656264/atomic-17.c@51@ATOMIC@#pragma omp atomic capture, seq_cst@"{ x = 2 * 2 - x; v = x; }
if (v != 12)
abort ();
#pragma omp atomic seq_cst capture
{ x = 7 & x; v = x; }
if (v != 4)
abort ();
#pragma omp atomic capture seq_cst
{ v = x; x = 6; }
if (v != 4)"
./315333330/atomic-17.C@31@ATOMIC@#pragma omp atomic capture, seq_cst@v = x = 40 + 12 - 2 - 7 - x;
./315333330/atomic-17.C@51@ATOMIC@#pragma omp atomic capture, seq_cst@"{ x = 2 * 2 - x; v = x; }
if (v != 12)
abort ();
#pragma omp atomic seq_cst capture
{ x = 7 & x; v = x; }
if (v != 4)
abort ();
#pragma omp atomic capture seq_cst
{ v = x; x = 6; }
if (v != 4)"
./161696083/test_atomic_compare.c@22@ATOMIC@#pragma omp atomic compare@"if(arr[i] > pmax){
pmax = arr[i];
}
}
OMPVV_TEST_AND_SET(errors, pmax != max);
return errors;
}
int main() {
int errors = 0;
OMPVV_TEST_AND_SET_VERBOSE(errors, test_atomic_compare());"
./161696083/test_atomic_compare_device.c@22@ATOMIC@#pragma omp atomic compare@"if(arr[i] > pmax){
pmax = arr[i];
}
}
OMPVV_TEST_AND_SET(errors, pmax != max);
return errors;
}
int main() {
int errors = 0;
OMPVV_TEST_AND_SET_VERBOSE(errors, test_atomic_compare());"
./161696083/test_atomic_fail_seq_cst.c@21@ATOMIC@#pragma omp atomic compare acquire fail(seq_cst)@"if(y == 1){
y = 5;
}
}
OMPVV_TEST_AND_SET(errors, x != 10);
OMPVV_TEST_AND_SET(errors, y != 5);
}
}
return errors;
}"
./161696083/test_atomic_fail_relaxed.c@21@ATOMIC@#pragma omp atomic compare fail(relaxed)@"if(y == 1){
y = 5;
}
}
OMPVV_TEST_AND_SET(errors, x != 10);
OMPVV_TEST_AND_SET(errors, y != 5);
}
}
return errors;
}"
./161696083/test_atomic_fail_acquire.c@21@ATOMIC@#pragma omp atomic compare seq_cst fail(acquire)@"if(y == 1){
y = 5;
}
}
OMPVV_TEST_AND_SET(errors, x != 10);
OMPVV_TEST_AND_SET(errors, y != 5);
}
}
return errors;
}"
./161696083/test_atomic_num_hint_device.c@32@ATOMIC@#pragma omp atomic hint(0X1024)@x++;
./161696083/test_atomic_num_hint.c@31@ATOMIC@#pragma omp atomic hint(0X1024)@x++;
./161696083/test_atomic_num_hint_device.c@15@ATOMIC@#pragma omp atomic hint(0X4)@x++;
./161696083/test_atomic_num_hint.c@15@ATOMIC@#pragma omp atomic hint(0X4)@x++;
./161696083/test_atomic_hint.c@31@ATOMIC@#pragma omp atomic hint(omp_sync_hint_contended+omp_sync_hint_nonspeculative)@x++;
./161696083/test_atomic_hint.c@50@ATOMIC@#pragma omp atomic hint(omp_sync_hint_speculative)@a[1] += 1;
./161696083/test_atomic_hint.c@53@ATOMIC@#pragma omp atomic hint(omp_sync_hint_speculative)@a[i] += i;
./161696083/test_atomic_hint.c@15@ATOMIC@#pragma omp atomic hint(omp_sync_hint_uncontended)@x++;
./161696083/test_flush_seq_cst.c@24@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_flush_seq_cst.c@48@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_target_requires_atomic_default_mem_order_acq_rel.c@22@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_requires_atomic_default_mem_order_seq_cst.c@23@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_requires_atomic_default_mem_order_relaxed.c@24@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_target_requires_atomic_default_mem_order_relaxed.c@23@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_flush_no_memory_order_clause.c@19@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_requires_atomic_default_mem_order_acq_rel.c@23@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_masked_filter.c@14@ATOMIC@#pragma omp atomic read@tot = total;
./161696083/test_target_requires_atomic_default_mem_order_seq_cst.c@22@ATOMIC@#pragma omp atomic read@tmp = y;
./161696083/test_masked.c@14@ATOMIC@#pragma omp atomic read@tot = total;
./285965062/incrementalAggregation.c@173@ATOMIC@#pragma omp atomic read@atomv.atomicPair = stats->atom[n].atomicPair;
./228656264/atomic-8.C@20@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-8.C@40@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-8.C@59@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-8.C@65@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-8.C@72@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-8.C@90@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-8.C@108@ATOMIC@#pragma omp atomic read@v = x;
./228656264/member-7.C@71@ATOMIC@#pragma omp atomic read@tv = T<Q>::t;
./228656264/member-7.C@73@ATOMIC@#pragma omp atomic read@bv = A::b;
./228656264/atomic-11.C@9@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@15@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@21@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@29@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@37@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@45@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@56@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@78@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@100@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-11.C@106@ATOMIC@#pragma omp atomic read@f = y;
./228656264/atomic-11.C@112@ATOMIC@#pragma omp atomic read@f = y;
./228656264/atomic-11.C@124@ATOMIC@#pragma omp atomic read@f = y;
./228656264/atomic-11.C@132@ATOMIC@#pragma omp atomic read@f = y;
./228656264/atomic-11.C@140@ATOMIC@#pragma omp atomic read@f = y;
./228656264/atomic-11.C@148@ATOMIC@#pragma omp atomic read@f = y;
./228656264/atomic-14.C@20@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-14.C@40@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-14.C@59@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-14.C@65@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-14.C@72@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-14.C@90@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-14.C@108@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-13.C@7@ATOMIC@#pragma omp atomic read@i = l;
./228656264/atomic-13.C@9@ATOMIC@#pragma omp atomic read@m = j;
./228656264/ordered-4.c@14@ATOMIC@#pragma omp atomic read@t = j[i];
./228656264/ordered-4.c@20@ATOMIC@#pragma omp atomic read@t = j[i - 1];
./228656264/ordered-4.c@27@ATOMIC@#pragma omp atomic read@t = j[i + 1];
./228656264/ordered-4.c@54@ATOMIC@#pragma omp atomic read@t = j[i];
./228656264/ordered-4.c@60@ATOMIC@#pragma omp atomic read@t = j[i - 1];
./228656264/ordered-4.c@67@ATOMIC@#pragma omp atomic read@t = j[i + 1];
./228656264/doacross-1.C@19@ATOMIC@#pragma omp atomic read@l = a[i - 1];
./228656264/doacross-1.C@28@ATOMIC@#pragma omp atomic read@l = a[i + 1];
./228656264/doacross-1.C@49@ATOMIC@#pragma omp atomic read@l = b[i][j - 2][k - 1];
./228656264/doacross-1.C@58@ATOMIC@#pragma omp atomic read@l = b[i - 2][j - 2][k + 1];
./228656264/doacross-1.C@65@ATOMIC@#pragma omp atomic read@l = b[i - 3][j + 2][k - 2];
./228656264/doacross-1.C@97@ATOMIC@#pragma omp atomic read@l = c[i][j][k + 2];
./228656264/doacross-1.C@106@ATOMIC@#pragma omp atomic read@l = c[i - 2][j + 1][k - 4];
./228656264/doacross-1.C@113@ATOMIC@#pragma omp atomic read@l = c[i - 1][j - 2][k - 2];
./228656264/atomic-9.C@22@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-9.C@42@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-9.C@61@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-9.C@67@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-9.C@74@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-9.C@92@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-9.C@110@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-7.C@8@ATOMIC@#pragma omp atomic read@i = l;
./228656264/atomic-7.C@10@ATOMIC@#pragma omp atomic read@m = j;
./228656264/task-8.C@36@ATOMIC@#pragma omp atomic read@e = errval;
./228656264/doacross-3.c@21@ATOMIC@#pragma omp atomic read@l = a[i - 1];
./228656264/doacross-3.c@30@ATOMIC@#pragma omp atomic read@l = a[i + 1];
./228656264/doacross-3.c@51@ATOMIC@#pragma omp atomic read@l = b[i][j - 2][k - 1];
./228656264/doacross-3.c@60@ATOMIC@#pragma omp atomic read@l = b[i - 2][j - 2][k + 1];
./228656264/doacross-3.c@67@ATOMIC@#pragma omp atomic read@l = b[i - 3][j + 2][k - 2];
./228656264/doacross-3.c@99@ATOMIC@#pragma omp atomic read@l = c[i][j][k + 2];
./228656264/doacross-3.c@108@ATOMIC@#pragma omp atomic read@l = c[i - 2][j + 1][k - 4];
./228656264/doacross-3.c@115@ATOMIC@#pragma omp atomic read@l = c[i - 1][j - 2][k - 2];
./228656264/doacross-3.c@136@ATOMIC@#pragma omp atomic read@l = g[j][k - 2][i - 1];
./228656264/doacross-3.c@145@ATOMIC@#pragma omp atomic read@l = g[j - 2][k - 2][i + 1];
./228656264/doacross-3.c@152@ATOMIC@#pragma omp atomic read@l = g[j - 3][k + 2][i - 2];
./228656264/task-5.C@36@ATOMIC@#pragma omp atomic read@e = err;
./228656264/atomic-16.c@15@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-16.c@33@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-16.c@49@ATOMIC@#pragma omp atomic read@v = x;
./228656264/target-31.c@36@ATOMIC@#pragma omp atomic read@v1 = c;
./228656264/target-31.c@38@ATOMIC@#pragma omp atomic read@v2 = g[0];
./228656264/target-31.c@40@ATOMIC@#pragma omp atomic read@v3 = g[1];
./228656264/target-31.c@137@ATOMIC@#pragma omp atomic read@v1 = c;
./228656264/target-31.c@139@ATOMIC@#pragma omp atomic read@v2 = g[0];
./228656264/target-31.c@141@ATOMIC@#pragma omp atomic read@v3 = g[1];
./228656264/atomic-15.C@9@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-15.C@15@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-15.C@35@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-15.C@47@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-15.C@63@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-15.C@71@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-15.C@79@ATOMIC@#pragma omp atomic read@v = x;
./228656264/atomic-15.C@91@ATOMIC@#pragma omp atomic read@v = x;
./228656264/doacross-2.c@21@ATOMIC@#pragma omp atomic read@l = a[i - 1];
./228656264/doacross-2.c@30@ATOMIC@#pragma omp atomic read@l = a[i + 1];
./228656264/doacross-2.c@51@ATOMIC@#pragma omp atomic read@l = b[i][j - 2][k - 1];
./228656264/doacross-2.c@60@ATOMIC@#pragma omp atomic read@l = b[i - 2][j - 2][k + 1];
./228656264/doacross-2.c@67@ATOMIC@#pragma omp atomic read@l = b[i - 3][j + 2][k - 2];
./228656264/doacross-2.c@99@ATOMIC@#pragma omp atomic read@l = c[i][j][k + 2];
./228656264/doacross-2.c@108@ATOMIC@#pragma omp atomic read@l = c[i - 2][j + 1][k - 4];
./228656264/doacross-2.c@115@ATOMIC@#pragma omp atomic read@l = c[i - 1][j - 2][k - 2];
./228656264/doacross-2.c@136@ATOMIC@#pragma omp atomic read@l = g[j][k - 2][i - 1];
./228656264/doacross-2.c@145@ATOMIC@#pragma omp atomic read@l = g[j - 2][k - 2][i + 1];
./228656264/doacross-2.c@152@ATOMIC@#pragma omp atomic read@l = g[j - 3][k + 2][i - 2];
./228656264/member-6.C@68@ATOMIC@#pragma omp atomic read@tv = t;
./228656264/member-6.C@70@ATOMIC@#pragma omp atomic read@bv = A::b;
./315333330/member-7.C@71@ATOMIC@#pragma omp atomic read@tv = T<Q>::t;
./315333330/member-7.C@73@ATOMIC@#pragma omp atomic read@bv = A::b;
./315333330/atomic-11.C@9@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@15@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@21@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@29@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@37@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@45@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@56@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@78@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@100@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-11.C@106@ATOMIC@#pragma omp atomic read@f = y;
./315333330/atomic-11.C@112@ATOMIC@#pragma omp atomic read@f = y;
./315333330/atomic-11.C@124@ATOMIC@#pragma omp atomic read@f = y;
./315333330/atomic-11.C@132@ATOMIC@#pragma omp atomic read@f = y;
./315333330/atomic-11.C@140@ATOMIC@#pragma omp atomic read@f = y;
./315333330/atomic-11.C@148@ATOMIC@#pragma omp atomic read@f = y;
./315333330/ordered-4.c@14@ATOMIC@#pragma omp atomic read@t = j[i];
./315333330/ordered-4.c@20@ATOMIC@#pragma omp atomic read@t = j[i - 1];
./315333330/ordered-4.c@27@ATOMIC@#pragma omp atomic read@t = j[i + 1];
./315333330/ordered-4.c@54@ATOMIC@#pragma omp atomic read@t = j[i];
./315333330/ordered-4.c@60@ATOMIC@#pragma omp atomic read@t = j[i - 1];
./315333330/ordered-4.c@67@ATOMIC@#pragma omp atomic read@t = j[i + 1];
./315333330/_Atomic-3.c@37@ATOMIC@#pragma omp atomic read@i = x;
./315333330/_Atomic-3.c@45@ATOMIC@#pragma omp atomic read@i = p[2];
./315333330/atomic-14.c@20@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-14.c@40@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-14.c@59@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-14.c@65@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-14.c@72@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-14.c@90@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-14.c@108@ATOMIC@#pragma omp atomic read@v = x;
./315333330/_Atomic-1.c@81@ATOMIC@#pragma omp atomic read@b = j;
./315333330/task-8.C@36@ATOMIC@#pragma omp atomic read@e = errval;
./315333330/pr69389.c@6@ATOMIC@#pragma omp atomic read@v = s.b;
./315333330/doacross-3.c@21@ATOMIC@#pragma omp atomic read@l = a[i - 1];
./315333330/doacross-3.c@30@ATOMIC@#pragma omp atomic read@l = a[i + 1];
./315333330/doacross-3.c@51@ATOMIC@#pragma omp atomic read@l = b[i][j - 2][k - 1];
./315333330/doacross-3.c@60@ATOMIC@#pragma omp atomic read@l = b[i - 2][j - 2][k + 1];
./315333330/doacross-3.c@67@ATOMIC@#pragma omp atomic read@l = b[i - 3][j + 2][k - 2];
./315333330/doacross-3.c@99@ATOMIC@#pragma omp atomic read@l = c[i][j][k + 2];
./315333330/doacross-3.c@108@ATOMIC@#pragma omp atomic read@l = c[i - 2][j + 1][k - 4];
./315333330/doacross-3.c@115@ATOMIC@#pragma omp atomic read@l = c[i - 1][j - 2][k - 2];
./315333330/doacross-3.c@136@ATOMIC@#pragma omp atomic read@l = g[j][k - 2][i - 1];
./315333330/doacross-3.c@145@ATOMIC@#pragma omp atomic read@l = g[j - 2][k - 2][i + 1];
./315333330/doacross-3.c@152@ATOMIC@#pragma omp atomic read@l = g[j - 3][k + 2][i - 2];
./315333330/atomic-13.c@7@ATOMIC@#pragma omp atomic read@i = l;
./315333330/atomic-13.c@9@ATOMIC@#pragma omp atomic read@m = j;
./315333330/pr67495.c@7@ATOMIC@#pragma omp atomic read@(float) a = b;
./315333330/pr67495.c@11@ATOMIC@#pragma omp atomic read@a = (float) b;
./315333330/pr67495.c@21@ATOMIC@#pragma omp atomic read@(int) a = b;
./315333330/pr67495.c@25@ATOMIC@#pragma omp atomic read@a = (int) b;
./315333330/task-5.C@36@ATOMIC@#pragma omp atomic read@e = err;
./315333330/pr59467.c@14@ATOMIC@#pragma omp atomic read@z = x;
./315333330/pr59467.c@27@ATOMIC@#pragma omp atomic read@z = v;
./315333330/pr59467.c@40@ATOMIC@#pragma omp atomic read@z = x;
./315333330/atomic-15.c@9@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-15.c@15@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-15.c@35@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-15.c@47@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-15.c@63@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-15.c@71@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-15.c@79@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-15.c@91@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-16.c@15@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-16.c@33@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-16.c@49@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-7.c@8@ATOMIC@#pragma omp atomic read@i = l;
./315333330/atomic-7.c@10@ATOMIC@#pragma omp atomic read@m = j;
./315333330/atomic-9.c@22@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-9.c@42@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-9.c@61@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-9.c@67@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-9.c@74@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-9.c@92@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-9.c@110@ATOMIC@#pragma omp atomic read@v = x;
./315333330/target-31.c@36@ATOMIC@#pragma omp atomic read@v1 = c;
./315333330/target-31.c@38@ATOMIC@#pragma omp atomic read@v2 = g[0];
./315333330/target-31.c@40@ATOMIC@#pragma omp atomic read@v3 = g[1];
./315333330/target-31.c@137@ATOMIC@#pragma omp atomic read@v1 = c;
./315333330/target-31.c@139@ATOMIC@#pragma omp atomic read@v2 = g[0];
./315333330/target-31.c@141@ATOMIC@#pragma omp atomic read@v3 = g[1];
./315333330/doacross-2.c@21@ATOMIC@#pragma omp atomic read@l = a[i - 1];
./315333330/doacross-2.c@30@ATOMIC@#pragma omp atomic read@l = a[i + 1];
./315333330/doacross-2.c@51@ATOMIC@#pragma omp atomic read@l = b[i][j - 2][k - 1];
./315333330/doacross-2.c@60@ATOMIC@#pragma omp atomic read@l = b[i - 2][j - 2][k + 1];
./315333330/doacross-2.c@67@ATOMIC@#pragma omp atomic read@l = b[i - 3][j + 2][k - 2];
./315333330/doacross-2.c@99@ATOMIC@#pragma omp atomic read@l = c[i][j][k + 2];
./315333330/doacross-2.c@108@ATOMIC@#pragma omp atomic read@l = c[i - 2][j + 1][k - 4];
./315333330/doacross-2.c@115@ATOMIC@#pragma omp atomic read@l = c[i - 1][j - 2][k - 2];
./315333330/doacross-2.c@136@ATOMIC@#pragma omp atomic read@l = g[j][k - 2][i - 1];
./315333330/doacross-2.c@145@ATOMIC@#pragma omp atomic read@l = g[j - 2][k - 2][i + 1];
./315333330/doacross-2.c@152@ATOMIC@#pragma omp atomic read@l = g[j - 3][k + 2][i - 2];
./315333330/atomic-8.c@20@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-8.c@40@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-8.c@59@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-8.c@65@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-8.c@72@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-8.c@90@ATOMIC@#pragma omp atomic read@v = x;
./315333330/atomic-8.c@108@ATOMIC@#pragma omp atomic read@v = x;
./315333330/member-6.C@68@ATOMIC@#pragma omp atomic read@tv = t;
./315333330/member-6.C@70@ATOMIC@#pragma omp atomic read@bv = A::b;
./315333330/doacross-1.c@19@ATOMIC@#pragma omp atomic read@l = a[i - 1];
./315333330/doacross-1.c@28@ATOMIC@#pragma omp atomic read@l = a[i + 1];
./315333330/doacross-1.c@49@ATOMIC@#pragma omp atomic read@l = b[i][j - 2][k - 1];
./315333330/doacross-1.c@58@ATOMIC@#pragma omp atomic read@l = b[i - 2][j - 2][k + 1];
./315333330/doacross-1.c@65@ATOMIC@#pragma omp atomic read@l = b[i - 3][j + 2][k - 2];
./315333330/doacross-1.c@97@ATOMIC@#pragma omp atomic read@l = c[i][j][k + 2];
./315333330/doacross-1.c@106@ATOMIC@#pragma omp atomic read@l = c[i - 2][j + 1][k - 4];
./315333330/doacross-1.c@113@ATOMIC@#pragma omp atomic read@l = c[i - 1][j - 2][k - 2];
./408823577/05_dag.bigdata.c@80@ATOMIC@#pragma omp atomic read@u_ancestors = nodes[idx].u_ancestors;
./408823577/02_sections_nested_irregular.c@177@ATOMIC@#pragma omp atomic read@mysemaphore = semaphore;
./408823577/02_sections_nested_irregular.c@182@ATOMIC@#pragma omp atomic read@mysemaphore = semaphore;
./408823577/02_sections_nested_irregular.c@217@ATOMIC@#pragma omp atomic read@mysemaphore = semaphore;
./408823577/02_sections_nested_irregular.c@222@ATOMIC@#pragma omp atomic read@mysemaphore = semaphore;
./408823577/02_sections_nested_irregular.c@257@ATOMIC@#pragma omp atomic read@mysemaphore = semaphore;
./408823577/02_sections_nested_irregular.c@262@ATOMIC@#pragma omp atomic read@mysemaphore = semaphore;
./242248042/wrongPercolation.c@22@ATOMIC@#pragma omp atomic read@t = shared;
./242248042/flowIssueSwap.c@9@ATOMIC@#pragma omp atomic read@t1 = Z;
./242248042/flowIssueSwap.c@17@ATOMIC@#pragma omp atomic read@t2 = Z;
./242248042/livenessCheck.c@16@ATOMIC@#pragma omp atomic read@local1 = shared;
./242248042/updateSwap.c@28@ATOMIC@#pragma omp atomic read@t1 = Z;
./242248042/simplest.c@10@ATOMIC@#pragma omp atomic read@p = x;
./242248042/test37.c@7@ATOMIC@#pragma omp atomic read@b = a;
./242248042/AtomicStatementLink.c@4@ATOMIC@#pragma omp atomic read@t = x;
./242248042/fenceIssue.c@15@ATOMIC@#pragma omp atomic read@t1 = Y;
./242248042/AtomicEndLink.c@4@ATOMIC@#pragma omp atomic read@t = x;
./242248042/AtomicBeginLink.c@4@ATOMIC@#pragma omp atomic read@t = x;
./405671279/solver-omp-gausseidel.c@42@ATOMIC@#pragma omp atomic read@cont = mat[blocki-1];
./405671279/solver-omp-optional2.c@43@ATOMIC@#pragma omp atomic read@cont = mat[blocki-1];
./228117517/incrementalAggregation.c@173@ATOMIC@#pragma omp atomic read@atomv.atomicPair = stats->atom[n].atomicPair;
./134549171/Prod_cons_2.c@57@ATOMIC@#pragma omp atomic read@flg_temp = flag;
./142172127/producer-consumer.cpp@73@ATOMIC@#pragma omp atomic read@flag_tmp = flag;
./399664768/graph.hpp@296@ATOMIC@#pragma omp atomic read@m_c = mate_[edge.edge_->tail_];
./399664768/graph.hpp@298@ATOMIC@#pragma omp atomic read@m_m_c = mate_[mate_[edge.edge_->tail_]];
./399664768/graph.hpp@330@ATOMIC@#pragma omp atomic read@match_x = matched_[x];
./399664768/graph.hpp@333@ATOMIC@#pragma omp atomic read@mate_x = mate_[x];
./399664768/graph.hpp@347@ATOMIC@#pragma omp atomic read@y = mate_[x];
./399664768/graph.hpp@354@ATOMIC@#pragma omp atomic read@mate_y = mate_[y];
./399664768/graph.hpp@424@ATOMIC@#pragma omp atomic read@u = mate_[v];
./399664768/graph.hpp@431@ATOMIC@#pragma omp atomic read@mate_u = mate_[u];
./116842157/sqs.cpp@336@ATOMIC@#pragma omp atomic read@best_objective_local = best_objective;
./77227085/VC5Decompressor.cpp@65@ATOMIC@#pragma omp atomic read@"#endif
value = storage;

return value;
}

constexpr int PRECISION_MIN = 8;
constexpr int PRECISION_MAX = 16;
constexpr int MARKER_BAND_END = 1;
"
./285634219/sptrsv_syncfree.cpp@13@ATOMIC@#pragma omp atomic read@const int value = *vaddr;
./117122510/rcm_kernels.cpp@126@ATOMIC@#pragma omp atomic read@val_threads_working = *threads_working;
./117122510/rcm_kernels.cpp@202@ATOMIC@#pragma omp atomic read@level = levels[node];
./117122510/rcm_kernels.cpp@217@ATOMIC@#pragma omp atomic read@old_neighbour_level = levels[neighbour];
./117122510/rcm_kernels.cpp@549@ATOMIC@#pragma omp atomic read@written = perm[base_offset + read_offset];
./117122510/rcm_kernels.cpp@553@ATOMIC@#pragma omp atomic read@written = perm[base_offset + read_offset];
./117122510/rcm_kernels.cpp@565@ATOMIC@#pragma omp atomic read@neighbour_level = levels[neighbour];
./161696083/test_atomic_acquire_release.c@21@ATOMIC@#pragma omp atomic read acquire@tmp = y;
./92494521/DRB143-acquirerelease-orig-no.c@17@ATOMIC@#pragma omp atomic read acquire@tmp = y;
./92494521/DRB142-acquirerelease-orig-yes.c@16@ATOMIC@#pragma omp atomic read acquire@tmp = y;
./228656264/atomic-17.c@9@ATOMIC@#pragma omp atomic read seq_cst@v = x;
./228656264/atomic-17.c@47@ATOMIC@#pragma omp atomic read seq_cst@v = x;
./228656264/atomic-17.c@79@ATOMIC@#pragma omp atomic read seq_cst@v = x;
./228656264/atomic-17.c@91@ATOMIC@#pragma omp atomic read seq_cst@v = x;
./228656264/priority.c@21@ATOMIC@#pragma omp atomic read seq_cst@saved_tsknum = tsknum;
./315333330/atomic-17.C@9@ATOMIC@#pragma omp atomic read seq_cst@v = x;
./315333330/atomic-17.C@47@ATOMIC@#pragma omp atomic read seq_cst@v = x;
./315333330/atomic-17.C@79@ATOMIC@#pragma omp atomic read seq_cst@v = x;
./315333330/atomic-17.C@91@ATOMIC@#pragma omp atomic read seq_cst@v = x;
./315333330/priority.c@21@ATOMIC@#pragma omp atomic read seq_cst@saved_tsknum = tsknum;
./228656264/atomic-17.c@15@ATOMIC@#pragma omp atomic read, seq_cst@v = x;
./228656264/atomic-17.c@63@ATOMIC@#pragma omp atomic read, seq_cst@v = x;
./315333330/atomic-17.C@15@ATOMIC@#pragma omp atomic read, seq_cst@v = x;
./315333330/atomic-17.C@63@ATOMIC@#pragma omp atomic read, seq_cst@v = x;
./228656264/atomic-17.c@7@ATOMIC@#pragma omp atomic seq_cst@x = -3 + x;
./315333330/atomic-17.C@7@ATOMIC@#pragma omp atomic seq_cst@x = -3 + x;
./228656264/atomic-17.c@27@ATOMIC@#pragma omp atomic seq_cst capture@v = x = 5 | x;
./228656264/atomic-17.c@43@ATOMIC@#pragma omp atomic seq_cst capture@"{ v = x; x = -1 * -1 * -1 * -1 - x; }
if (v != 9)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != -8)
abort ();
#pragma omp atomic capture, seq_cst
{ x = 2 * 2 - x; v = x; }
if (v != 12)"
./228656264/atomic-17.c@55@ATOMIC@#pragma omp atomic seq_cst capture@"{ x = 7 & x; v = x; }
if (v != 4)
abort ();
#pragma omp atomic capture seq_cst
{ v = x; x = 6; }
if (v != 4)
abort ();
#pragma omp atomic read, seq_cst
v = x;
if (v != 6)"
./228656264/atomic-17.c@83@ATOMIC@#pragma omp atomic seq_cst capture@"{ v = x; x = l ? 17 : 12; }
if (v != 47)
abort ();
#pragma omp atomic capture seq_cst
{ v = x; x = l = s++ + 3; }
if (v != 17 || l != 4 || s != 2)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != 4)"
./315333330/atomic-17.C@27@ATOMIC@#pragma omp atomic seq_cst capture@v = x = 5 | x;
./315333330/atomic-17.C@43@ATOMIC@#pragma omp atomic seq_cst capture@"{ v = x; x = -1 * -1 * -1 * -1 - x; }
if (v != 9)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != -8)
abort ();
#pragma omp atomic capture, seq_cst
{ x = 2 * 2 - x; v = x; }
if (v != 12)"
./315333330/atomic-17.C@55@ATOMIC@#pragma omp atomic seq_cst capture@"{ x = 7 & x; v = x; }
if (v != 4)
abort ();
#pragma omp atomic capture seq_cst
{ v = x; x = 6; }
if (v != 4)
abort ();
#pragma omp atomic read, seq_cst
v = x;
if (v != 6)"
./315333330/atomic-17.C@83@ATOMIC@#pragma omp atomic seq_cst capture@"{ v = x; x = l ? 17 : 12; }
if (v != 47)
abort ();
#pragma omp atomic capture seq_cst
{ v = x; x = l = s++ + 3; }
if (v != 17 || l != 4 || s != 2)
abort ();
#pragma omp atomic read seq_cst
v = x;
if (v != 4)"
./228656264/atomic-17.c@35@ATOMIC@#pragma omp atomic seq_cst read@v = x;
./315333330/atomic-17.C@35@ATOMIC@#pragma omp atomic seq_cst read@v = x;
./228656264/atomic-17.c@13@ATOMIC@#pragma omp atomic seq_cst update@x = 3 * 2 * 1 + x;
./315333330/atomic-17.C@13@ATOMIC@#pragma omp atomic seq_cst update@x = 3 * 2 * 1 + x;
./228656264/atomic-17.c@19@ATOMIC@#pragma omp atomic seq_cst, capture@v = x = x | 16;
./315333330/atomic-17.C@19@ATOMIC@#pragma omp atomic seq_cst, capture@v = x = x | 16;
./228656264/atomic-17.c@71@ATOMIC@#pragma omp atomic seq_cst, read@v = x;
./315333330/atomic-17.C@71@ATOMIC@#pragma omp atomic seq_cst, read@v = x;
./161696083/test_loop_order_concurrent_device.c@32@ATOMIC@#pragma omp atomic update@total_wait_errors++;
./161696083/test_teams_distribute_default_none.c@43@ATOMIC@#pragma omp atomic update@share = share + b[x];
./161696083/test_parallel_for_simd_atomic.c@12@ATOMIC@#pragma omp atomic update@x += 1;
./161696083/test_loop_order_concurrent.c@32@ATOMIC@#pragma omp atomic update@total_wait_errors++;
./161696083/test_target_teams_distribute_parallel_for_simd_atomic.c@12@ATOMIC@#pragma omp atomic update@x += 1;
./161696083/test_target_teams_distribute_default_none.c@50@ATOMIC@#pragma omp atomic update@share = share + b[x];
./285965062/reorder.c@802@ATOMIC@#pragma omp atomic update@degrees[src]++;
./285965062/reorder.c@809@ATOMIC@#pragma omp atomic update@degrees[dest]++;
./285965062/reorder.c@816@ATOMIC@#pragma omp atomic update@degrees[dest]++;
./285965062/reorder.c@818@ATOMIC@#pragma omp atomic update@degrees[src]++;
./285965062/reorder.c@824@ATOMIC@#pragma omp atomic update@degrees[src]++;
./285965062/reorder.c@995@ATOMIC@#pragma omp atomic update@degrees[src]++;
./285965062/reorder.c@1004@ATOMIC@#pragma omp atomic update@degrees[dest]++;
./285965062/reorder.c@1010@ATOMIC@#pragma omp atomic update@degrees[dest]++;
./285965062/reorder.c@1012@ATOMIC@#pragma omp atomic update@degrees[src]++;
./285965062/reorder.c@1018@ATOMIC@#pragma omp atomic update@degrees[src]++;
./285965062/DFS.c@254@ATOMIC@#pragma omp atomic update@stats->processed_nodes++;
./285965062/pageRank.c@836@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./285965062/pageRank.c@1485@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./285965062/pageRank.c@2049@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += rDivD_params.scale * (riDividedOnDiClause_quant[v] - rDivD_params.zero);
./285965062/pageRank.c@2366@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./285965062/pageRank.c@2544@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./285965062/pageRank.c@2791@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./285965062/pageRank.c@2992@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./285965062/pageRank.c@3236@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./285965062/pageRank.c@3369@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./285965062/pageRank.c@3598@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./285965062/pageRank.c@3801@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./285965062/pageRank.c@4049@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./285965062/pageRank.c@4185@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./285965062/grid.c@171@ATOMIC@#pragma omp atomic update@grid->out_degree[src]++;
./285965062/grid.c@173@ATOMIC@#pragma omp atomic update@grid->in_degree[dest]++;
./285965062/grid.c@219@ATOMIC@#pragma omp atomic update@grid->partitions[Partition_idx].num_edges++;
./285965062/SPMV.c@627@ATOMIC@#pragma omp atomic update@stats->vector_output[dest] += (weight * stats->vector_input[src]);
./285965062/SPMV.c@863@ATOMIC@#pragma omp atomic update@vector_output[dest] += MULFixed64V1(weight, vector_input[src]);
./285965062/SPMV.c@1031@ATOMIC@#pragma omp atomic update@stats->vector_output[dest] += (weight * stats->vector_input[src]);
./285965062/SPMV.c@1186@ATOMIC@#pragma omp atomic update@vector_output[dest] += MULFixed64V1(weight, vector_input[src]);
./285965062/SPMV.c@1350@ATOMIC@#pragma omp atomic update@stats->vector_output[dest] += (weight * stats->vector_input[src]);
./285965062/SPMV.c@1507@ATOMIC@#pragma omp atomic update@vector_output[dest] += MULFixed64V1(weight, vector_input[src]);
./285965062/SSSP.c@231@ATOMIC@#pragma omp atomic update@stats->buckets_total++;
./285965062/SSSP.c@463@ATOMIC@#pragma omp atomic update@stats->buckets_total--;
./285965062/SSSP.c@589@ATOMIC@#pragma omp atomic update@stats->buckets_total--;
./285965062/graphAdjArrayList.c@124@ATOMIC@#pragma omp atomic update@graphAdjArrayList->vertices[src].out_degree++;
./285965062/graphAdjArrayList.c@128@ATOMIC@#pragma omp atomic update@graphAdjArrayList->vertices[dest].in_degree++;
./285965062/graphAdjArrayList.c@142@ATOMIC@#pragma omp atomic update@graphAdjArrayList->vertices[src].out_degree++;
./285965062/graphAdjArrayList.c@156@ATOMIC@#pragma omp atomic update@graphAdjArrayList->vertices[dest].in_degree++;
./285965062/triangleCount.c@341@ATOMIC@#pragma omp atomic update@stats->counts[node_w]++;
./228656264/atomic-8.C@12@ATOMIC@#pragma omp atomic update@x = x + 7;
./228656264/atomic-8.C@16@ATOMIC@#pragma omp atomic update@x = x + 2 * 3;
./228656264/atomic-8.C@70@ATOMIC@#pragma omp atomic update@p[foo (), 0] = p[foo (), 0] - 16;
./228656264/atomic-11.C@19@ATOMIC@#pragma omp atomic update@x++;
./228656264/atomic-11.C@110@ATOMIC@#pragma omp atomic update@y *= 2.0f;
./228656264/target-32.c@17@ATOMIC@#pragma omp atomic update@b |= 4;
./228656264/target-32.c@23@ATOMIC@#pragma omp atomic update@b |= 1;
./228656264/target-32.c@29@ATOMIC@#pragma omp atomic update@c |= 8;
./228656264/target-32.c@35@ATOMIC@#pragma omp atomic update@c |= 2;
./228656264/atomic-14.C@12@ATOMIC@#pragma omp atomic update@x = x + 7;
./228656264/atomic-14.C@16@ATOMIC@#pragma omp atomic update@x = x + 2 * 3;
./228656264/atomic-14.C@70@ATOMIC@#pragma omp atomic update@p[foo (), 0] = p[foo (), 0] - 16;
./228656264/target-33.c@11@ATOMIC@#pragma omp atomic update@a |= 4;
./228656264/target-33.c@13@ATOMIC@#pragma omp atomic update@b |= 8;
./228656264/target-33.c@18@ATOMIC@#pragma omp atomic update@a |= 16;
./228656264/target-33.c@20@ATOMIC@#pragma omp atomic update@c |= 32;
./228656264/target-33.c@53@ATOMIC@#pragma omp atomic update@a = a + 9;
./228656264/target-33.c@59@ATOMIC@#pragma omp atomic update@a = a + 4;
./228656264/atomic-9.C@14@ATOMIC@#pragma omp atomic update@x = x + 7;
./228656264/atomic-9.C@18@ATOMIC@#pragma omp atomic update@x = x + 2 * 3;
./228656264/atomic-9.C@72@ATOMIC@#pragma omp atomic update@p[foo (), 0] = p[foo (), 0] - 16;
./228656264/target-34.c@15@ATOMIC@#pragma omp atomic update@a |= 4;
./228656264/target-34.c@17@ATOMIC@#pragma omp atomic update@b |= 8;
./228656264/target-34.c@22@ATOMIC@#pragma omp atomic update@a |= 16;
./228656264/target-34.c@24@ATOMIC@#pragma omp atomic update@c |= 32;
./228656264/target-34.c@57@ATOMIC@#pragma omp atomic update@a = a + 9;
./228656264/target-34.c@63@ATOMIC@#pragma omp atomic update@a = a + 4;
./228656264/atomic-16.c@13@ATOMIC@#pragma omp atomic update@p[foo (), 0] = 16 + 6 - p[foo (), 0];
./228656264/target-31.c@61@ATOMIC@#pragma omp atomic update@c++;
./228656264/target-31.c@63@ATOMIC@#pragma omp atomic update@g[0] += 2;
./228656264/target-31.c@65@ATOMIC@#pragma omp atomic update@g[1] += 3;
./228656264/target-31.c@91@ATOMIC@#pragma omp atomic update@j++;
./228656264/target-31.c@93@ATOMIC@#pragma omp atomic update@l[0] += 2;
./228656264/target-31.c@95@ATOMIC@#pragma omp atomic update@l[1] += 3;
./228656264/target-31.c@97@ATOMIC@#pragma omp atomic update@k += 4;
./228656264/target-31.c@99@ATOMIC@#pragma omp atomic update@m[0] += 5;
./228656264/target-31.c@101@ATOMIC@#pragma omp atomic update@m[1] += 6;
./228656264/atomic-15.C@13@ATOMIC@#pragma omp atomic update@x = 3 * 2 * 1 + x;
./162604747/histograms.c@221@ATOMIC@#pragma omp atomic update@hist[ ((tmp1 >> tail0 & mask) << b) + (tmp2 >> tail0 & mask) ]++;
./162604747/histograms.c@223@ATOMIC@#pragma omp atomic update@hist[ ((tmp1 >> tail1 & mask) << b) + (tmp2 >> tail1 & mask) ]++;
./162604747/histograms.c@225@ATOMIC@#pragma omp atomic update@hist[ ((tmp1 >> tail2 & mask) << b) + (tmp2 >> tail2 & mask) ]++;
./162604747/histograms.c@227@ATOMIC@#pragma omp atomic update@hist[ ((tmp1 >> tail3 & mask) << b) + (tmp2 >> tail3 & mask) ]++;
./315333330/atomic-11.C@19@ATOMIC@#pragma omp atomic update@x++;
./315333330/atomic-11.C@110@ATOMIC@#pragma omp atomic update@y *= 2.0f;
./315333330/target-32.c@17@ATOMIC@#pragma omp atomic update@b |= 4;
./315333330/target-32.c@23@ATOMIC@#pragma omp atomic update@b |= 1;
./315333330/target-32.c@29@ATOMIC@#pragma omp atomic update@c |= 8;
./315333330/target-32.c@35@ATOMIC@#pragma omp atomic update@c |= 2;
./315333330/_Atomic-3.c@39@ATOMIC@#pragma omp atomic update@x += 6;
./315333330/_Atomic-3.c@47@ATOMIC@#pragma omp atomic update@p[2] += 6;
./315333330/atomic-14.c@12@ATOMIC@#pragma omp atomic update@x = x + 7;
./315333330/atomic-14.c@16@ATOMIC@#pragma omp atomic update@x = x + 2 * 3;
./315333330/atomic-14.c@70@ATOMIC@#pragma omp atomic update@p[foo (), 0] = p[foo (), 0] - 16;
./315333330/target-33.c@11@ATOMIC@#pragma omp atomic update@a |= 4;
./315333330/target-33.c@13@ATOMIC@#pragma omp atomic update@b |= 8;
./315333330/target-33.c@18@ATOMIC@#pragma omp atomic update@a |= 16;
./315333330/target-33.c@20@ATOMIC@#pragma omp atomic update@c |= 32;
./315333330/target-33.c@53@ATOMIC@#pragma omp atomic update@a = a + 9;
./315333330/target-33.c@59@ATOMIC@#pragma omp atomic update@a = a + 4;
./315333330/target-34.c@15@ATOMIC@#pragma omp atomic update@a |= 4;
./315333330/target-34.c@17@ATOMIC@#pragma omp atomic update@b |= 8;
./315333330/target-34.c@22@ATOMIC@#pragma omp atomic update@a |= 16;
./315333330/target-34.c@24@ATOMIC@#pragma omp atomic update@c |= 32;
./315333330/target-34.c@57@ATOMIC@#pragma omp atomic update@a = a + 9;
./315333330/target-34.c@63@ATOMIC@#pragma omp atomic update@a = a + 4;
./315333330/atomic-15.c@13@ATOMIC@#pragma omp atomic update@x = 3 * 2 * 1 + x;
./315333330/atomic-16.c@13@ATOMIC@#pragma omp atomic update@p[foo (), 0] = 16 + 6 - p[foo (), 0];
./315333330/atomic-9.c@14@ATOMIC@#pragma omp atomic update@x = x + 7;
./315333330/atomic-9.c@18@ATOMIC@#pragma omp atomic update@x = x + 2 * 3;
./315333330/atomic-9.c@72@ATOMIC@#pragma omp atomic update@p[foo (), 0] = p[foo (), 0] - 16;
./315333330/target-31.c@61@ATOMIC@#pragma omp atomic update@c++;
./315333330/target-31.c@63@ATOMIC@#pragma omp atomic update@g[0] += 2;
./315333330/target-31.c@65@ATOMIC@#pragma omp atomic update@g[1] += 3;
./315333330/target-31.c@91@ATOMIC@#pragma omp atomic update@j++;
./315333330/target-31.c@93@ATOMIC@#pragma omp atomic update@l[0] += 2;
./315333330/target-31.c@95@ATOMIC@#pragma omp atomic update@l[1] += 3;
./315333330/target-31.c@97@ATOMIC@#pragma omp atomic update@k += 4;
./315333330/target-31.c@99@ATOMIC@#pragma omp atomic update@m[0] += 5;
./315333330/target-31.c@101@ATOMIC@#pragma omp atomic update@m[1] += 6;
./315333330/atomic-8.c@12@ATOMIC@#pragma omp atomic update@x = x + 7;
./315333330/atomic-8.c@16@ATOMIC@#pragma omp atomic update@x = x + 2 * 3;
./315333330/atomic-8.c@70@ATOMIC@#pragma omp atomic update@p[foo (), 0] = p[foo (), 0] - 16;
./387406405/atomic.c@17@ATOMIC@#pragma omp atomic update@x[index[i]] += work1(i);
./408823577/09_clauses__copyin.c@30@ATOMIC@#pragma omp atomic update@result += thread_result;
./408823577/09_clauses__copyin.c@47@ATOMIC@#pragma omp atomic update@result += thread_result;
./408823577/05_dag.c@69@ATOMIC@#pragma omp atomic update@nodes[idx].counter += work;
./408823577/05_dag.c@78@ATOMIC@#pragma omp atomic update@(*check)++;
./408823577/03_variable_workload.v2.c@112@ATOMIC@#pragma omp atomic update@result += myresult;
./408823577/03_variable_workload.v2.c@120@ATOMIC@#pragma omp atomic update@result += myresult;
./408823577/03_variable_workload.v2.c@128@ATOMIC@#pragma omp atomic update@result += myresult;
./408823577/05_dag.bigdata.c@78@ATOMIC@#pragma omp atomic update@nodes[idx].counter += work;
./408823577/05_dag.bigdata.c@82@ATOMIC@#pragma omp atomic update@nodes[idx].u_ancestors++;
./408823577/05_dag.bigdata.c@91@ATOMIC@#pragma omp atomic update@(*check)++;
./408823577/02_tasks_wrong.c@92@ATOMIC@#pragma omp atomic update@result += result1;
./408823577/02_tasks_wrong.c@94@ATOMIC@#pragma omp atomic update@result += result2;
./408823577/02_tasks_wrong.c@96@ATOMIC@#pragma omp atomic update@result += result3;
./408823577/01d_array_sum.c@52@ATOMIC@#pragma omp atomic update@S += myS;
./408823577/02_falsesharing.c@63@ATOMIC@#pragma omp atomic update@th_avg_time += myt;
./408823577/02_falsesharing.c@65@ATOMIC@#pragma omp atomic update@th_min_time  = (th_min_time > myt? myt : th_min_time);
./408823577/09_clauses__copyprivate.c@33@ATOMIC@#pragma omp atomic update@result += thread_result;
./408823577/09_clauses__copyprivate.c@52@ATOMIC@#pragma omp atomic update@result += thread_result;
./408823577/02_tasks.c@71@ATOMIC@#pragma omp atomic update@result += myresult;
./408823577/02_tasks.c@79@ATOMIC@#pragma omp atomic update@result += myresult;
./408823577/02_tasks.c@87@ATOMIC@#pragma omp atomic update@result += myresult;
./145408872/linked-list.c@127@ATOMIC@#pragma omp atomic update@n_predecessors[vertex_id_tmp] += 1;
./145408872/linked-list.c@217@ATOMIC@#pragma omp atomic update@n_predecessors_local[vertex_id_tmp] += 1;
./571981935/test_visibility_bug.c@22@ATOMIC@#pragma omp atomic update@s += tmp;
./571981935/test_ddot_atomic_good.c@23@ATOMIC@#pragma omp atomic update@s += tmp;
./571981935/test_ddot_atomic_bad.c@18@ATOMIC@#pragma omp atomic update@s += x[i] * y[i];
./265703441/Openmp_prime.c@53@ATOMIC@#pragma omp atomic update@total_primes += prime_range(tasks[i].minval, tasks[i].maxval);
./92494521/DRB146-atomicupdate-orig-gpu-no.c@9@ATOMIC@#pragma omp atomic update@var++;
./242248042/test31.c@16@ATOMIC@#pragma omp atomic update@x = x + 1;
./242248042/test35.c@21@ATOMIC@#pragma omp atomic update@a = a + foo();
./242248042/test73.c@3@ATOMIC@#pragma omp atomic update@i = i + 1;
./242248042/allCFG.c@124@ATOMIC@#pragma omp atomic update@z = z + 5;
./242248042/test36.c@7@ATOMIC@#pragma omp atomic update@shared = shared + 1;
./242248042/test36.c@9@ATOMIC@#pragma omp atomic update@pri = pri + shared++;
./242248042/AtomicStatementLink.c@6@ATOMIC@#pragma omp atomic update@x = x + 1;
./242248042/AtomicEndLink.c@6@ATOMIC@#pragma omp atomic update@x = x + 1;
./242248042/test32.c@13@ATOMIC@#pragma omp atomic update@x = x + 1;
./242248042/atomicConstructSimple.c@13@ATOMIC@#pragma omp atomic update@x += localX;
./242248042/allKnown.c@124@ATOMIC@#pragma omp atomic update@z = z + 5;
./242248042/atomicConstruct.c@6@ATOMIC@#pragma omp atomic update@x += localX;
./242248042/test30.c@23@ATOMIC@#pragma omp atomic update@x = x + 1;
./242248042/test5.c@6@ATOMIC@#pragma omp atomic update@i = i + 1;
./242248042/example.c@20@ATOMIC@#pragma omp atomic update@z = 0;
./242248042/example.c@24@ATOMIC@#pragma omp atomic update@z++;
./242248042/example.c@29@ATOMIC@#pragma omp atomic update@z++;
./242248042/example.c@36@ATOMIC@#pragma omp atomic update@z++;
./242248042/example.c@39@ATOMIC@#pragma omp atomic update@x++;
./242248042/AtomicBeginLink.c@6@ATOMIC@#pragma omp atomic update@x = x + 1;
./228117517/reorder.c@944@ATOMIC@#pragma omp atomic update@degrees[src]++;
./228117517/reorder.c@951@ATOMIC@#pragma omp atomic update@degrees[dest]++;
./228117517/reorder.c@958@ATOMIC@#pragma omp atomic update@degrees[dest]++;
./228117517/reorder.c@960@ATOMIC@#pragma omp atomic update@degrees[src]++;
./228117517/reorder.c@966@ATOMIC@#pragma omp atomic update@degrees[src]++;
./228117517/reorder.c@1137@ATOMIC@#pragma omp atomic update@degrees[src]++;
./228117517/reorder.c@1146@ATOMIC@#pragma omp atomic update@degrees[dest]++;
./228117517/reorder.c@1152@ATOMIC@#pragma omp atomic update@degrees[dest]++;
./228117517/reorder.c@1154@ATOMIC@#pragma omp atomic update@degrees[src]++;
./228117517/reorder.c@1160@ATOMIC@#pragma omp atomic update@degrees[src]++;
./228117517/DFS.c@236@ATOMIC@#pragma omp atomic update@stats->processed_nodes++;
./228117517/pageRank.c@776@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./228117517/pageRank.c@1267@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./228117517/pageRank.c@1705@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += rDivD_params.scale * (riDividedOnDiClause_quant[v] - rDivD_params.zero);
./228117517/pageRank.c@1951@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./228117517/pageRank.c@2083@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./228117517/pageRank.c@2311@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./228117517/pageRank.c@2512@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./228117517/pageRank.c@2756@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./228117517/pageRank.c@2889@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./228117517/pageRank.c@3118@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./228117517/pageRank.c@3321@ATOMIC@#pragma omp atomic update@pageRanksNext[u] += riDividedOnDiClause[v];
./228117517/pageRank.c@3569@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./228117517/pageRank.c@3705@ATOMIC@#pragma omp atomic update@aResiduals[u] += delta;
./228117517/grid.c@171@ATOMIC@#pragma omp atomic update@grid->out_degree[src]++;
./228117517/grid.c@173@ATOMIC@#pragma omp atomic update@grid->in_degree[dest]++;
./228117517/grid.c@219@ATOMIC@#pragma omp atomic update@grid->partitions[Partition_idx].num_edges++;
./228117517/SPMV.c@576@ATOMIC@#pragma omp atomic update@stats->vector_output[dest] += (weight * stats->vector_input[src]);
./228117517/SPMV.c@766@ATOMIC@#pragma omp atomic update@vector_output[dest] += MULFixed64V1(weight, vector_input[src]);
./228117517/SPMV.c@928@ATOMIC@#pragma omp atomic update@stats->vector_output[dest] += (weight * stats->vector_input[src]);
./228117517/SPMV.c@1083@ATOMIC@#pragma omp atomic update@vector_output[dest] += MULFixed64V1(weight, vector_input[src]);
./228117517/SPMV.c@1247@ATOMIC@#pragma omp atomic update@stats->vector_output[dest] += (weight * stats->vector_input[src]);
./228117517/SPMV.c@1404@ATOMIC@#pragma omp atomic update@vector_output[dest] += MULFixed64V1(weight, vector_input[src]);
./228117517/SSSP.c@225@ATOMIC@#pragma omp atomic update@stats->buckets_total++;
./228117517/SSSP.c@450@ATOMIC@#pragma omp atomic update@stats->buckets_total--;
./228117517/SSSP.c@563@ATOMIC@#pragma omp atomic update@stats->buckets_total--;
./228117517/graphAdjArrayList.c@124@ATOMIC@#pragma omp atomic update@graphAdjArrayList->vertices[src].out_degree++;
./228117517/graphAdjArrayList.c@128@ATOMIC@#pragma omp atomic update@graphAdjArrayList->vertices[dest].in_degree++;
./228117517/graphAdjArrayList.c@142@ATOMIC@#pragma omp atomic update@graphAdjArrayList->vertices[src].out_degree++;
./228117517/graphAdjArrayList.c@156@ATOMIC@#pragma omp atomic update@graphAdjArrayList->vertices[dest].in_degree++;
./228117517/triangleCount.c@320@ATOMIC@#pragma omp atomic update@stats->counts[node_w]++;
./308298958/critical_sections.c@33@ATOMIC@#pragma omp atomic update@count++;
./438564376/OMP_Counting_words.cpp@11@ATOMIC@#pragma omp atomic update@"if ((isspace(argv[1][i])) && !(isspace(argv[1][i+1])))
num_words ++;
}
printf(""Num words = %d\n"", num_words+1);
}"
./439117495/tree_mesh_builder.cpp@54@ATOMIC@#pragma omp atomic update@totalTriangles += generateOctree(field, mGridSizeMid, nextPosition);
./227389214/tree_mesh_builder.cpp@37@ATOMIC@#pragma omp atomic update@sum += res_sum;
./332196772/Cluster.h@48@ATOMIC@#pragma omp atomic update@N_points++;
./332196772/Cluster.h@52@ATOMIC@#pragma omp atomic update@tot_coord_y += pt.get_y();
./434037739/Day19.cpp@191@ATOMIC@#pragma omp atomic update@++all_done;
./368544377/advanced_synchronisation.cpp@27@ATOMIC@#pragma omp atomic update@++total ;
./479203996/louvain.hpp@300@ATOMIC@#pragma omp atomic update@localCupdate[localTarget].degree += vDegree[i];
./479203996/louvain.hpp@302@ATOMIC@#pragma omp atomic update@localCupdate[localTarget].size++;
./479203996/louvain.hpp@304@ATOMIC@#pragma omp atomic update@localCupdate[cc].degree -= vDegree[i];
./479203996/louvain.hpp@306@ATOMIC@#pragma omp atomic update@localCupdate[cc].size--;
./104462787/RawProcessor.cpp@411@ATOMIC@#pragma omp atomic update@scaleTotal += matchScale;
./285634219/kernel_histogram.h@24@ATOMIC@#pragma omp atomic update@s_Hist[warpBase+(data4 & 0x3FFU)]++;
./285634219/kernel_histogram.h@35@ATOMIC@#pragma omp atomic update@h_offsets[pos] += sum;
./285634219/model_eval.cpp@49@ATOMIC@#pragma omp atomic update@outlier_block_count += outlier_local_count;
./285634219/numeric.cpp@83@ATOMIC@#pragma omp atomic update@val_dev[subColElem] += -tmpMem[ridx+n*bid]*s[wid];
./285634219/numeric.cpp@183@ATOMIC@#pragma omp atomic update@val_dev[subColElem] += -tmpMem[ridx+n*bid]*s[wid];
./285634219/numeric.cpp@334@ATOMIC@#pragma omp atomic update@val_dev[subColElem] += -tmpMem[stream * n + ridx] * s;
./285634219/ccsd_tengy.cpp@73@ATOMIC@#pragma omp atomic update@emp4i_p[0] += denom * (f1tbc+f1ncb+f2tcb+f3nbc+f4ncb) * (f1tbc-f2tbc*2-f3tbc*2+f4tbc)
./285634219/ccsd_tengy.cpp@78@ATOMIC@#pragma omp atomic update@emp4k_p[0] += denom * (f1nbc+f1tcb+f2ncb+f3tbc+f4tcb) * (f1nbc-f2nbc*2-f3nbc*2+f4nbc)
./285634219/ccsd_tengy.cpp@91@ATOMIC@#pragma omp atomic update@emp5i_p[0] += denom * t1v1b * dintx1c * (f1tbc+f2nbc+f4ncb-(f3tbc+f4nbc+f2ncb+f1nbc+f2tbc+f3ncb)*2
./285634219/ccsd_tengy.cpp@95@ATOMIC@#pragma omp atomic update@emp5k_p[0] += denom * t1v2b * dintx2c * (f1nbc+f2tbc+f4tcb -(f3nbc+f4tbc+f2tcb +f1tbc+f2nbc+f3tcb)*2
./285634219/force_kernel.cpp@97@ATOMIC@#pragma omp atomic update@atom_list[j].f[n] += -holder;
./285634219/force_kernel.cpp@105@ATOMIC@#pragma omp atomic update@atom_list[i].f[n] += af[n];
./285634219/force_kernel.cpp@166@ATOMIC@#pragma omp atomic update@atom_list[j].f[n] += -holder;
./285634219/force_kernel.cpp@191@ATOMIC@#pragma omp atomic update@atom_list[j].f[n] += -holder;
./285634219/force_kernel.cpp@203@ATOMIC@#pragma omp atomic update@atom_list[i].f[n] += af[n];
./285634219/force_kernel.cpp@311@ATOMIC@#pragma omp atomic update@atom_list[i].f[n] += af[n];
./285634219/force_kernel.cpp@313@ATOMIC@#pragma omp atomic update@atom_list[j].f[n] += -af[n];
./285634219/kernel_functions.hpp@73@ATOMIC@#pragma omp atomic update@counts[18]++;
./285634219/kernel_functions.hpp@77@ATOMIC@#pragma omp atomic update@counts[19]++;
./285634219/kernel_functions.hpp@81@ATOMIC@#pragma omp atomic update@counts[20]++;
./285634219/kernel_functions.hpp@86@ATOMIC@#pragma omp atomic update@counts[21]++;
./285634219/kernel_functions.hpp@90@ATOMIC@#pragma omp atomic update@counts[22]++;
./285634219/kernel_functions.hpp@94@ATOMIC@#pragma omp atomic update@counts[23]++;
./285634219/kernel_functions.hpp@102@ATOMIC@#pragma omp atomic update@counts[0]++;
./285634219/kernel_functions.hpp@106@ATOMIC@#pragma omp atomic update@counts[1]++;
./285634219/kernel_functions.hpp@110@ATOMIC@#pragma omp atomic update@counts[2]++;
./285634219/kernel_functions.hpp@116@ATOMIC@#pragma omp atomic update@counts[3]++;
./285634219/kernel_functions.hpp@120@ATOMIC@#pragma omp atomic update@counts[4]++;
./285634219/kernel_functions.hpp@124@ATOMIC@#pragma omp atomic update@counts[5]++;
./285634219/kernel_functions.hpp@129@ATOMIC@#pragma omp atomic update@counts[6]++;
./285634219/kernel_functions.hpp@133@ATOMIC@#pragma omp atomic update@counts[7]++;
./285634219/kernel_functions.hpp@137@ATOMIC@#pragma omp atomic update@counts[8]++;
./285634219/kernel_functions.hpp@141@ATOMIC@#pragma omp atomic update@counts[9]++;
./285634219/kernel_functions.hpp@145@ATOMIC@#pragma omp atomic update@counts[10]++;
./285634219/kernel_functions.hpp@149@ATOMIC@#pragma omp atomic update@counts[11]++;
./285634219/kernel_functions.hpp@154@ATOMIC@#pragma omp atomic update@counts[12]++;
./285634219/kernel_functions.hpp@158@ATOMIC@#pragma omp atomic update@counts[13]++;
./285634219/kernel_functions.hpp@162@ATOMIC@#pragma omp atomic update@counts[14]++;
./285634219/kernel_functions.hpp@167@ATOMIC@#pragma omp atomic update@counts[15]++;
./285634219/kernel_functions.hpp@171@ATOMIC@#pragma omp atomic update@counts[16]++;
./285634219/kernel_functions.hpp@175@ATOMIC@#pragma omp atomic update@counts[17]++;
./285634219/kernel_functions.hpp@181@ATOMIC@#pragma omp atomic update@counts[24]++;
./285634219/kernel_functions.hpp@185@ATOMIC@#pragma omp atomic update@counts[25]++;
./285634219/kernel_functions.hpp@189@ATOMIC@#pragma omp atomic update@counts[26]++;
./285634219/kernel_functions.hpp@194@ATOMIC@#pragma omp atomic update@counts[39]++;
./285634219/kernel_functions.hpp@198@ATOMIC@#pragma omp atomic update@counts[40]++;
./285634219/kernel_functions.hpp@202@ATOMIC@#pragma omp atomic update@counts[41]++;
./285634219/kernel_functions.hpp@208@ATOMIC@#pragma omp atomic update@counts[27]++;
./285634219/kernel_functions.hpp@212@ATOMIC@#pragma omp atomic update@counts[28]++;
./285634219/kernel_functions.hpp@216@ATOMIC@#pragma omp atomic update@counts[29]++;
./285634219/kernel_functions.hpp@221@ATOMIC@#pragma omp atomic update@counts[42]++;
./285634219/kernel_functions.hpp@225@ATOMIC@#pragma omp atomic update@counts[43]++;
./285634219/kernel_functions.hpp@229@ATOMIC@#pragma omp atomic update@counts[44]++;
./285634219/kernel_functions.hpp@235@ATOMIC@#pragma omp atomic update@counts[30]++;
./285634219/kernel_functions.hpp@239@ATOMIC@#pragma omp atomic update@counts[31]++;
./285634219/kernel_functions.hpp@243@ATOMIC@#pragma omp atomic update@counts[32]++;
./285634219/kernel_functions.hpp@248@ATOMIC@#pragma omp atomic update@counts[45]++;
./285634219/kernel_functions.hpp@252@ATOMIC@#pragma omp atomic update@counts[46]++;
./285634219/kernel_functions.hpp@256@ATOMIC@#pragma omp atomic update@counts[47]++;
./285634219/kernel_functions.hpp@262@ATOMIC@#pragma omp atomic update@counts[33]++;
./285634219/kernel_functions.hpp@266@ATOMIC@#pragma omp atomic update@counts[34]++;
./285634219/kernel_functions.hpp@270@ATOMIC@#pragma omp atomic update@counts[35]++;
./285634219/kernel_functions.hpp@275@ATOMIC@#pragma omp atomic update@counts[48]++;
./285634219/kernel_functions.hpp@279@ATOMIC@#pragma omp atomic update@counts[49]++;
./285634219/kernel_functions.hpp@283@ATOMIC@#pragma omp atomic update@counts[50]++;
./285634219/kernel_functions.hpp@289@ATOMIC@#pragma omp atomic update@counts[36]++;
./285634219/kernel_functions.hpp@293@ATOMIC@#pragma omp atomic update@counts[37]++;
./285634219/kernel_functions.hpp@297@ATOMIC@#pragma omp atomic update@counts[38]++;
./285634219/kernel_functions.hpp@302@ATOMIC@#pragma omp atomic update@counts[51]++;
./285634219/kernel_functions.hpp@306@ATOMIC@#pragma omp atomic update@counts[52]++;
./285634219/kernel_functions.hpp@310@ATOMIC@#pragma omp atomic update@counts[53]++;
./285634219/kernel_functions.hpp@386@ATOMIC@#pragma omp atomic update@counts[0]++;
./285634219/kernel_functions.hpp@390@ATOMIC@#pragma omp atomic update@counts[1]++;
./285634219/kernel_functions.hpp@394@ATOMIC@#pragma omp atomic update@counts[2]++;
./285634219/kernel_functions.hpp@401@ATOMIC@#pragma omp atomic update@counts[12]++;
./285634219/kernel_functions.hpp@405@ATOMIC@#pragma omp atomic update@counts[13]++;
./285634219/kernel_functions.hpp@409@ATOMIC@#pragma omp atomic update@counts[14]++;
./285634219/kernel_functions.hpp@413@ATOMIC@#pragma omp atomic update@counts[15]++;
./285634219/kernel_functions.hpp@417@ATOMIC@#pragma omp atomic update@counts[16]++;
./285634219/kernel_functions.hpp@421@ATOMIC@#pragma omp atomic update@counts[17]++;
./285634219/kernel_functions.hpp@427@ATOMIC@#pragma omp atomic update@counts[3]++;
./285634219/kernel_functions.hpp@431@ATOMIC@#pragma omp atomic update@counts[4]++;
./285634219/kernel_functions.hpp@435@ATOMIC@#pragma omp atomic update@counts[5]++;
./285634219/kernel_functions.hpp@439@ATOMIC@#pragma omp atomic update@counts[6]++;
./285634219/kernel_functions.hpp@443@ATOMIC@#pragma omp atomic update@counts[7]++;
./285634219/kernel_functions.hpp@447@ATOMIC@#pragma omp atomic update@counts[8]++;
./285634219/kernel_functions.hpp@451@ATOMIC@#pragma omp atomic update@counts[9]++;
./285634219/kernel_functions.hpp@455@ATOMIC@#pragma omp atomic update@counts[10]++;
./285634219/kernel_functions.hpp@459@ATOMIC@#pragma omp atomic update@counts[11]++;
./285634219/kernel_functions.hpp@466@ATOMIC@#pragma omp atomic update@counts[18]++;
./285634219/kernel_functions.hpp@470@ATOMIC@#pragma omp atomic update@counts[19]++;
./285634219/kernel_functions.hpp@474@ATOMIC@#pragma omp atomic update@counts[20]++;
./285634219/kernel_functions.hpp@478@ATOMIC@#pragma omp atomic update@counts[21]++;
./285634219/kernel_functions.hpp@482@ATOMIC@#pragma omp atomic update@counts[22]++;
./285634219/kernel_functions.hpp@486@ATOMIC@#pragma omp atomic update@counts[23]++;
./285634219/kernel_functions.hpp@493@ATOMIC@#pragma omp atomic update@counts[24]++;
./285634219/kernel_functions.hpp@497@ATOMIC@#pragma omp atomic update@counts[25]++;
./285634219/kernel_functions.hpp@501@ATOMIC@#pragma omp atomic update@counts[26]++;
./285634219/kernel_functions.hpp@505@ATOMIC@#pragma omp atomic update@counts[39]++;
./285634219/kernel_functions.hpp@509@ATOMIC@#pragma omp atomic update@counts[40]++;
./285634219/kernel_functions.hpp@513@ATOMIC@#pragma omp atomic update@counts[41]++;
./285634219/kernel_functions.hpp@519@ATOMIC@#pragma omp atomic update@counts[27]++;
./285634219/kernel_functions.hpp@523@ATOMIC@#pragma omp atomic update@counts[28]++;
./285634219/kernel_functions.hpp@527@ATOMIC@#pragma omp atomic update@counts[29]++;
./285634219/kernel_functions.hpp@531@ATOMIC@#pragma omp atomic update@counts[42]++;
./285634219/kernel_functions.hpp@535@ATOMIC@#pragma omp atomic update@counts[43]++;
./285634219/kernel_functions.hpp@539@ATOMIC@#pragma omp atomic update@counts[44]++;
./285634219/kernel_functions.hpp@545@ATOMIC@#pragma omp atomic update@counts[30]++;
./285634219/kernel_functions.hpp@549@ATOMIC@#pragma omp atomic update@counts[31]++;
./285634219/kernel_functions.hpp@553@ATOMIC@#pragma omp atomic update@counts[32]++;
./285634219/kernel_functions.hpp@557@ATOMIC@#pragma omp atomic update@counts[45]++;
./285634219/kernel_functions.hpp@561@ATOMIC@#pragma omp atomic update@counts[46]++;
./285634219/kernel_functions.hpp@565@ATOMIC@#pragma omp atomic update@counts[47]++;
./285634219/kernel_functions.hpp@571@ATOMIC@#pragma omp atomic update@counts[33]++;
./285634219/kernel_functions.hpp@575@ATOMIC@#pragma omp atomic update@counts[34]++;
./285634219/kernel_functions.hpp@579@ATOMIC@#pragma omp atomic update@counts[35]++;
./285634219/kernel_functions.hpp@583@ATOMIC@#pragma omp atomic update@counts[48]++;
./285634219/kernel_functions.hpp@587@ATOMIC@#pragma omp atomic update@counts[49]++;
./285634219/kernel_functions.hpp@591@ATOMIC@#pragma omp atomic update@counts[50]++;
./285634219/kernel_functions.hpp@597@ATOMIC@#pragma omp atomic update@counts[36]++;
./285634219/kernel_functions.hpp@601@ATOMIC@#pragma omp atomic update@counts[37]++;
./285634219/kernel_functions.hpp@605@ATOMIC@#pragma omp atomic update@counts[38]++;
./285634219/kernel_functions.hpp@609@ATOMIC@#pragma omp atomic update@counts[51]++;
./285634219/kernel_functions.hpp@613@ATOMIC@#pragma omp atomic update@counts[52]++;
./285634219/kernel_functions.hpp@617@ATOMIC@#pragma omp atomic update@counts[53]++;
./117122510/rcm_kernels.cpp@116@ATOMIC@#pragma omp atomic update@++(*threads_working);
./117122510/rcm_kernels.cpp@138@ATOMIC@#pragma omp atomic update@++(*threads_working);
./117122510/rcm_kernels.cpp@281@ATOMIC@#pragma omp atomic update@--threads_working;
./291746844/atomic_construct.c@14@ATOMIC@#pragma omp atomic write@x[i] = x[0]*2*i;
./161696083/test_flush_seq_cst.c@19@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_flush_seq_cst.c@43@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_calloc_host.c@20@ATOMIC@#pragma omp atomic write@not_init_to_zero = 1;
./161696083/test_calloc_host.c@31@ATOMIC@#pragma omp atomic write@not_correct_updated_values = 1;
./161696083/test_metadirective_arch_is_nvidia.c@22@ATOMIC@#pragma omp atomic write@target_device_num = omp_get_device_num();
./161696083/test_target_aligned_calloc.c@27@ATOMIC@#pragma omp atomic write@not_correct_array_values = 1;
./161696083/test_target_requires_atomic_default_mem_order_acq_rel.c@17@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_requires_atomic_default_mem_order_seq_cst.c@18@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_requires_atomic_default_mem_order_relaxed.c@19@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_aligned_calloc.c@25@ATOMIC@#pragma omp atomic write@not_correct_array_values = 1;
./161696083/test_target_requires_atomic_default_mem_order_relaxed.c@18@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_flush_no_memory_order_clause.c@14@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_target_calloc.c@22@ATOMIC@#pragma omp atomic write@not_init_to_zero = 1;
./161696083/test_target_calloc.c@33@ATOMIC@#pragma omp atomic write@not_correct_updated_values = 1;
./161696083/test_target_teams_distribute_shared.c@18@ATOMIC@#pragma omp atomic write@num_teams = omp_get_num_teams();
./161696083/test_requires_atomic_default_mem_order_acq_rel.c@18@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_target_teams_distribute_parallel_for_map_from.c@17@ATOMIC@#pragma omp atomic write@scalar = 20;
./161696083/test_omp_target_aligned_alloc_device.c@30@ATOMIC@#pragma omp atomic write@not_correct_array_values = 1;
./161696083/test_target_requires_atomic_default_mem_order_seq_cst.c@17@ATOMIC@#pragma omp atomic write@y = 1;
./161696083/test_target_teams_distribute_parallel_for_map_default.c@24@ATOMIC@#pragma omp atomic write@scalar2 = j;
./161696083/test_metadirective_arch_nvidia_or_amd.c@24@ATOMIC@#pragma omp atomic write@initial_device = omp_is_initial_device();
./161696083/test_target_teams_distribute_parallel_for_map_tofrom.c@29@ATOMIC@#pragma omp atomic write@scalar_from = 13;
./161696083/test_target_teams_distribute_parallel_for.c@24@ATOMIC@#pragma omp atomic write@num_teams = omp_get_num_teams();
./285965062/pageRank.c@2219@ATOMIC@#pragma omp atomic write@workListNext[u] = 1;
./285965062/pageRank.c@2534@ATOMIC@#pragma omp atomic write@stats->pageRanks[v] = newPageRank;
./285965062/pageRank.c@3125@ATOMIC@#pragma omp atomic write@workListNext[u] = 1;
./285965062/pageRank.c@3359@ATOMIC@#pragma omp atomic write@stats->pageRanks[v] = newPageRank;
./285965062/pageRank.c@3936@ATOMIC@#pragma omp atomic write@workListNext[u] = 1;
./285965062/pageRank.c@4174@ATOMIC@#pragma omp atomic write@stats->pageRanks[v] = newPageRank;
./528666630/ompmat.c@123@ATOMIC@#pragma omp atomic write@STEADY=0;
./228656264/atomic-8.C@24@ATOMIC@#pragma omp atomic write@x = 0;
./228656264/member-7.C@97@ATOMIC@#pragma omp atomic write@A::b = 8;
./228656264/member-7.C@99@ATOMIC@#pragma omp atomic write@T<Q>::t = 9;
./228656264/atomic-11.C@13@ATOMIC@#pragma omp atomic write@x = 17;
./228656264/atomic-11.C@104@ATOMIC@#pragma omp atomic write@y = 17.5f;
./228656264/atomic-14.C@24@ATOMIC@#pragma omp atomic write@x = 0;
./228656264/atomic-13.C@13@ATOMIC@#pragma omp atomic write@l = 1 + i + 6 * 1;
./228656264/atomic-13.C@15@ATOMIC@#pragma omp atomic write@j = 170 - 170 + m + 1 * 7;
./228656264/doacross-1.C@14@ATOMIC@#pragma omp atomic write@a[i] = 1;
./228656264/doacross-1.C@24@ATOMIC@#pragma omp atomic write@a[i] = 2;
./228656264/doacross-1.C@34@ATOMIC@#pragma omp atomic write@a[i] = 3;
./228656264/doacross-1.C@42@ATOMIC@#pragma omp atomic write@b[i][j][k] = 1;
./228656264/doacross-1.C@54@ATOMIC@#pragma omp atomic write@b[i][j][k] = 2;
./228656264/doacross-1.C@71@ATOMIC@#pragma omp atomic write@b[i][j][k] = 3;
./228656264/doacross-1.C@88@ATOMIC@#pragma omp atomic write@c[i][j][k] = 1;
./228656264/doacross-1.C@102@ATOMIC@#pragma omp atomic write@c[i][j][k] = 2;
./228656264/doacross-1.C@119@ATOMIC@#pragma omp atomic write@c[i][j][k] = 3;
./228656264/atomic-9.C@26@ATOMIC@#pragma omp atomic write@x = 0;
./228656264/atomic-7.C@14@ATOMIC@#pragma omp atomic write@l = 1 + i + 6 * 1;
./228656264/atomic-7.C@16@ATOMIC@#pragma omp atomic write@j = 170 - 170 + m + 1 * 7;
./228656264/task-8.C@11@ATOMIC@#pragma omp atomic write@errval = 1;
./228656264/task-8.C@16@ATOMIC@#pragma omp atomic write@errval = 1;
./228656264/task-8.C@20@ATOMIC@#pragma omp atomic write@errval = 1;
./228656264/task-8.C@26@ATOMIC@#pragma omp atomic write@errval = 1;
./228656264/task-8.C@32@ATOMIC@#pragma omp atomic write@errval = 1;
./228656264/doacross-3.c@16@ATOMIC@#pragma omp atomic write@a[i] = 1;
./228656264/doacross-3.c@26@ATOMIC@#pragma omp atomic write@a[i] = 2;
./228656264/doacross-3.c@36@ATOMIC@#pragma omp atomic write@a[i] = 3;
./228656264/doacross-3.c@44@ATOMIC@#pragma omp atomic write@b[i][j][k] = 1;
./228656264/doacross-3.c@56@ATOMIC@#pragma omp atomic write@b[i][j][k] = 2;
./228656264/doacross-3.c@73@ATOMIC@#pragma omp atomic write@b[i][j][k] = 3;
./228656264/doacross-3.c@90@ATOMIC@#pragma omp atomic write@c[i][j][k] = 1;
./228656264/doacross-3.c@104@ATOMIC@#pragma omp atomic write@c[i][j][k] = 2;
./228656264/doacross-3.c@121@ATOMIC@#pragma omp atomic write@c[i][j][k] = 3;
./228656264/doacross-3.c@129@ATOMIC@#pragma omp atomic write@g[j][k][i] = 1;
./228656264/doacross-3.c@141@ATOMIC@#pragma omp atomic write@g[j][k][i] = 2;
./228656264/doacross-3.c@158@ATOMIC@#pragma omp atomic write@g[j][k][i] = 3;
./228656264/cancel-taskgroup-1.c@17@ATOMIC@#pragma omp atomic write@ret = r;
./228656264/task-5.C@11@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/task-5.C@16@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/task-5.C@20@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/task-5.C@26@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/task-5.C@32@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/atomic-12.C@34@ATOMIC@#pragma omp atomic write@x1 = 0;
./228656264/atomic-12.C@36@ATOMIC@#pragma omp atomic write@x2 = 0;
./228656264/atomic-12.C@38@ATOMIC@#pragma omp atomic write@x3 = 1;
./228656264/atomic-12.C@40@ATOMIC@#pragma omp atomic write@x4 = 1;
./228656264/atomic-12.C@58@ATOMIC@#pragma omp atomic write@x1 = 0;
./228656264/atomic-12.C@60@ATOMIC@#pragma omp atomic write@x2 = 0;
./228656264/atomic-12.C@62@ATOMIC@#pragma omp atomic write@x3 = 1;
./228656264/atomic-12.C@64@ATOMIC@#pragma omp atomic write@x4 = 1;
./228656264/atomic-12.C@86@ATOMIC@#pragma omp atomic write@x3 = 1;
./228656264/atomic-12.C@88@ATOMIC@#pragma omp atomic write@x4 = 1;
./228656264/target-31.c@47@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/target-31.c@51@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/target-31.c@83@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/target-31.c@118@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/target-31.c@122@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/target-31.c@133@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/target-31.c@150@ATOMIC@#pragma omp atomic write@err = 1;
./228656264/doacross-2.c@16@ATOMIC@#pragma omp atomic write@a[i] = 1;
./228656264/doacross-2.c@26@ATOMIC@#pragma omp atomic write@a[i] = 2;
./228656264/doacross-2.c@36@ATOMIC@#pragma omp atomic write@a[i] = 3;
./228656264/doacross-2.c@44@ATOMIC@#pragma omp atomic write@b[i][j][k] = 1;
./228656264/doacross-2.c@56@ATOMIC@#pragma omp atomic write@b[i][j][k] = 2;
./228656264/doacross-2.c@73@ATOMIC@#pragma omp atomic write@b[i][j][k] = 3;
./228656264/doacross-2.c@90@ATOMIC@#pragma omp atomic write@c[i][j][k] = 1;
./228656264/doacross-2.c@104@ATOMIC@#pragma omp atomic write@c[i][j][k] = 2;
./228656264/doacross-2.c@121@ATOMIC@#pragma omp atomic write@c[i][j][k] = 3;
./228656264/doacross-2.c@129@ATOMIC@#pragma omp atomic write@g[j][k][i] = 1;
./228656264/doacross-2.c@141@ATOMIC@#pragma omp atomic write@g[j][k][i] = 2;
./228656264/doacross-2.c@158@ATOMIC@#pragma omp atomic write@g[j][k][i] = 3;
./228656264/member-6.C@94@ATOMIC@#pragma omp atomic write@A::b = 8;
./228656264/member-6.C@96@ATOMIC@#pragma omp atomic write@T::t = 9;
./632337621/atomic_construct.c@17@ATOMIC@#pragma omp atomic write@x[i] = x[0] * 2 * i;
./315333330/member-7.C@97@ATOMIC@#pragma omp atomic write@A::b = 8;
./315333330/member-7.C@99@ATOMIC@#pragma omp atomic write@T<Q>::t = 9;
./315333330/atomic-11.C@13@ATOMIC@#pragma omp atomic write@x = 17;
./315333330/atomic-11.C@104@ATOMIC@#pragma omp atomic write@y = 17.5f;
./315333330/_Atomic-3.c@35@ATOMIC@#pragma omp atomic write@x = 6;
./315333330/_Atomic-3.c@43@ATOMIC@#pragma omp atomic write@p[2] = 6;
./315333330/atomic-14.c@24@ATOMIC@#pragma omp atomic write@x = 0;
./315333330/_Atomic-1.c@83@ATOMIC@#pragma omp atomic write@j = c;
./315333330/task-8.C@11@ATOMIC@#pragma omp atomic write@errval = 1;
./315333330/task-8.C@16@ATOMIC@#pragma omp atomic write@errval = 1;
./315333330/task-8.C@20@ATOMIC@#pragma omp atomic write@errval = 1;
./315333330/task-8.C@26@ATOMIC@#pragma omp atomic write@errval = 1;
./315333330/task-8.C@32@ATOMIC@#pragma omp atomic write@errval = 1;
./315333330/pr69389.c@13@ATOMIC@#pragma omp atomic write@s.b = v;
./315333330/doacross-3.c@16@ATOMIC@#pragma omp atomic write@a[i] = 1;
./315333330/doacross-3.c@26@ATOMIC@#pragma omp atomic write@a[i] = 2;
./315333330/doacross-3.c@36@ATOMIC@#pragma omp atomic write@a[i] = 3;
./315333330/doacross-3.c@44@ATOMIC@#pragma omp atomic write@b[i][j][k] = 1;
./315333330/doacross-3.c@56@ATOMIC@#pragma omp atomic write@b[i][j][k] = 2;
./315333330/doacross-3.c@73@ATOMIC@#pragma omp atomic write@b[i][j][k] = 3;
./315333330/doacross-3.c@90@ATOMIC@#pragma omp atomic write@c[i][j][k] = 1;
./315333330/doacross-3.c@104@ATOMIC@#pragma omp atomic write@c[i][j][k] = 2;
./315333330/doacross-3.c@121@ATOMIC@#pragma omp atomic write@c[i][j][k] = 3;
./315333330/doacross-3.c@129@ATOMIC@#pragma omp atomic write@g[j][k][i] = 1;
./315333330/doacross-3.c@141@ATOMIC@#pragma omp atomic write@g[j][k][i] = 2;
./315333330/doacross-3.c@158@ATOMIC@#pragma omp atomic write@g[j][k][i] = 3;
./315333330/atomic-13.c@13@ATOMIC@#pragma omp atomic write@l = 1 + i + 6 * 1;
./315333330/atomic-13.c@15@ATOMIC@#pragma omp atomic write@j = 170 - 170 + m + 1 * 7;
./315333330/cancel-taskgroup-1.c@17@ATOMIC@#pragma omp atomic write@ret = r;
./315333330/pr67495.c@9@ATOMIC@#pragma omp atomic write@(float) a = b;
./315333330/pr67495.c@23@ATOMIC@#pragma omp atomic write@(int) a = b;
./315333330/task-5.C@11@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/task-5.C@16@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/task-5.C@20@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/task-5.C@26@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/task-5.C@32@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/pr59467.c@11@ATOMIC@#pragma omp atomic write@x = 6;
./315333330/pr59467.c@24@ATOMIC@#pragma omp atomic write@v = 6;
./315333330/pr59467.c@37@ATOMIC@#pragma omp atomic write@x = 6;
./315333330/pr59467.c@50@ATOMIC@#pragma omp atomic write@x = 6;
./315333330/pr59467.c@62@ATOMIC@#pragma omp atomic write@v = 6;
./315333330/atomic-12.c@34@ATOMIC@#pragma omp atomic write@x1 = 0;
./315333330/atomic-12.c@36@ATOMIC@#pragma omp atomic write@x2 = 0;
./315333330/atomic-12.c@38@ATOMIC@#pragma omp atomic write@x3 = 1;
./315333330/atomic-12.c@40@ATOMIC@#pragma omp atomic write@x4 = 1;
./315333330/atomic-12.c@58@ATOMIC@#pragma omp atomic write@x1 = 0;
./315333330/atomic-12.c@60@ATOMIC@#pragma omp atomic write@x2 = 0;
./315333330/atomic-12.c@62@ATOMIC@#pragma omp atomic write@x3 = 1;
./315333330/atomic-12.c@64@ATOMIC@#pragma omp atomic write@x4 = 1;
./315333330/atomic-12.c@86@ATOMIC@#pragma omp atomic write@x3 = 1;
./315333330/atomic-12.c@88@ATOMIC@#pragma omp atomic write@x4 = 1;
./315333330/atomic-7.c@14@ATOMIC@#pragma omp atomic write@l = 1 + i + 6 * 1;
./315333330/atomic-7.c@16@ATOMIC@#pragma omp atomic write@j = 170 - 170 + m + 1 * 7;
./315333330/atomic-9.c@26@ATOMIC@#pragma omp atomic write@x = 0;
./315333330/target-31.c@47@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/target-31.c@51@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/target-31.c@83@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/target-31.c@118@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/target-31.c@122@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/target-31.c@133@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/target-31.c@150@ATOMIC@#pragma omp atomic write@err = 1;
./315333330/doacross-2.c@16@ATOMIC@#pragma omp atomic write@a[i] = 1;
./315333330/doacross-2.c@26@ATOMIC@#pragma omp atomic write@a[i] = 2;
./315333330/doacross-2.c@36@ATOMIC@#pragma omp atomic write@a[i] = 3;
./315333330/doacross-2.c@44@ATOMIC@#pragma omp atomic write@b[i][j][k] = 1;
./315333330/doacross-2.c@56@ATOMIC@#pragma omp atomic write@b[i][j][k] = 2;
./315333330/doacross-2.c@73@ATOMIC@#pragma omp atomic write@b[i][j][k] = 3;
./315333330/doacross-2.c@90@ATOMIC@#pragma omp atomic write@c[i][j][k] = 1;
./315333330/doacross-2.c@104@ATOMIC@#pragma omp atomic write@c[i][j][k] = 2;
./315333330/doacross-2.c@121@ATOMIC@#pragma omp atomic write@c[i][j][k] = 3;
./315333330/doacross-2.c@129@ATOMIC@#pragma omp atomic write@g[j][k][i] = 1;
./315333330/doacross-2.c@141@ATOMIC@#pragma omp atomic write@g[j][k][i] = 2;
./315333330/doacross-2.c@158@ATOMIC@#pragma omp atomic write@g[j][k][i] = 3;
./315333330/atomic-8.c@24@ATOMIC@#pragma omp atomic write@x = 0;
./315333330/member-6.C@94@ATOMIC@#pragma omp atomic write@A::b = 8;
./315333330/member-6.C@96@ATOMIC@#pragma omp atomic write@T::t = 9;
./315333330/doacross-1.c@14@ATOMIC@#pragma omp atomic write@a[i] = 1;
./315333330/doacross-1.c@24@ATOMIC@#pragma omp atomic write@a[i] = 2;
./315333330/doacross-1.c@34@ATOMIC@#pragma omp atomic write@a[i] = 3;
./315333330/doacross-1.c@42@ATOMIC@#pragma omp atomic write@b[i][j][k] = 1;
./315333330/doacross-1.c@54@ATOMIC@#pragma omp atomic write@b[i][j][k] = 2;
./315333330/doacross-1.c@71@ATOMIC@#pragma omp atomic write@b[i][j][k] = 3;
./315333330/doacross-1.c@88@ATOMIC@#pragma omp atomic write@c[i][j][k] = 1;
./315333330/doacross-1.c@102@ATOMIC@#pragma omp atomic write@c[i][j][k] = 2;
./315333330/doacross-1.c@119@ATOMIC@#pragma omp atomic write@c[i][j][k] = 3;
./408823577/06b_assign_work.c@59@ATOMIC@#pragma omp atomic write@results[fidx] = result;
./408823577/02_sections_nested_irregular_wrong.c@127@ATOMIC@#pragma omp atomic write@semaphore = last;
./408823577/02_sections_nested_irregular.c@147@ATOMIC@#pragma omp atomic write@semaphore = last;
./271946455/stddev.c@36@ATOMIC@#pragma omp atomic write@std_dev[p] = sqrt(std_dev[p]);
./271946455/mean.c@25@ATOMIC@#pragma omp atomic write@sum = sum / 100;
./271946455/symm.c@21@ATOMIC@#pragma omp atomic write@alpha = 1.500000;
./271946455/symm.c@23@ATOMIC@#pragma omp atomic write@beta = 1.200000;
./271946455/symm.c@28@ATOMIC@#pragma omp atomic write@temp2 = 0;
./271946455/symm.c@38@ATOMIC@#pragma omp atomic write@C[i][j] = beta * C[i][j] + alpha * B[i][j] * A[i][i] + alpha * temp2;
./271946455/cholesky.c@24@ATOMIC@#pragma omp atomic write@A[i][j] = A[i][j] - A[i][k] * A[j][k];
./271946455/cholesky.c@27@ATOMIC@#pragma omp atomic write@A[i][j] = A[i][j] / A[j][j];
./271946455/cholesky.c@31@ATOMIC@#pragma omp atomic write@A[i][i] = A[i][i] - A[i][k] * A[i][k];
./271946455/cholesky.c@34@ATOMIC@#pragma omp atomic write@A[i][i] = sqrt(A[i][i]);
./271946455/ludcmp.c@24@ATOMIC@#pragma omp atomic write@w = A[i][j];
./271946455/ludcmp.c@27@ATOMIC@#pragma omp atomic write@w = w - (A[i][k] * A[k][j]);
./271946455/ludcmp.c@30@ATOMIC@#pragma omp atomic write@A[i][j] = w / A[j][j];
./271946455/ludcmp.c@34@ATOMIC@#pragma omp atomic write@w = A[i][j];
./271946455/ludcmp.c@37@ATOMIC@#pragma omp atomic write@w = w - (A[i][k] * A[k][j]);
./271946455/ludcmp.c@40@ATOMIC@#pragma omp atomic write@A[i][j] = w;
./271946455/ludcmp.c@46@ATOMIC@#pragma omp atomic write@w = b[i];
./271946455/ludcmp.c@49@ATOMIC@#pragma omp atomic write@w = w - A[i][j] * y[j];
./271946455/ludcmp.c@52@ATOMIC@#pragma omp atomic write@y[i] = w;
./271946455/ludcmp.c@57@ATOMIC@#pragma omp atomic write@w = y[4000 - 1 - i];
./271946455/ludcmp.c@60@ATOMIC@#pragma omp atomic write@w = w - A[3999 - i][j] * x[j];
./271946455/ludcmp.c@63@ATOMIC@#pragma omp atomic write@x[4000 - 1 - i] = w / A[4000 - 1 - i][4000 - 1 - i];
./271946455/trisolv.c@22@ATOMIC@#pragma omp atomic write@x[i] = b[i];
./271946455/trisolv.c@25@ATOMIC@#pragma omp atomic write@x[i] = x[i] - L[i][j] * x[j];
./271946455/trisolv.c@28@ATOMIC@#pragma omp atomic write@x[i] = x[i] / L[i][i];
./271946455/gesummv.c@21@ATOMIC@#pragma omp atomic write@alpha = 1.500000;
./271946455/gesummv.c@23@ATOMIC@#pragma omp atomic write@beta = 1.200000;
./271946455/gesummv.c@28@ATOMIC@#pragma omp atomic write@tmp[i] = x[j] * A[i][j] + tmp[i];
./271946455/gesummv.c@30@ATOMIC@#pragma omp atomic write@y[i] = x[j] * B[i][j] + y[i];
./271946455/gesummv.c@33@ATOMIC@#pragma omp atomic write@y[i] = alpha * tmp[i] + beta * y[i];
./271946455/doitgen.c@31@ATOMIC@#pragma omp atomic write@A[i][j][k] = sum[k];
./271946455/2mm.c@21@ATOMIC@#pragma omp atomic write@alpha = 1.500000;
./271946455/2mm.c@23@ATOMIC@#pragma omp atomic write@beta = 1.200000;
./271946455/2mm.c@37@ATOMIC@#pragma omp atomic write@d[i][j] = d[i][j] * beta;
./271946455/syr2k.c@21@ATOMIC@#pragma omp atomic write@alpha = 1.500000;
./271946455/syr2k.c@23@ATOMIC@#pragma omp atomic write@beta = 1.200000;
./271946455/syr2k.c@28@ATOMIC@#pragma omp atomic write@C[i][j] = C[i][j] * beta;
./271946455/gramschmidt.c@27@ATOMIC@#pragma omp atomic write@R[k][k] = sqrt(norm);
./271946455/gramschmidt.c@30@ATOMIC@#pragma omp atomic write@Q[i][k] = A[i][k] / R[k][k];
./271946455/gramschmidt.c@39@ATOMIC@#pragma omp atomic write@A[i][j] = A[i][j] - Q[i][k] * R[k][j];
./271946455/gemm.c@21@ATOMIC@#pragma omp atomic write@alpha = 1.500000;
./271946455/gemm.c@23@ATOMIC@#pragma omp atomic write@beta = 1.200000;
./271946455/gemm.c@28@ATOMIC@#pragma omp atomic write@C[i][j] = C[i][j] * beta;
./271946455/covariance.c@35@ATOMIC@#pragma omp atomic write@cov[j][i] = cov[i][j];
./271946455/correlation.c@47@ATOMIC@#pragma omp atomic write@std_dev[p] = sqrt(std_dev[p]);
./271946455/correlation.c@53@ATOMIC@#pragma omp atomic write@corr[i][j] = cov[i][j] / (std_dev[i] * std_dev[j]);
./271946455/jacobi-1d.c@23@ATOMIC@#pragma omp atomic write@B[i] = 0.333330 * (A[i] + A[i - 1] + A[i + 1]);
./271946455/jacobi-1d.c@27@ATOMIC@#pragma omp atomic write@A[i] = 0.333330 * (B[i] + B[i - 1] + B[i + 1]);
./271946455/seidel-2d.c@24@ATOMIC@#pragma omp atomic write@A_t[i][j] =
./271946455/seidel-2d.c@32@ATOMIC@#pragma omp atomic write@A[i][j] = A_t[i][j];
./271946455/jacobi-2d.c@24@ATOMIC@#pragma omp atomic write@B[i][j] = 0.200000 * (A[i][j] + A[i][j - 1] + A[i][1 + j] + A[1 + i][j] + A[i - 1][j]);
./271946455/jacobi-2d.c@30@ATOMIC@#pragma omp atomic write@A[p][q] = 0.200000 * (B[p][q] + B[p][q - 1] + B[p][1 + q] + B[1 + p][q] + B[p - 1][q]);
./271946455/lu.c@24@ATOMIC@#pragma omp atomic write@A[i][j] = A[i][j] - A[i][k] * A[k][j];
./271946455/lu.c@27@ATOMIC@#pragma omp atomic write@A[i][j] = A[i][j] / A[j][j];
./271946455/lu.c@32@ATOMIC@#pragma omp atomic write@A[i][j] = A[i][j] - A[i][k] * A[k][j];
./271946455/heat-3d.c@25@ATOMIC@#pragma omp atomic write@B[i][j][k] =
./271946455/heat-3d.c@36@ATOMIC@#pragma omp atomic write@A[i][j][k] =
./271946455/trmm.c@20@ATOMIC@#pragma omp atomic write@alpha = 1.500000;
./271946455/trmm.c@29@ATOMIC@#pragma omp atomic write@B[i][j] = alpha * B[i][j];
./271946455/fdtd-2d.c@24@ATOMIC@#pragma omp atomic write@ey[0][j] = _fict_[t];
./271946455/fdtd-2d.c@29@ATOMIC@#pragma omp atomic write@ey[i][j] = ey[i][j] - 0.500000 * (hz[i][j] - hz[i - 1][j]);
./271946455/fdtd-2d.c@35@ATOMIC@#pragma omp atomic write@ex[i][j] = ex[i][j] - 0.500000 * (hz[i][j] - hz[i][j - 1]);
./271946455/fdtd-2d.c@41@ATOMIC@#pragma omp atomic write@hz[i][j] = hz[i][j] - 0.700000 * (ex[i][j + 1] - ex[i][j] + ey[i + 1][j] - ey[i][j]);
./271946455/gemver.c@22@ATOMIC@#pragma omp atomic write@alpha = 1.500000;
./271946455/gemver.c@24@ATOMIC@#pragma omp atomic write@beta = 1.200000;
./271946455/gemver.c@42@ATOMIC@#pragma omp atomic write@x[i] = x[i] + z[i];
./271946455/syrk.c@21@ATOMIC@#pragma omp atomic write@alpha = 1.500000;
./271946455/syrk.c@23@ATOMIC@#pragma omp atomic write@beta = 1.200000;
./271946455/syrk.c@28@ATOMIC@#pragma omp atomic write@C[i][j] = C[i][j] * beta;
./92494521/DRB143-acquirerelease-orig-no.c@12@ATOMIC@#pragma omp atomic write@y = 1;
./92494521/DRB142-acquirerelease-orig-yes.c@11@ATOMIC@#pragma omp atomic write@y = 1;
./242248042/wrongPercolation.c@12@ATOMIC@#pragma omp atomic write@shared = 10;
./242248042/wrongPercolation.c@16@ATOMIC@#pragma omp atomic write@shared = 0;
./242248042/flowIssueSwap.c@12@ATOMIC@#pragma omp atomic write@Y = 10;
./242248042/livenessCheck.c@9@ATOMIC@#pragma omp atomic write@shared = 1;
./242248042/updateSwap.c@31@ATOMIC@#pragma omp atomic write@Y = 11;
./242248042/simplest.c@7@ATOMIC@#pragma omp atomic write@x = 0;
./242248042/fenceIssue.c@10@ATOMIC@#pragma omp atomic write@Y = 1;
./405671279/solver-omp-gausseidel.c@58@ATOMIC@#pragma omp atomic write@mat[blocki] = mat[blocki] + 1;
./405671279/solver-omp-optional2.c@59@ATOMIC@#pragma omp atomic write@mat[blocki] = mat[blocki] + 1;
./228117517/pageRank.c@1836@ATOMIC@#pragma omp atomic write@workListNext[u] = 1;
./228117517/pageRank.c@2073@ATOMIC@#pragma omp atomic write@stats->pageRanks[v] = newPageRank;
./228117517/pageRank.c@2645@ATOMIC@#pragma omp atomic write@workListNext[u] = 1;
./228117517/pageRank.c@2879@ATOMIC@#pragma omp atomic write@stats->pageRanks[v] = newPageRank;
./228117517/pageRank.c@3456@ATOMIC@#pragma omp atomic write@workListNext[u] = 1;
./228117517/pageRank.c@3694@ATOMIC@#pragma omp atomic write@stats->pageRanks[v] = newPageRank;
./83303575/ScanSky.c@83@ATOMIC@#pragma omp atomic write@matrixIndex[contIndex++] = i*(columns)+j;
./352144340/backsub_par.c@57@ATOMIC@#pragma omp atomic write@flag[i] = 1;
./385714785/sieve.c@24@ATOMIC@#pragma omp atomic write@vector[j] = 0;
./134549171/Prod_cons_2.c@48@ATOMIC@#pragma omp atomic write@flag = 1;
./546806621/omp_atomic.c@60@ATOMIC@#pragma omp atomic write@maxval = numbers[i];
./245904983/Matrix.h@1026@ATOMIC@#pragma omp atomic write@res = false;
./399664768/graph.hpp@344@ATOMIC@#pragma omp atomic write@mate_[x] = x_max_edge.tail_;
./399664768/graph.hpp@374@ATOMIC@#pragma omp atomic write@matched_[x] = '1';
./399664768/graph.hpp@377@ATOMIC@#pragma omp atomic write@matched_[y] = '1';
./399664768/graph.hpp@421@ATOMIC@#pragma omp atomic write@mate_[v] = max_edge.tail_;
./399664768/graph.hpp@451@ATOMIC@#pragma omp atomic write@matched_[u] = '1';
./399664768/graph.hpp@454@ATOMIC@#pragma omp atomic write@matched_[v] = '1';
./74558351/gBAOABLangevinIntegrator.hpp@326@ATOMIC@#pragma omp atomic write@corrected = true;
./74558351/gBAOABLangevinIntegrator.hpp@398@ATOMIC@#pragma omp atomic write@corrected = true;
./345031193/main1.cpp@137@ATOMIC@#pragma omp atomic write@norm = 0;
./345031193/main1.cpp@145@ATOMIC@#pragma omp atomic write@norm = sqrt(norm);
./265291887/Matrix.h@1045@ATOMIC@#pragma omp atomic write@res = false;
./116842157/sqs.cpp@326@ATOMIC@#pragma omp atomic write@best_objective = global_best_objective;
./116842157/sqs.cpp@348@ATOMIC@#pragma omp atomic write@best_objective = objective_local;
./77227085/VC5Decompressor.cpp@563@ATOMIC@#pragma omp atomic write@"#endif
exceptionThrown = true;
}
}
}
}

VC5Decompressor::Wavelet::LowPassBand::LowPassBand(Wavelet& wavelet_,
ByteStream bs_,
uint16_t lowpassPrecision_)"
./285634219/sptrsv_syncfree.cpp@25@ATOMIC@#pragma omp atomic write@*vaddr = value;
./117122510/rcm_kernels.cpp@569@ATOMIC@#pragma omp atomic write@levels[neighbour] = level_processed;
./117122510/rcm_kernels.cpp@585@ATOMIC@#pragma omp atomic write@perm[base_write_offset + i] = valid_neighbours[i];
./161696083/test_atomic_fail_relaxed.c@16@ATOMIC@#pragma omp atomic write release@x = 10;
./161696083/test_atomic_fail_acquire.c@16@ATOMIC@#pragma omp atomic write release@x = 10;
./161696083/test_atomic_acquire_release.c@16@ATOMIC@#pragma omp atomic write release@y = 1;
./161696083/test_atomic_fail_seq_cst.c@16@ATOMIC@#pragma omp atomic write release@x = 10;
./315333330/c-parser.c@11537@ATOMIC@"c_parser_error (parser, ""invalid form of %<#pragma omp atomic%>"");"@goto saw_error;
./315333330/c-parser.c@11587@ATOMIC@"error (""%<#pragma omp atomic capture%> uses two different """@"""expressions for memory"");
stmt = error_mark_node;
}
else
stmt = c_finish_omp_atomic (loc, code, opcode, lhs, rhs, v, lhs1, rhs1,
swapped, seq_cst);
if (stmt != error_mark_node)
add_stmt (stmt);
if (!structured_block)
c_parser_skip_until_found (parser, CPP_SEMICOLON, ""expected %<;%>"");"
./315333330/semantics.c@6504@ATOMIC@"error (""%<#pragma omp atomic capture%> uses two different """@"""expressions for memory"");
return;
}
if (lhs1 && !cp_tree_equal (lhs, lhs1))
{
if (code == OMP_ATOMIC)
error (""%<#pragma omp atomic update%> uses two different ""
""expressions for memory"");
else
error (""%<#pragma omp atomic capture%> uses two different """
./315333330/semantics.c@6514@ATOMIC@"error (""%<#pragma omp atomic capture%> uses two different """@"""expressions for memory"");
return;
}
stmt = c_finish_omp_atomic (input_location, code, opcode, lhs, rhs,
v, lhs1, rhs1, swapped, seq_cst,
processing_template_decl != 0);
if (stmt == error_mark_node)
return;
}
if (processing_template_decl)"
./315333330/semantics.c@6501@ATOMIC@"error (""%<#pragma omp atomic update%> uses two different """@"""expressions for memory"");
else
error (""%<#pragma omp atomic capture%> uses two different ""
""expressions for memory"");
return;
}
if (lhs1 && !cp_tree_equal (lhs, lhs1))
{
if (code == OMP_ATOMIC)
error (""%<#pragma omp atomic update%> uses two different """
./315333330/semantics.c@6511@ATOMIC@"error (""%<#pragma omp atomic update%> uses two different """@"""expressions for memory"");
else
error (""%<#pragma omp atomic capture%> uses two different ""
""expressions for memory"");
return;
}
stmt = c_finish_omp_atomic (input_location, code, opcode, lhs, rhs,
v, lhs1, rhs1, swapped, seq_cst,
processing_template_decl != 0);
if (stmt == error_mark_node)"
./315333330/c-omp.c@121@ATOMIC@"error_at (loc, ""%<_Atomic%> expression in %<#pragma omp atomic%>"");"@return error_mark_node;
./315333330/c-omp.c@259@ATOMIC@"error_at (loc, ""%<#pragma omp atomic capture%> uses two """@"""different variables for memory"");
return error_mark_node;
}
}
if (blhs)
{
x = build3_loc (loc, BIT_FIELD_REF, TREE_TYPE (blhs), x,
bitsize_int (bitsize), bitsize_int (bitpos));
type = TREE_TYPE (blhs);
}"
./315333330/c-omp.c@225@ATOMIC@"error_at (loc, ""%<#pragma omp atomic capture%> uses two different """@"""variables for memory"");
return error_mark_node;
}
if (lhs1
&& lhs1 != orig_lhs
&& TREE_CODE (lhs1) == COMPONENT_REF
&& TREE_CODE (TREE_OPERAND (lhs1, 1)) == FIELD_DECL
&& DECL_C_BIT_FIELD (TREE_OPERAND (lhs1, 1))
&& DECL_BIT_FIELD_REPRESENTATIVE (TREE_OPERAND (lhs1, 1)))
{"
./315333330/c-omp.c@222@ATOMIC@"error_at (loc, ""%<#pragma omp atomic update%> uses two different """@"""variables for memory"");
else
error_at (loc, ""%<#pragma omp atomic capture%> uses two different ""
""variables for memory"");
return error_mark_node;
}
if (lhs1
&& lhs1 != orig_lhs
&& TREE_CODE (lhs1) == COMPONENT_REF
&& TREE_CODE (TREE_OPERAND (lhs1, 1)) == FIELD_DECL"
./315333330/c-omp.c@116@ATOMIC@"error_at (loc, ""invalid expression type for %<#pragma omp atomic%>"");"@return error_mark_node;
./271946455/gen_node.cpp@15@ATOMIC@"m_file << ""#pragma omp atomic write"" << std::endl << this->expression << "";"" << std::endl;"@"if ((this->next).index() == 0) {
auto temp = std::get<0>(this->next);
temp->gen_code(m_file);
} else if ((this->next).index() == 1) {
auto temp = std::get<1>(this->next);
temp->gen_code(m_file);
} else if ((this->next).index() == 2) {
auto temp = std::get<2>(this->next);
temp->gen_code(m_file);
} else if ((this->next).index() == 3) {"
./271946455/sigma_prod.cpp@24@ATOMIC@"m_file << ""#pragma omp atomic"" <<std::endl;"@"m_file << this->LHS << op << this->RHS << "";"" << std::endl;"
./315333330/gimple-pretty-print.c@2003@ATOMIC@"pp_string (buffer, ""#pragma omp atomic_load"");"@"if (gimple_omp_atomic_seq_cst_p (gs))
pp_string (buffer, "" seq_cst"");
if (gimple_omp_atomic_need_value_p (gs))
pp_string (buffer, "" [needed]"");
newline_and_indent (buffer, spc + 2);
dump_generic_node (buffer, gimple_omp_atomic_load_lhs (gs),
spc, flags, false);
pp_space (buffer);
pp_equal (buffer);
pp_space (buffer);"
./315333330/gimple-pretty-print.c@2031@ATOMIC@"pp_string (buffer, ""#pragma omp atomic_store "");"@"if (gimple_omp_atomic_seq_cst_p (gs))
pp_string (buffer, ""seq_cst "");
if (gimple_omp_atomic_need_value_p (gs))
pp_string (buffer, ""[needed] "");
pp_left_paren (buffer);
dump_generic_node (buffer, gimple_omp_atomic_store_val (gs),
spc, flags, false);
pp_right_paren (buffer);
}
}"
./315333330/tree-pretty-print.c@2743@ATOMIC@"pp_string (pp, ""#pragma omp atomic capture"");"@"if (OMP_ATOMIC_SEQ_CST (node))
pp_string (pp, "" seq_cst"");
newline_and_indent (pp, spc + 2);
dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);
pp_space (pp);
pp_equal (pp);
pp_space (pp);
dump_generic_node (pp, TREE_OPERAND (node, 1), spc, flags, false);
break;
case OMP_SINGLE:"
./315333330/tree-pretty-print.c@2734@ATOMIC@"pp_string (pp, ""#pragma omp atomic read"");"@"if (OMP_ATOMIC_SEQ_CST (node))
pp_string (pp, "" seq_cst"");
newline_and_indent (pp, spc + 2);
dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);
pp_space (pp);
break;
case OMP_ATOMIC_CAPTURE_OLD:
case OMP_ATOMIC_CAPTURE_NEW:
pp_string (pp, ""#pragma omp atomic capture"");
if (OMP_ATOMIC_SEQ_CST (node))"
./315333330/tree-pretty-print.c@2723@ATOMIC@"pp_string (pp, ""#pragma omp atomic"");"@"if (OMP_ATOMIC_SEQ_CST (node))
pp_string (pp, "" seq_cst"");
newline_and_indent (pp, spc + 2);
dump_generic_node (pp, TREE_OPERAND (node, 0), spc, flags, false);
pp_space (pp);
pp_equal (pp);
pp_space (pp);
dump_generic_node (pp, TREE_OPERAND (node, 1), spc, flags, false);
break;
case OMP_ATOMIC_READ:"
./209143275/unparser.cpp@359@ATOMIC@"unparser->ofs << ""#pragma omp atomic\n"";"@MAKE_INDENT;
Arquivo@NÃºmero da Linha@Caso@Diretiva OpenMP@Linha Seguinte
