Arquivo@Número da Linha@Caso@Diretiva OpenMP@Linha Seguinte@Número de caracteres@Delcaração@MPI@Estruras de dados@funções
./81815495/apply_periodic_boundary_condition_process.cpp@182@CRITICAL@#pragma omp critical@"{
int current_num_constraint = mrMasterModelPart.GetRootModelPart().NumberOfMasterSlaveConstraints();
auto constraint1 = r_clone_constraint.Create(++current_num_constraint, master_node, r_var_x, rSlaveNode, r_var_x, master_weight * mTransformationMatrixVariable(0,0), constant_x);
auto constraint2 = r_clone_constraint.Create(++current_num_constraint, master_node, r_var_y, rSlaveNode, r_var_x, master_weight * mTransformationMatrixVariable(0,1), constant_x);
auto constraint3 = r_clone_constraint.Create(++current_num_constraint, master_node, r_var_z, rSlaveNode, r_var_x, master_weight * mTransformationMatrixVariable(0,2), constant_x);
auto constraint4 = r_clone_constraint.Create(++current_num_constraint, master_node, r_var_x, rSlaveNode, r_var_y, master_weight * mTransformationMatrixVariable(1,0), constant_y);
auto constraint5 = r_clone_constraint.Create(++current_num_constraint, master_node, r_var_y, rSlaveNode, r_var_y, master_weight * mTransformationMatrixVariable(1,1), constant_y);
auto constraint6 = r_clone_constraint.Create(++current_num_constraint, master_node, r_var_z, rSlaveNode, r_var_y, master_weight * mTransformationMatrixVariable(1,2), constant_y);"@1177@1@@@
./81815495/fast_transfer_between_model_parts_process.cpp@169@CRITICAL@#pragma omp critical@"{
if (num_nodes != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::NODES || mEntity == EntityTransfered::NODESANDELEMENTS || mEntity == EntityTransfered::NODESANDCONDITIONS || mEntity == EntityTransfered::NODESANDGEOMETRIES))
mrDestinationModelPart.AddNodes(nodes_buffer_vector.begin(),nodes_buffer_vector.end());

if (num_elements != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::ELEMENTS || mEntity == EntityTransfered::NODESANDELEMENTS))
mrDestinationModelPart.AddElements(elements_buffer_vector.begin(),elements_buffer_vector.end());

if (num_conditions != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::CONDITIONS || mEntity == EntityTransfered::NODESANDCONDITIONS))
mrDestinationModelPart.AddConditions(conditions_buffer_vector.begin(),conditions_buffer_vector.end());
"@847@@@1@
./81815495/fast_transfer_between_model_parts_process.cpp@306@CRITICAL@#pragma omp critical@"{
if (num_nodes != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::NODES || mEntity == EntityTransfered::NODESANDELEMENTS || mEntity == EntityTransfered::NODESANDCONDITIONS || mEntity == EntityTransfered::NODESANDGEOMETRIES))
mrDestinationModelPart.AddNodes(nodes_buffer_vector.begin(),nodes_buffer_vector.end());

if (num_elements != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::ELEMENTS || mEntity == EntityTransfered::NODESANDELEMENTS))
mrDestinationModelPart.AddElements(elements_buffer_vector.begin(),elements_buffer_vector.end());

if (num_conditions != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::CONDITIONS || mEntity == EntityTransfered::NODESANDCONDITIONS))
mrDestinationModelPart.AddConditions(conditions_buffer_vector.begin(),conditions_buffer_vector.end());
"@847@@@1@
./81815495/fast_transfer_between_model_parts_process.cpp@413@CRITICAL@#pragma omp critical@"{
if (num_nodes != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::NODES || mEntity == EntityTransfered::NODESANDELEMENTS || mEntity == EntityTransfered::NODESANDCONDITIONS || mEntity == EntityTransfered::NODESANDGEOMETRIES))
mrDestinationModelPart.AddNodes(nodes_buffer_vector.begin(),nodes_buffer_vector.end());

if (num_elements != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::ELEMENTS || mEntity == EntityTransfered::NODESANDELEMENTS))
mrDestinationModelPart.AddElements(elements_buffer_vector.begin(),elements_buffer_vector.end());

if (num_conditions != 0 && (mEntity == EntityTransfered::ALL || mEntity == EntityTransfered::CONDITIONS || mEntity == EntityTransfered::NODESANDCONDITIONS))
mrDestinationModelPart.AddConditions(conditions_buffer_vector.begin(),conditions_buffer_vector.end());
"@847@@@1@
./81815495/normal_check_process.cpp@82@CRITICAL@#pragma omp critical@"{
std::move(nodes_marker_backup_buffer.begin(),nodes_marker_backup_buffer.end(),back_inserter(nodes_marker_backup));
std::move(nodes_not_marker_backup_buffer.begin(),nodes_not_marker_backup_buffer.end(),back_inserter(nodes_not_marker_backup));
std::move(elements_marker_backup_buffer.begin(),elements_marker_backup_buffer.end(),back_inserter(elements_marker_backup));
std::move(elements_not_marker_backup_buffer.begin(),elements_not_marker_backup_buffer.end(),back_inserter(elements_not_marker_backup));
std::move(conditions_marker_backup_buffer.begin(),conditions_marker_backup_buffer.end(),back_inserter(conditions_marker_backup));
std::move(conditions_not_marker_backup_buffer.begin(),conditions_not_marker_backup_buffer.end(),back_inserter(conditions_not_marker_backup));
}"@780@@@1@
./282041007/k-means_parallel.c@80@CRITICAL@#pragma omp critical@"{
for (i = 0; i < K_global; i++)
{
if (points_inside_cluster_count[i] == 0)
{
printf(""Unlikely situation!\n"");
continue;
}
iter_centroids_global[((iter_counter + 1) * K_global + i) * 3] = (iter_centroids_global[((iter_counter + 1) * K_global + i) * 3] * iter_cluster_count_global[iter_counter][i] + cluster_points_sum[i * 3]) / (float)(iter_cluster_count_global[iter_counter][i] + points_inside_cluster_count[i]);
iter_centroids_global[((iter_counter + 1) * K_global + i) * 3 + 1] = (iter_centroids_global[((iter_counter + 1) * K_global + i) * 3 + 1] * iter_cluster_count_global[iter_counter][i] + cluster_points_sum[i * 3 + 1]) / (float)(iter_cluster_count_global[iter_counter][i] + points_inside_cluster_count[i]);"@716@@@@
./81815495/base_contact_search_process.cpp@260@CRITICAL@#pragma omp critical@"{
std::move(slave_nodes_ids_buffer.begin(),slave_nodes_ids_buffer.end(),back_inserter(slave_nodes_ids));
std::move(master_nodes_ids_buffer.begin(),master_nodes_ids_buffer.end(),back_inserter(master_nodes_ids));
std::move(slave_conditions_ids_buffer.begin(),slave_conditions_ids_buffer.end(),back_inserter(slave_conditions_ids));
std::move(master_conditions_ids_buffer.begin(),master_conditions_ids_buffer.end(),back_inserter(master_conditions_ids));
}"@556@@@@
./116842157/sqs.cpp@284@CRITICAL@#pragma omp critical@"{

auto current_time {std::chrono::duration_cast<std::chrono::nanoseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count()};
std::srand(current_time * (thread_id + 1));
random_seed_local = std::rand() * (thread_id + 1);
BOOST_LOG_TRIVIAL(trace) << ""do_pair_iterations::rank::"" << mpi_rank << ""::thread::"" << thread_id << ""::random_seed = "" << random_seed_local;
}"@549@@@@
./81815495/graph_utilities.cpp@228@CRITICAL@#pragma omp critical@"{
num_ratio_particles_flux++;
particle_flux_conducdir_ratio_avg   += flux_conducdir   / flux_total;
particle_flux_conducindir_ratio_avg += flux_conducindir / flux_total;
particle_flux_rad_ratio_avg         += flux_rad         / flux_total;
particle_flux_gen_ratio_avg         += flux_gen         / flux_total;
particle_flux_conv_ratio_avg        += flux_conv        / flux_total;
particle_flux_prescsurf_ratio_avg   += flux_prescsurf   / flux_total;
particle_flux_prescvol_ratio_avg    += flux_prescvol    / flux_total;
}"@521@@@@
./439055859/compute_integral.h@255@CRITICAL@#pragma omp critical@"{
if ((n_loops+1)%par->nthread==0){
TotalTime.Stop();
int current_runtime = TotalTime.Elapsed();
int remaining_time = current_runtime/((n_loops+1)/par->nthread)*(par->max_loops/par->nthread-(n_loops+1)/par->nthread);
fprintf(stderr,""\nFinished integral loop %d of %d after %d s. Estimated time left:  %2.2d:%2.2d:%2.2d hms, i.e. %d s.\n"",n_loops+1,par->max_loops, current_runtime,remaining_time/3600,remaining_time/60%60, remaining_time%60,remaining_time);

TotalTime.Start();
Float rmsrd_C4, maxrd_C4;"@509@@@@
./116842157/sqs.cpp@275@CRITICAL@#pragma omp critical@"{
BOOST_LOG_TRIVIAL(debug) << ""do_pair_iterations::rank::"" << mpi_rank << ""::thread::"" << thread_id << ""::iteration_start = "" << start_it;
BOOST_LOG_TRIVIAL(debug) << ""do_pair_iterations::rank::"" << mpi_rank << ""::thread::"" << thread_id << ""::num_iterations = "" << (end_it - start_it);
BOOST_LOG_TRIVIAL(debug) << ""do_pair_iterations::rank::"" << mpi_rank << ""::thread::"" << thread_id << ""::iteration_end = "" << end_it;
}"@502@@@@
./142718254/iPregel_postamble.h@288@CRITICAL@#pragma omp critical@"{
printf(""\t\t| %9d | %12lu | %12lu | %12lu | %9.5f |\n"", omp_get_thread_num(), edge_start, edge_start + edge_chunk - 1, edge_chunk, ((float)edge_chunk) * 100.0f / ((float)ip_get_edges_count()));
fflush(stdout);
fseek(adjacency_file, edge_start * sizeof(IP_VERTEX_ID_TYPE), SEEK_SET);
ip_safe_fread(&all_out_neighbours[edge_start], sizeof(IP_VERTEX_ID_TYPE), edge_chunk, adjacency_file);
}"@483@@@@
./116842157/sqs.cpp@369@CRITICAL@#pragma omp critical@"{
BOOST_LOG_TRIVIAL(info) << ""do_pair_iterations::rank::"" << mpi_rank << ""::thread::"" << thread_id << ""::sigint_received = true"";
BOOST_LOG_TRIVIAL(info) << ""do_pair_iterations::rank::"" << mpi_rank << ""::thread::"" << thread_id << ""::finished_iterations::"" << (i - start_it) << ""::out_of::"" << (end_it - start_it);
}
actual_iterations = i;
break;
}

}
rank_t actual_iterations_done = (do_shutdown && shutdown_requested.load()) ? actual_iterations - start_it : end_it - start_it;"@477@@@@
./299666975/percolation.c@133@CRITICAL@#pragma omp critical@"{
for(int i=0; i<L; i++){
if(lattice[beginRow][i] != 0 && lattice[mod(beginRow-1, L)][i] != 0 && (seen[beginRow][i] != seen[mod(beginRow-1, L)][i])
&& (!contains(idList, idTop, seen[beginRow][i]) || !contains(idList, idTop, seen[mod(beginRow-1, L)][i]))) {
CLUSTER* c1 = getCluster(seen[mod(beginRow-1, L)][i], clusterList, clTop);
CLUSTER* c2 = getCluster(seen[beginRow][i], clusterList, clTop);
idList[idTop++] = c1->id;
mergeClusters(c1, c2, clusterList, &clTop, seen);
}
}"@476@@@@
./81815495/self_contact_utilities.cpp@261@CRITICAL@#pragma omp critical@"{
std::move(master_conditions_ids_buffer.begin(),master_conditions_ids_buffer.end(),back_inserter(master_conditions_ids));
}"@467@@@@
./23245147/DfCD.cpp@2413@CRITICAL@#pragma omp critical(DfCD__calcDiagonals_kernel_2)@{ pDiagonalMat->merge(local_diagMat); }@456@@@@
./85618549/ObservationEquation.cpp@63@CRITICAL@#pragma omp critical@"{
H.at<double>(counter, splinePart) = baseVals.at<double>(0,0)*imgsrc.at<float>(row, col);
H.at<double>(counter, splinePart+1) = baseVals.at<double>(0,1)*imgsrc.at<float>(row, col);
H.at<double>(counter, splinePart+2) = baseVals.at<double>(0,2)*imgsrc.at<float>(row, col);
H.at<double>(counter, splinePart+3) = baseVals.at<double>(0,3)*imgsrc.at<float>(row, col);


z.at<double>(counter, 0) = row*imgsrc.at<float>(row, col);

++counter;"@436@@@@
./23245147/DfCD.cpp@2482@CRITICAL@#pragma omp critical(DfCD__calcDiagonalsA_kernel_1)@"{ pI2PQ->insert(pI2PQ->end(), local_I2PQ.begin(), local_I2PQ.end()); }
#pragma omp critical(DfCD__calcDiagonalsA_kernel_2)
{ pDiagonalMat->merge(local_diagMat); }
#pragma omp critical(DfCD__calcDiagonalsA_kernel_3)
{ pSchwartzTable->merge(local_schwartzTable); }
}
}

bool DfCD::isAliveBySchwartzCutoff(const index_type shellIndexP, const index_type shellIndexQ,
const index_type shellIndexR, const index_type shellIndexS,"@422@@@@
./250869203/omp_kmeans.c@52@CRITICAL@#pragma omp critical@"{
for (int i = 0; i < K; i++)
{
if (cluster_count[i] == 0)
{
continue;
}
centroids_global[((iteration_count + 1) * K + i) * 3] = current_centroid[(i * 3)] / (float)cluster_count[i];
centroids_global[((iteration_count + 1) * K + i) * 3 + 1] = current_centroid[(i * 3) + 1] / (float)cluster_count[i];
centroids_global[((iteration_count + 1) * K + i) * 3 + 2] = current_centroid[(i * 3) + 2] / (float)cluster_count[i];"@415@@@@
./75787342/pothole_SWAT.cpp@293@CRITICAL@#pragma omp critical@"{
for (int i = 1; i <= m_nSubbasins; i++) {
m_surfqToCh[i] += tmp_surfq2ch[i] * m_cellArea;
m_sedToCh[i] += tmp_sed2ch[i];
m_surNO3ToCh[i] += tmp_sno32ch[i] * m_cellArea;
m_surNH4ToCh[i] += tmp_snh42ch[i] * m_cellArea;
m_surSolPToCh[i] += tmp_solp2ch[i] * m_cellArea;
m_surCodToCh[i] += tmp_cod2ch[i] * m_cellArea;
m_sedOrgNToCh[i] += tmp_orgn2ch[i] * m_cellArea;
m_sedOrgPToCh[i] += tmp_orgp2ch[i] * m_cellArea;"@412@@@@
./116842157/sqs.cpp@314@CRITICAL@#pragma omp critical@"{
int have_message;
MPI_Request request;
MPI_Status request_status;
MPI_Iprobe(MPI_ANY_SOURCE, TAG_BETTER_OBJECTIVE, MPI_COMM_WORLD, &have_message, &request_status);
while (have_message) {
double global_best_objective;
int source_rank = request_status.MPI_SOURCE;
MPI_Irecv(&global_best_objective, 1, MPI_DOUBLE, source_rank, TAG_BETTER_OBJECTIVE, MPI_COMM_WORLD, &request);
MPI_Wait(&request, &request_status);"@411@@@@
./23245147/DfCD.cpp@2306@CRITICAL@#pragma omp critical(DfCD__calcDiagonals_kernel_1)@{ pI2PR->insert(pI2PR->end(), local_I2PR.begin(), local_I2PR.end()); }@407@@@@
./81815495/create_and_destroy.cpp@171@CRITICAL@#pragma omp critical@"{
r_modelpart.AddNode(pnew_node);
}"@400@@@@
./81815495/create_and_destroy.cpp@246@CRITICAL@#pragma omp critical@"{
r_modelpart.AddNode(pnew_node);
}"@400@@@@
./81815495/DEM_KDEM_soft_torque_with_noise_CL.cpp@16@CRITICAL@#pragma omp critical@"{
if (!element1->Has(PERTURBED_TAU_ZERO)) {
srand(element1->GetId());
mPerturbedTauZero = rand_normal(DEM_KDEM::GetTauZero(element1), (*mpProperties)[KDEM_STANDARD_DEVIATION_TAU_ZERO]);
}
if (!element1->Has(PERTURBED_INTERNAL_FRICTION)) {
srand(element1->GetId());
mPerturbedInternalFriction = rand_normal(DEM_KDEM::GetInternalFricc(element1), (*mpProperties)[KDEM_STANDARD_DEVIATION_FRICTION]);
}
}"@399@@@@
./497678098/tts_finder.cpp@163@CRITICAL@#pragma omp critical@"{
motifs.reserve(motifs.size() + tts_args.motifs.size());
std::move(tts_args.motifs.begin(), tts_args.motifs.end(), std::back_inserter(motifs));
}"@398@@@@
./81815495/finite_difference_utility.cpp@109@CRITICAL@#pragma omp critical@"{
const IndexType coord_dir = FiniteDifferenceUtility::GetCoordinateDirection(rDesignVariable);

Matrix perturbed_mass_matrix;

if ( (rOutput.size1() != rMassMatrix.size1()) || (rOutput.size2() != rMassMatrix.size2() ) )
rOutput.resize(rMassMatrix.size1(), rMassMatrix.size2(), false);

rNode.GetInitialPosition()[coord_dir] += rPertubationSize;
rNode.Coordinates()[coord_dir] += rPertubationSize;"@397@@@@
./81815495/residualbased_elimination_builder_and_solver_with_constraints.h@437@CRITICAL@#pragma omp critical@"{
dof_global_set.insert(dofs_tmp_set.begin(), dofs_tmp_set.end());
dof_global_slave_set.insert(dof_temp_slave_set.begin(), dof_temp_slave_set.end());
}
}

KRATOS_INFO_IF(""ResidualBasedEliminationBuilderAndSolverWithConstraints"", ( this->GetEchoLevel() > 2)) << ""Initializing ordered array filling\n"" << std::endl;

dof_temp_all.reserve(dof_global_set.size());
for (auto p_dof : dof_global_set) {"@395@@@@
./81815495/graph_utilities.cpp@196@CRITICAL@#pragma omp critical@"{
total_vol += vol;
if (temp < particle_temp_min) particle_temp_min = temp;
if (temp > particle_temp_max) particle_temp_max = temp;
particle_temp_avg                += temp;
particle_temp_dev                += temp * temp;
model_temp_avg                   += temp * vol;

total_energy_potential_gravity   += energy_potential_gravity;
total_energy_potential_elastic   += energy_potential_elastic;"@395@@@@
./23245147/TlCommunicate.cpp@2275@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@"{
NonBlockingCommParamTableType::iterator it =
this->nonBlockingCommParamTable_.find(key);
if (it != this->nonBlockingCommParamTable_.end()) {
bool isComplete = true;
std::vector<uintptr_t>::iterator reqEnd = it->second.requests.end();
for (std::vector<uintptr_t>::iterator req =
it->second.requests.begin();
req != reqEnd; ++req) {
MPI_Request* pRequest = reinterpret_cast<MPI_Request*>(*req);"@394@@@@
./81815495/create_and_destroy.cpp@257@CRITICAL@#pragma omp critical@"{
r_modelpart.Nodes().push_back(pnew_node);
}

noalias(pnew_node->FastGetSolutionStepValue(VELOCITY)) = null_vector;
pnew_node->FastGetSolutionStepValue(PARTICLE_MATERIAL) = params[PARTICLE_MATERIAL];
}

if (has_rotation && pnew_node->SolutionStepsDataHas(PARTICLE_ROTATION_DAMP_RATIO)) {
pnew_node->FastGetSolutionStepValue(PARTICLE_ROTATION_DAMP_RATIO) = params[PARTICLE_ROTATION_DAMP_RATIO];"@394@@@@
./23245147/DfCD.cpp@3415@CRITICAL@#pragma omp critical(DfCD__calcERIs)@"{ this->ERI_cache_.insert(local_cache.begin(), local_cache.end()); }
}
}

std::vector<double> DfCD::setERIs_K_half(const TlOrbitalInfoObject& orbInfo, const index_type G_row,
const std::vector<index_type> G_col_list, const index_type start,
const index_type end, const PQ_PairArray& I2PQ) {
assert(0 <= start);
assert(end <= static_cast<index_type>(G_col_list.size()));
assert(start <= end);"@391@@@@
./81815495/explicit_solver_continuum.cpp@384@CRITICAL@#pragma omp critical@"{
if (used_bonds_counter < (int) (*mpContact_model_part).Elements().size()) {
add_new_bond = false;
private_counter = used_bonds_counter;
used_bonds_counter++;
}
}
if (!add_new_bond) {
Element::Pointer& p_old_contact_element = (*mpContact_model_part).Elements().GetContainer()[private_counter];
p_old_contact_element->GetGeometry()(0) = mListOfSphericContinuumParticles[i]->GetGeometry()(0);"@391@@@@
./81815495/distance_modification_process.cpp@220@CRITICAL@#pragma omp critical@"{
mModifiedDistancesIDs.insert(mModifiedDistancesIDs.end(),aux_modified_distances_ids.begin(),aux_modified_distances_ids.end());
mModifiedDistancesValues.insert(mModifiedDistancesValues.end(), aux_modified_distance_values.begin(), aux_modified_distance_values.end());
}"@386@@@@
./81815495/graph_utilities.cpp@252@CRITICAL@#pragma omp critical@"{
num_ratio_particles_gen++;
particle_gen_slid_pp_ratio_avg += gen_slid_pp / gen_total;
particle_gen_slid_pw_ratio_avg += gen_slid_pw / gen_total;
particle_gen_roll_pp_ratio_avg += gen_roll_pp / gen_total;
particle_gen_roll_pw_ratio_avg += gen_roll_pw / gen_total;
particle_gen_damp_pp_ratio_avg += gen_damp_pp / gen_total;
particle_gen_damp_pw_ratio_avg += gen_damp_pw / gen_total;
}"@384@@@@
./81815495/explicit_solver_strategy.cpp@1408@CRITICAL@#pragma omp critical@"{
if (used_bonds_counter < (int) (*mpContact_model_part).Elements().size()) {
add_new_bond = false;
private_counter = used_bonds_counter;
used_bonds_counter++;
}
}
if (!add_new_bond) {
Element::Pointer& p_old_contact_element = (*mpContact_model_part).Elements().GetContainer()[private_counter];
p_old_contact_element->GetGeometry()(0) = mListOfSphericParticles[i]->GetGeometry()(0);"@382@@@@
./23245147/DfTaskCtrl.cpp@1777@CRITICAL@#pragma omp critical(DfTaskCtrl__isAliveBySchwarzCutoff_all)@{ ++(this->cutoffAll_schwarz_[shellQuartetType]); }@381@@@@
./23245147/DfCD.cpp@2722@CRITICAL@#pragma omp critical(DfCD__calcERIs)@{ this->ERI_cache_.insert(local_cache.begin(), local_cache.end()); }@380@@@@
./85618549/KalmanFilter.cpp@116@CRITICAL@#pragma omp critical@"{
H_resampled.at<double>(counter, splinePart) = baseVals.at<double>(0,0);
H_resampled.at<double>(counter, splinePart+1) = baseVals.at<double>(0,1);
H_resampled.at<double>(counter, splinePart+2) = baseVals.at<double>(0,2);
H_resampled.at<double>(counter, splinePart+3) = baseVals.at<double>(0,3);


z_resampled.at<double>(counter, 0) = splineResampled.at<double>(i, 1);

++counter;"@380@@@@
./242248042/mst.c@183@CRITICAL@#pragma omp critical@"{
node* v = elem_at(&g->vertices, u_data->b->v);
payload* v_data = v->data;
node* v_leader = elem_at(&g->vertices, v_data->fragment_id);
payload* v_leader_data = v_leader->data;
int conflicting_merges = (u->label == v_leader_data->b->v &&
v_leader_data->b->u == v->label &&
u_data->b->v == v->label);
if (conflicting_merges == ok) {
change_fragment(g, u->label, v_leader->label);"@379@@@@
./61810048/IonizationFromRate.cpp@40@CRITICAL@#pragma omp critical@"{
ParticleData particleData( npart );
particleData.startAt( ipart_min );
particleData.set( particles );
ret = ( PyArrayObject * )PyObject_CallFunctionObjArgs( ionization_rate_, particleData.get(), NULL );
PyTools::checkPyError();
if( ret == NULL ) {
ERROR( ""ionization_rate profile has not provided a correct result"" );
}
double *arr = ( double * ) PyArray_GETPTR1( ret, 0 );"@375@@@@
./23245147/TlCommunicate.cpp@118@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@"{
if (this->nonBlockingCommParamTable_.find(key) !=
this->nonBlockingCommParamTable_.end()) {
const char isSendRecv =
((param.property & NonBlockingCommParam::SEND) != 0) ? 'S'
: 'R';
this->log_.critical(TlUtils::format(
""[%5d/%5d WARN] non-blocking table collision(%c) ""
""found in TlCommunicate: tag=%d, line=%d"",
this->getRank(), this->getNumOfProcs() - 1, isSendRecv,"@370@@@@
./23245147/TlCommunicate.cpp@2380@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@"{
it = this->nonBlockingCommParamTable_.find(key);
if (it != this->nonBlockingCommParamTable_.end()) {
std::vector<uintptr_t>::iterator reqEnd = it->second.requests.end();
for (std::vector<uintptr_t>::iterator req =
it->second.requests.begin();
req != reqEnd; ++req) {
MPI_Request* pRequest = reinterpret_cast<MPI_Request*>(*req);

int err = MPI_Wait(pRequest, &status);"@370@@@@
./23245147/TlCommunicate.cpp@141@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@"{
if (this->nonBlockingCommParamTable_.empty() == false) {
answer = false;
NonBlockingCommParamTableType::const_iterator itEnd =
this->nonBlockingCommParamTable_.end();
for (NonBlockingCommParamTableType::const_iterator it =
this->nonBlockingCommParamTable_.begin();
it != itEnd; ++it) {
const char isSendRecv =
((it->second.property & NonBlockingCommParam::SEND) != 0)"@369@@@@
./356685186/gen04.c@153@CRITICAL@#pragma omp critical@"{
*whoHasFinished = threadID;
*solversGenerations = generation;
for (int i=0; i<N; i++) fittestGene[i] = genes[bestGene][i];
}"@369@@@@
./81815495/analytic_RigidFace.cpp@43@CRITICAL@#pragma omp critical@"{
mContactingNeighbourSignedIds.push_back(signed_id);
if (just_changed_side){
const bool is_a_crosser = CheckProjectionFallsInside(p_particle);

if (is_a_crosser){
mNumberThroughput += side_sign;
mCrossers.push_back(signed_id);
mMasses.push_back(p_particle->GetMass());
array_1d<double, 3> particle_vel = p_particle->GetGeometry()[0].FastGetSolutionStepValue(VELOCITY);"@369@@@@
./434676452/Bruteforce.cpp@31@CRITICAL@#pragma omp critical@"{
std::cout << ""FOUND KEY: "" << key << std::endl;
std::string filename = ""probably_key"" + std::to_string(key) + "".out"";
std::ofstream file(filename, std::ios::binary);
unsigned char bytes[4] = { 0 };
bytes[0] = (key >> 24) & 0xFF;
bytes[1] = (key >> 16) & 0xFF;
bytes[2] = (key >> 8) & 0xFF;
bytes[3] = key & 0xFF;
file << bytes[0] << bytes[1] << bytes[2] << bytes[3];"@368@@@@
./23245147/DfGenerateGrid_Parallel.cpp@79@CRITICAL@#pragma omp critical(DfGenerateGrid__generateGrid)@"{
this->grdMat_.resize(numOfGrids + numOfAtomGrids, this->numOfColsOfGrdMat_);
for (std::size_t i = 0; i < numOfAtomGrids; ++i) {
this->grdMat_.set(numOfGrids, 0, coordX[i]);
this->grdMat_.set(numOfGrids, 1, coordY[i]);
this->grdMat_.set(numOfGrids, 2, coordZ[i]);
this->grdMat_.set(numOfGrids, 3, weight[i]);
this->grdMat_.set(numOfGrids, 4, atom);
++numOfGrids;
}"@365@@@@
./81815495/create_and_destroy.cpp@414@CRITICAL@#pragma omp critical@"{
r_modelpart.Nodes().push_back(pnew_node);
}"@365@@@@
./23245147/DfGenerateGrid.cpp@719@CRITICAL@#pragma omp critical(DfGenerateGrid__generateGrid)@"{
this->grdMat_.resize(numOfGrids + numOfAtomGrids,
this->numOfColsOfGrdMat_);
for (std::size_t i = 0; i < numOfAtomGrids; ++i) {
this->grdMat_.set(numOfGrids, 0, coordX[i]);
this->grdMat_.set(numOfGrids, 1, coordY[i]);
this->grdMat_.set(numOfGrids, 2, coordZ[i]);
this->grdMat_.set(numOfGrids, 3, weight[i]);
this->grdMat_.set(numOfGrids, 4, atom);
++numOfGrids;"@363@@@@
./168158361/lab1_omp.c@68@CRITICAL@#pragma omp critical@"{
for (i = 0; i < K_global; i++)
{
if (cluster_count[i] == 0)
{
printf(""Unlikely situation!\n"");
continue;
}
centroids_global[((iter_counter + 1) * K_global + i) * 3] =
(centroids_global[((iter_counter + 1) * K_global + i) * 3] * cluster_count_global[iter_counter][i] + cluster_location[i * 3]) / (float)(cluster_count_global[iter_counter][i] + cluster_count[i]);"@363@@@@
./310001780/coloring.cpp@66@CRITICAL@#pragma omp critical@"{
color_with_max_id = std::max(t_max, color_with_max_id);
}"@362@@@@
./31732163/numeric.cpp@194@CRITICAL@#pragma omp critical@"{
std::fprintf(stderr, ""result:(%.2f,%.2f,%.2f)\n"",
result[0], result[1], result[2]);
for(int i=0; i < nb; ++i) {
std::fprintf(stderr, ""(%.2f,%.2f,%.2f), "",
cache[i * 3], cache[i * 3 + 1], cache[i * 3 + 2]);
}"@360@@@@
./505437172/OpenMP.c@34@CRITICAL@#pragma omp critical@"{
if (ompMutant->mutantScore == -1111111 || ompMutant->mutantScore == 1111111)
{
ompMutant->seq = (char *)malloc(sizeof(char) * seq2->size);
strcpy(ompMutant->seq, bestMutantPerThread->seq);
ompMutant->size = bestMutantPerThread->size;
ompMutant->mutantScore = bestMutantPerThread->mutantScore;
}
byMutantType(ompMutant, bestMutantPerThread, typeMutant);
"@355@@@@
./106249716/patcc.cxx@240@CRITICAL@#pragma omp critical@shifted_npoles_index.push_back(i);@353@@@@
./81815495/shell_5p_element.cpp@512@CRITICAL@#pragma omp critical@"if (!GetGeometry().GetGeometryParent(0).GetValue(DIRECTOR_COMPUTED))
{
GetGeometry().GetGeometryParent(0).SetValue(DIRECTOR_COMPUTED, true);
compute_director = true;
}
if (compute_director) {
auto& points = GetGeometry().GetGeometryParent(0).pGetGeometryPart(-1)->Points();
for (auto& node : points)
{
const auto& r_director = node.GetValue(DIRECTOR);"@351@@@@
./249790277/gmm.c@737@CRITICAL@#pragma omp critical@"#endif
{
for (i_cl = 0 ; i_cl < (signed)numClusters ; ++i_cl) {
priors [i_cl] += clusterPosteriorSum_ [i_cl];
for (dim = 0 ; dim < self->dimension ; ++dim) {
means [i_cl * self->dimension + dim] += means_ [i_cl * self->dimension + dim] ;
covariances [i_cl * self->dimension + dim] += covariances_ [i_cl * self->dimension + dim] ;
}
}
vl_free(means_);"@350@@@@
./285634219/cuBool_gpu.h@547@CRITICAL@#pragma omp critical@"if(*handler.distance_ < *bestFactors.distance_) {
if(config.verbosity > 0) {
out << ""\tResult is better than previous best. Copying to host."" << std::endl;
}

*bestFactors.distance_ = *handler.distance_;
bestFactors.lineSize_ = handler.lineSize_;
bestFactors.factorDim_ = handler.factorDim_;

size_t lineBytes = sizeof(factor_t) * handler.lineSize_;"@349@@@@
./61810048/Histogram.h@1098@CRITICAL@#pragma omp critical@"{
particleData.resize( npart );
particleData.set( s->particles );
PyArrayObject *ret = ( PyArrayObject * )PyObject_CallFunctionObjArgs( function, particleData.get(), NULL );
particleData.clear();
double *arr = ( double * ) PyArray_GETPTR1( ret, 0 );
for( unsigned int ipart = 0 ; ipart < npart ; ipart++ ) {
if( index[ipart]<0 ) {
continue;
}"@342@@@@
./61810048/Histogram.h@546@CRITICAL@#pragma omp critical@"{
particleData.resize( npart );
particleData.set( s->particles );
PyArrayObject *ret = ( PyArrayObject * )PyObject_CallFunctionObjArgs( function, particleData.get(), NULL );
particleData.clear();
double *arr = ( double * ) PyArray_GETPTR1( ret, 0 );
for( unsigned int ipart = 0 ; ipart < npart ; ipart++ )
{
if( index[ipart]<0 ) {
continue;"@340@@@@
./174347692/main.cpp@74@CRITICAL@#pragma omp critical@"for (auto i = 1; i < numprocs; i++){
int results_length;

MPI_Recv(&results_length, 1, MPI_INT, i, i, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

for (auto j=0; j < results_length; j++){
int line_length;
char char_array[1024];
memset(char_array, 0, sizeof(char_array));
MPI_Recv(&line_length, 1, MPI_INT, i, i, MPI_COMM_WORLD,MPI_STATUS_IGNORE);"@337@@@@
./128194616/main.cpp@74@CRITICAL@#pragma omp critical@"for (auto i = 1; i < numprocs; i++){
int results_length;

MPI_Recv(&results_length, 1, MPI_INT, i, i, MPI_COMM_WORLD,MPI_STATUS_IGNORE);

for (auto j=0; j < results_length; j++){
int line_length;
char char_array[1024];
memset(char_array, 0, sizeof(char_array));
MPI_Recv(&line_length, 1, MPI_INT, i, i, MPI_COMM_WORLD,MPI_STATUS_IGNORE);"@337@@@@
./153533248/block_chain.cpp@76@CRITICAL@#pragma omp critical@{ ss << _index << _time << _data << ++_nonce << prev_hash; }@337@@@@
./106249716/patcc.cxx@232@CRITICAL@#pragma omp critical@shifted_spoles_index.push_back(i);@335@@@@
./3769753/bloom-dbg.h@539@CRITICAL@#pragma omp critical(fasta)@"{
rec.length = seq.length();
rec.coverage = getSeqAbsoluteKmerCoverage(seq, solidKmerSet);
printContig(seq, rec.length, rec.coverage, counters.contigID, rec.readID, params.k, streams.out);
if (params.checkpointsEnabled())
printContig(seq, rec.length, rec.coverage, counters.contigID, rec.readID, params.k, streams.checkpointOut);"@333@@@@
./72936111/server.h@215@CRITICAL@#pragma omp critical(CriticalClient)@"{
for(int idxClient = 0 ; idxClient < nbClients ; ++idxClient){

std::string tempBuffer=""msg from "" +data.nick+ "": ""+data.buffer;
if( write(clients[idxClient].first, tempBuffer.c_str(), std::strlen(tempBuffer.c_str()) ) <= 0 ){
::close(clients[idxClient].first);
--nbClients;
clients[idxClient] = clients[nbClients];
--idxClient;
}"@331@@@@
./23245147/DfCD.cpp@3345@CRITICAL@#pragma omp critical(DfCD__getCalcList_K_half)@"{ calcSet.insert(index4); }
if (indexP != indexR) {
IndexPair4S index4(shellIndexP, shellIndexR, shellIndexP, shellIndexR);
#pragma omp critical(DfCD__getCalcList_K_half)
{ calcSet.insert(index4); }
}
} else {
{
IndexPair4S index4(shellIndexP, shellIndexQ, shellIndexR, shellIndexS);
#pragma omp critical(DfCD__getCalcList_K_half)"@330@@@@
./72936111/server.h@231@CRITICAL@#pragma omp critical(CriticalClient)@"{
bool found=false;
int idxClient=SearchClient(data.dest);
if(idxClient>=0)
{
std::string tempBuffer=""msg from "" +data.nick+ "": "" +data.buffer;
if( write(clients[idxClient].first, tempBuffer.c_str(), std::strlen(tempBuffer.c_str()) ) <= 0 ){
::close(clients[idxClient].first);
--nbClients;
clients[idxClient] = clients[nbClients];"@330@@@@
./81683654/LockBasedBinaryListMap.h@346@CRITICAL@#pragma omp critical (check_update_pointer)@"{
insert_node->next[0]=current_node->next[1];
insert_node->next[1]=current_node->next[1];
insert_node->next[2]=current_node;
insert_node->next[3]=current_node;
current_node->next[0]=insert_node;
current_node->next[1]->next[3]=insert_node;
current_node->next[1]->next[2]=insert_node;
current_node->next[1]=insert_node;
map->size++;"@330@@@@
./75787342/NutrientMovementViaWater.cpp@90@CRITICAL@#pragma omp critical@"{
for (int i = 1; i <= m_nSubbsns; i++) {
m_latNO3ToCh[i] += tmp_latNO3ToCh[i];
m_surfRfNO3ToCh[i] += tmp_surfRfNO3ToCh[i];
m_surfRfNH4ToCh[i] += tmp_surfRfNH4ToCh[i];
m_surfRfSolPToCh[i] += tmp_surfRfSolPToCh[i];
m_surfRfCodToCh[i] += tmp_surfRfCodToCh[i];
m_percoNGw[i] += tmp_percoNGw[i];
m_percoPGw[i] += tmp_percoPGw[i];
}"@327@@@@
./500140678/GridFind.cpp@86@CRITICAL@#pragma omp critical@"{
printlog(""neighbour_id: "")(neighbour_id)("" / "")(params.max_neighbours)();
printlog(""j: "")(j)("" / "")(ntotal)();
printlog(""x: "")(r(j).x)();
printlog(""y: "")(r(j).y)();
printlog(""cell: "")(center_cell_idx)();
printlog(""cell_x: "")(get_cell_x(center_cell_idx))();
printlog(""cell_y: "")(get_cell_y(center_cell_idx))();
err = true;
}"@325@@@@
./81815495/finite_difference_utility.cpp@63@CRITICAL@#pragma omp critical@"{
const IndexType coord_dir = FiniteDifferenceUtility::GetCoordinateDirection(rDesignVariable);

Matrix LHS_perturbed;
Vector dummy;

if ( (rOutput.size1() != rLHS.size1()) || (rOutput.size2() != rLHS.size2() ) )
rOutput.resize(rLHS.size1(), rLHS.size2(), false);

rNode.GetInitialPosition()[coord_dir] += rPertubationSize;"@323@@@@
./62011740/rkmh.cpp@1592@CRITICAL@#pragma omp critical@"{
stringstream sstream;
sstream << ref_keys[i] << ""\t"" << pos << ""\t"" <<
""."" << ""\t"" << orig << ""\t"" << x;
string s = sstream.str();
call_count[s] += 1;
call_avg_depth[s] = max(avg_d, call_avg_depth[s]);
call_orig_depth[s] = max(call_orig_depth[s], depth);
if (alt_depth > call_max_depth[s]){
call_max_depth[s] = alt_depth;"@323@@@@
./23245147/DfCD.cpp@3463@CRITICAL@#pragma omp critical(DfCD__setERIs_set_answer)@"{ value += coef * tmp; }
} else {
CnErr.abort(""not found value in cache3."");
}

if (indexQ != indexS) {
if (this->getCachedValue(orbInfo, indexP, indexS, indexR, indexQ, this->ERI_cache_, &tmp)) {
const double coef = (indexP != indexR) ? 2.0 : 1.0;
#pragma omp critical(DfCD__setERIs_set_answer)
{ value += coef * tmp; }"@320@@@@
./23245147/DfCD.cpp@2486@CRITICAL@#pragma omp critical(DfCD__calcDiagonalsA_kernel_3)@"{ pSchwartzTable->merge(local_schwartzTable); }
}
}

bool DfCD::isAliveBySchwartzCutoff(const index_type shellIndexP, const index_type shellIndexQ,
const index_type shellIndexR, const index_type shellIndexS,
const int shellQuartetType, const TlSparseMatrix& schwarzTable,
const double threshold) {
bool answer = false;
"@319@@@@
./169283207/Mesh.cpp@245@CRITICAL@#pragma omp critical@"{
currentEdge.edgeInFront
=  std::pair<unsigned int, unsigned int>(elm, k);
mesh.elements[elm].edges[k].edgeInFront
= std::pair<unsigned int, unsigned int>
(elVecSize, edgePos);
currentEdge.nodeIndexEdgeInFront = std::move(permutation1);
mesh.elements[elm].edges[k].nodeIndexEdgeInFront
= std::move(permutation2);
}"@315@@@@
./21635382/octree_openmp.c@181@CRITICAL@#pragma omp critical(boxMutex)@"{
box = (Box*)realloc(box, (8 + box_counter) * sizeof(Box));
for (i = 0; i < 8; i++)
{
box_counter++;
box[box_counter - 1].level = cube.level + 1;
box[box_counter - 1].boxid = box_counter;
box[box_counter - 1].parent = cube.boxid;
box[box_counter - 1].length = cube.length / 2;
box[box_counter - 1].n = 0;"@305@@@@
./81815495/move_particle_utility.h@460@CRITICAL@#pragma omp critical@"{
if (number_of_particles_in_current_elem<mmaximum_number_of_particles)
{

current_element_particle_pointers(post_offset+number_of_particles_in_current_elem) = &pparticle;

number_of_particles_in_current_elem++ ;
if (number_of_particles_in_current_elem>mmaximum_number_of_particles)
KRATOS_WATCH(""MAL"");
"@304@@@@
./81815495/move_particle_utility_pfem2.h@867@CRITICAL@#pragma omp critical@"{
if (number_of_particles_in_current_elem<mmaximum_number_of_particles)
{

current_element_particle_pointers(post_offset+number_of_particles_in_current_elem) = &pparticle;

number_of_particles_in_current_elem++ ;
if (number_of_particles_in_current_elem>mmaximum_number_of_particles)
KRATOS_WATCH(""MAL"");
"@304@@@@
./228656264/affinity-1.c@443@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2 thread %d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[thr < 3 ? 2 * thr : 3 + thr];"@302@@@@
./315333330/affinity-1.c@443@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2 thread %d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[thr < 3 ? 2 * thr : 3 + thr];"@302@@@@
./365493075/main.cpp@99@CRITICAL@#pragma omp critical@"{
if (acceptCounter < threadNums / 2)
{
if (blockChain.Control(privateHash)) {
cout << ""Hash accepted: "" << privateHash << ""\t \t nonce: "" << acceptNonce << ""\t \t tid: "" << omp_get_thread_num() << endl;
++acceptCounter;
}
else cout << ""Error tid: "" << omp_get_thread_num() << endl;
}
++entryCounter;"@300@@@@
./81815495/residualbased_elimination_builder_and_solver_with_constraints.h@1156@CRITICAL@#pragma omp critical@"{
dof_global_fixed_master_set.insert(dof_temp_fixed_master_set.begin(), dof_temp_fixed_master_set.end());
}
}

dof_temp_fixed_master.reserve(dof_global_fixed_master_set.size());
for (auto p_dof : dof_global_fixed_master_set) {
dof_temp_fixed_master.push_back( p_dof );
}
dof_temp_fixed_master.Sort();"@300@@@@
./81815495/distance_modification_process.cpp@330@CRITICAL@#pragma omp critical@"{
mModifiedDistancesIDs.insert(mModifiedDistancesIDs.end(),aux_modified_distances_ids.begin(),aux_modified_distances_ids.end());
mModifiedElementalDistancesValues.insert(mModifiedElementalDistancesValues.end(),aux_modified_elemental_distances.begin(),aux_modified_elemental_distances.end());
}"@293@@@@
./81815495/distance_modification_process.cpp@363@CRITICAL@#pragma omp critical@"{
mModifiedDistancesIDs.insert(mModifiedDistancesIDs.end(),aux_modified_distances_ids.begin(),aux_modified_distances_ids.end());
mModifiedElementalDistancesValues.insert(mModifiedElementalDistancesValues.end(),aux_modified_elemental_distances.begin(),aux_modified_elemental_distances.end());
}"@293@@@@
./389341661/main.cpp@102@CRITICAL@#pragma omp critical@"{
MPI_Recv(&search_num, 1, MPI_INT, 0, master_tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
MPI_Recv(&recv_data[id], div, MPI_INT, 0, master_tag, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
sleep(1);
cout<<""Process ""<<myrank<<"" has data input "";
for(int i = 0; i < (div); i++){
cout<<recv_data[i]<<"" "";
}"@291@@@@
./279765353/main.cpp@107@CRITICAL@#pragma omp critical@"{
complete += 1;
int finish = complete * 100.0 / subproblems.size();
if (finish > percent) {
double t = timeall.getRunTime(true);
std::cerr << ""progress: "" <<finish << ""% remaining time: "" << t * 0.1 / finish - t * 0.001 << ""s"";
std::cerr << std::string(15, ' ') << ""\r"";
percent = finish;
}"@291@@@@
./228656264/affinity-1.c@314@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#2 thread 3,%d"", thr);
if (omp_get_num_threads () == 5 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[thr == 4 ? 6
: 6 + thr / 2];"@291@@@@
./315333330/affinity-1.c@314@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#2 thread 3,%d"", thr);
if (omp_get_num_threads () == 5 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[thr == 4 ? 6
: 6 + thr / 2];"@291@@@@
./514584527/my-mandelbrot-collapse.c@54@CRITICAL@#pragma omp critical@"if ( it < MAXIT ) {
matrix[y*y_size + x] = it;
}"@291@@@@
./514584527/my-mandelbrot.c@54@CRITICAL@#pragma omp critical@"if ( it < MAXIT ) {
matrix[y*y_size + x] = it;
}"@291@@@@
./72936111/server.h@260@CRITICAL@#pragma omp critical(CriticalClient)@"{
if(idxClient>=0)
{
std::string tempBuffer=""msg from "" +data.nick+ "": "" +data.buffer;
if( write(clients[idxClient].first, tempBuffer.c_str(), std::strlen(tempBuffer.c_str()) ) <= 0 ){
::close(clients[idxClient].first);
--nbClients;
clients[idxClient] = clients[nbClients];
}
found =true;"@288@@@@
./81815495/apply_periodic_boundary_condition_process.cpp@229@CRITICAL@#pragma omp critical@"{
int current_num_constraint = mrMasterModelPart.GetRootModelPart().NumberOfMasterSlaveConstraints();
auto constraint = r_clone_constraint.Create(++current_num_constraint,master_node, r_var, rSlaveNode, r_var, master_weight, 0.0);
mrMasterModelPart.AddMasterSlaveConstraint(constraint);
}"@288@@@@
./81815495/create_and_destroy.cpp@459@CRITICAL@#pragma omp critical@"{
r_modelpart.Nodes().push_back(pnew_node);
}

array_1d<double, 3> null_vector = ZeroVector(3);
pnew_node->FastGetSolutionStepValue(VELOCITY) = null_vector;
pnew_node->FastGetSolutionStepValue(ANGULAR_VELOCITY) = null_vector;

pnew_node->AddDof(VELOCITY_X);
pnew_node->AddDof(VELOCITY_Y);"@288@@@@
./3769753/PopBubbles.cpp@334@CRITICAL@#pragma omp critical(cerr)@"{
cerr << ""\n* "" << get(vertex_name, g, v) << "" ->"";
for (adjacency_iterator it = adj.first; it != adj.second; ++it)
cerr << ' ' << get(vertex_name, g, *it);
cerr << "" -> "" << get(vertex_name, g, tail) << '\n';
}

if (nbranches > opt::maxBranches) {
#pragma omp atomic
g_count.tooMany++;"@287@@@@
./228656264/affinity-1.c@762@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#1 thread 2,%d"", thr);
if (test_spread_master_close)
p = places_array[test_places].places[pp];
else if (omp_get_num_threads () == 4 && test_true)
switch (places_array[test_places].count)
{
case 8:"@287@@@@
./228656264/affinity-1.c@942@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#4 thread 2,%d"", thr);
if (omp_get_num_threads () == 6
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[2 + thr];"@287@@@@
./315333330/affinity-1.c@762@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#1 thread 2,%d"", thr);
if (test_spread_master_close)
p = places_array[test_places].places[pp];
else if (omp_get_num_threads () == 4 && test_true)
switch (places_array[test_places].count)
{
case 8:"@287@@@@
./315333330/affinity-1.c@942@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#4 thread 2,%d"", thr);
if (omp_get_num_threads () == 6
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[2 + thr];"@287@@@@
./81815495/define_2d_wake_process.cpp@125@CRITICAL@#pragma omp critical@"{
wake_elements_ordered_ids.push_back(it_elem->Id());
}
auto r_geometry = it_elem->GetGeometry();
for (unsigned int i = 0; i < it_elem->GetGeometry().size(); i++) {
r_geometry[i].SetLock();
r_geometry[i].SetValue(WAKE_DISTANCE, nodal_distances_to_wake(i));
r_geometry[i].UnSetLock();
}
}"@287@@@@
./285634219/cpu_voxelizer.cpp@12@CRITICAL@#pragma omp critical@"{
voxel_table[int_location] = (voxel_table[int_location] | mask);
}
}

uint64_t mortonEncode_LUT(unsigned int x, unsigned int y, unsigned int z) {
uint64_t answer = 0;
answer = host_morton256_z[(z >> 16) & 0xFF] |
host_morton256_y[(y >> 16) & 0xFF] |
host_morton256_x[(x >> 16) & 0xFF];"@286@@@@
./23245147/DfCD.cpp@3349@CRITICAL@#pragma omp critical(DfCD__getCalcList_K_half)@"{ calcSet.insert(index4); }
}
} else {
{
IndexPair4S index4(shellIndexP, shellIndexQ, shellIndexR, shellIndexS);
#pragma omp critical(DfCD__getCalcList_K_half)
{ calcSet.insert(index4); }
}
if (indexQ != indexS) {
IndexPair4S index4(shellIndexP, shellIndexS, shellIndexR, shellIndexQ);"@285@@@@
./66961777/negative_critical.c@26@CRITICAL@#pragma omp critical@"{
for(y=0; y<height; y++) {
color = x + 0;
color = gdImageGetPixel(img, x, y);
red   = 255 - gdImageRed(img, color);
green = 255 - gdImageGreen(img, color);
blue  = 255 - gdImageBlue(img, color);
color = gdImageColorAllocate(img, red, green, blue);
gdImageSetPixel(img, x, y, color);
}"@285@@@@
./228656264/affinity-1.c@638@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#2,#2 thread 2,3,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[6"@284@@@@
./228656264/affinity-1.c@860@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#2,#2 thread 2,2,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[6"@284@@@@
./315333330/affinity-1.c@638@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#2,#2 thread 2,3,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[6"@284@@@@
./315333330/affinity-1.c@860@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#2,#2 thread 2,2,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[6"@284@@@@
./166926477/raytracer.cpp@29@CRITICAL@#pragma omp critical@"{
num_processed++;
const auto cur_ms = milli_time();
if (cur_ms - last_ms > 1000) {
last_ms = cur_ms;
const float percent = num_processed * 100. / num_pixels;
INFO(""Completed "" + std::to_string(percent) + ""% of "" + render_name);
result.write(ImageFormat::BMP, ""tmp/progress.bmp"");
}
}"@284@@@@
./23245147/DfTaskCtrl.cpp@1326@CRITICAL@#pragma omp critical(DfTaskCtrl__makeDistributedCutoffTable_all)@"{ ++(this->cutoffAll_distribution_[shellPairType]); }
}
answer[indexI][shellTypeI].push_back(indexI);
}

for (int i = 0; i < orbListSize; ++i) {
const index_type indexI = orbList[i];

for (int j = 0; j < maxShellType + 1; ++j) {
ShellArray(answer[indexI][j]).swap(answer[indexI][j]);"@283@@@@
./228656264/affinity-1.c@410@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#4 thread 3,%d"", thr);
if (omp_get_num_threads () == 6 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[6 + thr / 3];
break;"@283@@@@
./315333330/affinity-1.c@410@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#4 thread 3,%d"", thr);
if (omp_get_num_threads () == 6 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[6 + thr / 3];
break;"@283@@@@
./61810048/SimWindow.cpp@463@CRITICAL@#pragma omp critical@"{
for( unsigned int j=0; j<2; j++ ) {
for( unsigned int i=0 ; i< params.nDim_field ; i++ ) {
vecPatches( 0 )->EMfields->poynting[j][i] += poynting[j][i];
}
}

vecPatches( 0 )->EMfields->nrj_mw_out += energy_field_out;
vecPatches( 0 )->EMfields->nrj_mw_inj += energy_field_inj;"@283@@@@
./109846964/main.cpp@454@CRITICAL@#pragma omp critical(pCreatureDisplay)@"{
if (pCreatureDisplay != NULL) delete pCreatureDisplay;
pCreatureDisplay = sortedGeneration[0]→clone();
sprintf_s(numstr, ""%03d"", creatureID);"@282@@@@
./3769753/nttest.cpp@326@CRITICAL@#pragma omp critical(uFile)@good = getSeq(uFile, line);@281@@@@
./23245147/TlCommunicate.cpp@2316@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@"{
it = this->nonBlockingCommParamTable_.find(key);
if (it != this->nonBlockingCommParamTable_.end()) {
const NonBlockingCommParam& param = it->second;
if ((param.property & NonBlockingCommParam::COMPLETE) != 0) {
answer = true;
if (pSrc != NULL) {
*pSrc = param.source;
}
} else {"@280@@@@
./228656264/affinity-1.c@348@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#2,#1 thread 3,3,%d"", thr);
if (omp_get_num_threads () == 5 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[7];
break;"@278@@@@
./315333330/affinity-1.c@348@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#2,#1 thread 3,3,%d"", thr);
if (omp_get_num_threads () == 5 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
p = places_array[test_places].places[7];
break;"@278@@@@
./81815495/fracture_propagation_3D_utilities.hpp@944@CRITICAL@#pragma omp critical@"{
BodyGaussPointOldCellMatrix[Row][Column][Section].push_back(MyGaussPointOld);
}"@277@@@@
./116842157/sqs.cpp@355@CRITICAL@#pragma omp critical@"{
auto handle_count{0};
MPI_Request req_notify[mpi_num_ranks - 1];
for (int rank = 0; rank < mpi_num_ranks; rank++) {
if (rank == mpi_rank) continue;
MPI_Isend(&objective_local, 1, MPI_DOUBLE, rank, TAG_BETTER_OBJECTIVE, MPI_COMM_WORLD,
&req_notify[handle_count++]);
}
}"@277@@@@
./389341661/main.cpp@66@CRITICAL@#pragma omp critical@"{
if(signal == 1){
cout<<""Master Process: Process ""<<status.MPI_SOURCE<<"" has found the number""<<endl;
cout<<""Informing all processes to abort""<<endl;
dest = 1;
abort = 1;
while(dest < nprocs){
MPI_Send(&abort, 1, MPI_INT, dest, master_tag, MPI_COMM_WORLD);
dest = dest + 1;
}"@276@@@@
./228656264/affinity-1.c@254@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1 thread %d"", thr);
if (omp_get_num_threads () == 4 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
case 7:
p = places_array[test_places].places[2 * thr];"@275@@@@
./315333330/affinity-1.c@254@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1 thread %d"", thr);
if (omp_get_num_threads () == 4 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
case 7:
p = places_array[test_places].places[2 * thr];"@275@@@@
./497678098/triplex_finder.cpp@277@CRITICAL@#pragma omp critical (potential_lock)@"{
for (auto& potential_entry : tpx_args.potentials) {
auto result_ptr = potentials.find(potential_entry.first);
if (result_ptr == potentials.end()) {
potentials.insert(std::move(potential_entry));
} else {
seqan::mergeCount(result_ptr->second, potential_entry.second);
}
}
}"@274@@@@
./228656264/affinity-1.c@285@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#1 thread 3,%d"", thr);
if (omp_get_num_threads () == 3 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
case 7:
p = places_array[test_places].places[6];"@274@@@@
./228656264/affinity-1.c@381@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#3 thread 3,%d"", thr);
if (omp_get_num_threads () == 4 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
case 7:
p = places_array[test_places].places[6];"@274@@@@
./315333330/affinity-1.c@285@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#1 thread 3,%d"", thr);
if (omp_get_num_threads () == 3 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
case 7:
p = places_array[test_places].places[6];"@274@@@@
./315333330/affinity-1.c@381@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#1,#3 thread 3,%d"", thr);
if (omp_get_num_threads () == 4 && test_spread_master_close)
switch (places_array[test_places].count)
{
case 8:
case 7:
p = places_array[test_places].places[6];"@274@@@@
./242894375/vectorDot_critical.c@45@CRITICAL@#pragma omp critical@"{
area+=sum;
}"@274@@@@
./179716970/U-Newmark-beta.c@413@CRITICAL@#pragma omp critical@"{
VecSetValues(U_n_dt, Ndim, Mask_active_dofs_A, V_N_m_IP, ADD_VALUES);
VecSetValues(U_n_dt2, Ndim, Mask_active_dofs_A, A_N_m_IP, ADD_VALUES);
}"@274@@@@
./61810048/Laser.cpp@436@CRITICAL@#pragma omp critical@"{
double omega = omega_ * chirpProfile_->valueAt( t );
double phi = ( *phase )( j, k );
amp = timeProfile_->valueAt( t-( phi+delay_phase_ )/omega ) * ( *space_envelope )( j, k ) * sin( omega*t - phi );
}"@274@@@@
./23245147/DfEriX.cpp@387@CRITICAL@#pragma omp critical(DfEriX__getJ_rho_to_J)@"{
const int local_size = local_values.size();
assert(local_size == static_cast<int>(local_indexP.size()));
assert(local_size == static_cast<int>(local_indexQ.size()));
for (int i = 0; i < local_size; ++i) {
pJ->add(local_indexP[i], local_indexQ[i], local_values[i]);
}"@273@@@@
./499040711/image_reconstruction2.c@84@CRITICAL@#pragma omp critical@if ( d < min ) { min = d; my = y2; }@273@@@@
./81815495/create_and_destroy.cpp@798@CRITICAL@#pragma omp critical@"{
r_modelpart.Nodes().push_back(pnew_node);
r_modelpart.Elements().push_back(p_particle);

if (spheric_p_particle->IsNot(BLOCKED)){
mpAnalyticWatcher->Record(spheric_p_particle, r_modelpart);
}"@273@@@@
./2997204/radius_fmt_plug.c@157@CRITICAL@#pragma omp critical@"{
static int rec_count = 0;
int rec_max = 10;
rec_count++;
if (rec_count <= rec_max) {
rec[16] = 0;
printf(""%s: Recovered password '%s'\n"", FORMAT_LABEL, (char *)rec);
} else if (rec_count == rec_max + 1) {
printf(""%s: Further messages suppressed\n"", FORMAT_LABEL);"@272@@@@
./549299227/random_generator.cpp@16@CRITICAL@#pragma omp critical@"if (turn == current_thread && sum <= 1000)
{
int number = distribution(generator);
sum += number;
cout << ""Thread "" << current_thread << "" generated "" << number << "", ""
<< ""Sum: "" << sum << endl;

if (sum >= 1000)
{
cout << ""Thread "" << current_thread << "" wins!"" << endl;"@272@@@@
./81815495/residualbased_block_builder_and_solver.h@581@CRITICAL@#pragma omp critical@"{
dof_global_set.insert(dofs_tmp_set.begin(), dofs_tmp_set.end());
}"@271@@@@
./75787342/NutrientTransportSediment.cpp@283@CRITICAL@#pragma omp critical@"{
for (int i = 1; i <= m_nSubbsns; i++) {
m_surfRfSedOrgNToCh[i] += tmp_orgn2ch[i];
m_surfRfSedOrgPToCh[i] += tmp_orgp2ch[i];
m_surfRfSedAbsorbMinPToCh[i] += tmp_minpa2ch[i];
m_surfRfSedSorbMinPToCh[i] += tmp_minps2ch[i];
}"@269@@@@
./23348486/cheb.h@48@CRITICAL@#pragma omp critical(NEW_NODES)@"if (!y[deg][dim].size()) {
unsigned int d = deg + 1;

std::vector<Real> x(d);
Real scal = 1.0 / pvfmm::cos<Real>(0.5 * pvfmm::const_pi<Real>() / d);
for (int i = 0; i < d; i++)
x[i] =
-pvfmm::cos<Real>((i + (Real)0.5) * pvfmm::const_pi<Real>() / d) *
scal * 0.5 +
0.5;"@268@@@@
./23245147/DfTaskCtrl.cpp@1322@CRITICAL@#pragma omp critical(DfTaskCtrl__makeDistributedCutoffTable_alive)@"{ ++(this->cutoffAlive_distribution_[shellPairType]); }
}

#pragma omp critical(DfTaskCtrl__makeDistributedCutoffTable_all)
{ ++(this->cutoffAll_distribution_[shellPairType]); }
}
answer[indexI][shellTypeI].push_back(indexI);
}

for (int i = 0; i < orbListSize; ++i) {"@268@@@@
./364579717/compression_omp.c@118@CRITICAL@#pragma omp critical@"{
if (max_distance_local > max_distance) {
max_distance = max_distance_local;
farthest_pixel = farthest_pixel_local;
}
}
}
for (int channel = 0; channel < n_channels; channel++) {
centers[cluster * n_channels + channel] = data[farthest_pixel * n_channels + channel];
}"@268@@@@
./81815495/fracture_propagation_2D_utilities.hpp@716@CRITICAL@#pragma omp critical@"{
BodyGaussPointOldCellMatrix[Row][Column].push_back(MyGaussPointOld);
}"@268@@@@
./408823577/04_order_of_threads_wrong.c@20@CRITICAL@#pragma omp critical@"if ( order == my_thread_id )
{
printf( ""\tgreetings from thread num %d\n"", my_thread_id );
order++;
}
}
#else
nthreads = 1;
#endif
printf("" %d thread%s greeted you from the %sparallel region\n"", nthreads, (nthreads==1)?"" has"":""s have"", (nthreads==1)?""(non)"":"""" );"@263@@@@
./274632175/task_dot.c@29@CRITICAL@#pragma omp critical@"{
int pcnt = sync->pcnt += 1;
if ( sync->create == id ) {
BLAS_axpy(bn, FP_ONE, local_result, i_one, result, i_one);
} else {
BLAS_copy(bn, local_result, i_one, result, i_one);
sync->create = id;
}
int ready = pcnt == sync->pcompl;
sync->pcnt = ready? 0: pcnt;"@260@@@@
./106309967/dtc_openmp.cpp@132@CRITICAL@#pragma omp critical@"{
if(branchCount.find(branchVal) == branchCount.end()){
branchCount.insert(make_pair(branchVal,1));
vector <int> x;
x.push_back(data[i]);
dataElements.insert(make_pair(branchVal,x));
}
else{
branchCount[branchVal]++;
dataElements[branchVal].push_back(data[i]);"@260@@@@
./23245147/DfHpqX.cpp@259@CRITICAL@#pragma omp critical(DfHpqX__getForce_partProc)@"{
pForce_woX->add(atomIndexA, Y, coef * dKin_dA);
pForce_woX->add(atomIndexB, Y, coef * dKin_dB);
}
++index;
}
}
for (int stepP = 0; stepP < maxStepsP; ++stepP) {
const index_type indexP = shellIndexP + stepP;
for (int stepQ = 0; stepQ < maxStepsQ; ++stepQ) {"@259@@@@
./81815495/nodal_values_interpolation_process.cpp@230@CRITICAL@#pragma omp critical@"{
std::move(points_buffer.begin(),points_buffer.end(),back_inserter(point_list_destination));
}"@258@@@@
./242248042/inputTimed.c@48@CRITICAL@#pragma omp critical@"{
diff += mydiff;
}
gettimeofday(&bStart, NULL);
#pragma omp barrier
gettimeofday(&bStop, NULL);
total += (1000000*(bStop.tv_sec - bStart.tv_sec) + (bStop.tv_usec - bStart.tv_usec));
if(((float)diff)/(SIZE*SIZE) < threshold || loop > 100000) {
done = 1;
}"@255@@@@
./274632175/task_dot_async.c@288@CRITICAL@#pragma omp critical@"{
pcompl = dotid->pcompl;
pcnt = dotid->pcnt;
if ( ! ( pcnt >= pcompl - release ) ) {
if ( dotid->create == id ) {
BLAS_axpy(bn, FP_ONE, local_result, i_one, result, i_one);
} else {
BLAS_copy(bn, local_result, i_one, result, i_one);
dotid->create = id;
}"@255@@@@
./160418114/bnb_hybrid.cpp@135@CRITICAL@#pragma omp critical@"if (sol.is_feasible())
{
fflush(stdout);
pos = 0;
pos += sprintf(buffer + pos, ""DONE "");
pos += sol.to_str(buffer + pos);
pos += sprintf(buffer + pos, "" \0"");
fflush(stdout);
MPI_Send(buffer, strlen(buffer) + 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
fl = true;"@255@@@@
./3769753/BloomIO.h@69@CRITICAL@#pragma omp critical(cerr)@"{
readCount++;
if (readCount % LOAD_PROGRESS_STEP == 0)
std::cerr << ""Loaded "" << readCount << "" reads into Bloom filter\n"";
}"@254@@@@
./228656264/affinity-1.c@608@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#2,#1 thread 2,0,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@253@@@@
./228656264/affinity-1.c@827@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#2,#1 thread 2,0,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@253@@@@
./228656264/affinity-1.c@897@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#2,#3 thread 2,3,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@253@@@@
./315333330/affinity-1.c@608@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#2,#1 thread 2,0,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@253@@@@
./315333330/affinity-1.c@827@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#2,#1 thread 2,0,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@253@@@@
./315333330/affinity-1.c@897@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#2,#3 thread 2,3,%d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@253@@@@
./84968841/worker.c@72@CRITICAL@#pragma omp critical(MAIN_KEEPER_UPDATE)@"{
main_keeper[main_keeper_size] = v_event_array;
main_keeper_dim[main_keeper_size] = v_event_size;
print_fine(""Worker %d processed produced a top_three sequence. put it at position %d in main_keeper"", worker_id, main_keeper_size);
main_keeper_size++;
}"@252@@@@
./163540180/fig6.22-overlap-comp-io.c@352@CRITICAL@#pragma omp critical@"{
if (first) {
first = FALSE;
#pragma omp flush
printf(""Thread ID  Function             Execution Status Array\n"");
printf(""                    Value of i:"");
for (int j=0; j<N; j++) printf(""%3d"",j);
printf(""\n\n"");
}
printf(""%6d     %-20s"",TID,name);"@251@@@@
./3769753/bloom-dbg.h@916@CRITICAL@#pragma omp critical(basesProgress)@"{
if (counters.basesAssembled >= basesProgressLine) {
basesProgressMessage(counters);
while (counters.basesAssembled >= basesProgressLine)
basesProgressLine += BASES_PROGRESS_STEP;
}
}"@250@@@@
./75787342/NutrCH_QUAL2E.cpp@118@CRITICAL@#pragma omp critical@"{
for (int irch = 0; irch <= m_nReaches; irch++) {
m_chDaylen[irch] += tmp_chDaylen[irch];
m_chSr[irch] += tmp_chSr[irch];
m_chTemp[irch] += tmp_chTemp[irch];
m_chCellCount[irch] += tmp_chCellCount[irch];
}
}"@250@@@@
./228656264/affinity-1.c@576@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#2 thread 2,%d"", thr);
if (omp_get_num_threads () == 4
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@248@@@@
./228656264/affinity-1.c@687@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#4 thread 2,%d"", thr);
if (omp_get_num_threads () == 6
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@248@@@@
./228656264/affinity-1.c@793@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#2 thread 2,%d"", thr);
if (omp_get_num_threads () == 4
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@248@@@@
./315333330/affinity-1.c@576@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#2 thread 2,%d"", thr);
if (omp_get_num_threads () == 4
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@248@@@@
./315333330/affinity-1.c@687@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#4 thread 2,%d"", thr);
if (omp_get_num_threads () == 6
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@248@@@@
./315333330/affinity-1.c@793@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#2 thread 2,%d"", thr);
if (omp_get_num_threads () == 4
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@248@@@@
./202712923/atomic_detail.h@185@CRITICAL@#pragma omp critical@"{
old = *address;
*address = (old >= arg) ? T(0) : old + T(1);
}"@248@@@@
./3769753/bloom-dbg.h@908@CRITICAL@#pragma omp critical(readsProgress)@"{
++counters.readsProcessed;
if (params.verbose && counters.readsProcessed % READS_PROGRESS_STEP == 0)
readsProgressMessage(counters);
}

if (params.verbose)
#pragma omp critical(basesProgress)
{
if (counters.basesAssembled >= basesProgressLine) {"@247@@@@
./23245147/DfTaskCtrl.cpp@1255@CRITICAL@#pragma omp critical(DfTaskCtrl__selectShellArrayByDistribution_all)@{ ++(this->cutoffAll_distribution_[shellPairType]); }@247@@@@
./23245147/DfOverlapX.cpp@580@CRITICAL@#pragma omp critical(DfOverlapX__getForce)@"{
pForce->add(atomIndexA, X, coef * dSdA);
pForce->add(atomIndexB, X, coef * dSdB);
}"@245@@@@
./576375980/gengrupos_p.c@74@CRITICAL@#pragma omp critical@"{
cluster_data[grupo].elem_index[cluster_data[grupo].nelems] = i;
cluster_data[grupo].nelems++;
}"@245@@@@
./228656264/affinity-1.c@719@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4 thread %d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@243@@@@
./315333330/affinity-1.c@719@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4 thread %d"", thr);
if (omp_get_num_threads () == 5
&& (test_spread_master_close || test_true))
switch (places_array[test_places].count)
{
case 8:
case 7:"@243@@@@
./106249716/processing_unit_mgt.cxx@214@CRITICAL@#pragma omp critical@"{
recv_packets.push_back(Thread_comm_packet(buf, max_count*size, src, dst, tag));
}"@243@@@@
./3769753/RAlgorithmsShort.cpp@537@CRITICAL@#pragma omp critical(maxSupport)@"{
if (support.unknown()) {
unknown = true;
end = true;
maxSupport = support;
} else if (support > maxSupport) {
maxSupport = support;
} else if (maxSupport.found == 0 && support.tests > maxSupport.tests) {
maxSupport.tests = support.tests;
}"@241@@@@
./23245147/DfEriX.cpp@1599@CRITICAL@#pragma omp critical(DfEriX__getK_integralDriven_part)@"{
for (int i = 0; i < numOfThreadElements; ++i) {
pIndexPairs[numOfElements * 2] = pThreadIndexPairs[i * 2];
pIndexPairs[numOfElements * 2 + 1] =
pThreadIndexPairs[i * 2 + 1];
pValues[numOfElements] = pThreadValues[i];
++numOfElements;
}
}
"@240@@@@
./23245147/DfEriX.cpp@667@CRITICAL@#pragma omp critical(DfEriX__getJ_integralDriven_part)@"{
for (int i = 0; i < numOfThreadElements; ++i) {
pIndexPairs[numOfElements * 2] = pThreadIndexPairs[i * 2];
pIndexPairs[numOfElements * 2 + 1] =
pThreadIndexPairs[i * 2 + 1];
pValues[numOfElements] = pThreadValues[i];
++numOfElements;
}
}
"@240@@@@
./77235735/floorplan.c@259@CRITICAL@#pragma omp critical@"if (area < MIN_AREA) {
MIN_AREA         = area;
MIN_FOOTPRINT[0] = footprint[0];
MIN_FOOTPRINT[1] = footprint[1];
memcpy(BEST_BOARD, board, sizeof(ibrd));
bots_debug(""N  %d\n"", MIN_AREA);
}
}
} else if (area < MIN_AREA) {
#pragma omp atomic"@240@@@@
./77235735/floorplan.c@369@CRITICAL@#pragma omp critical@"if (area < MIN_AREA) {
MIN_AREA         = area;
MIN_FOOTPRINT[0] = footprint[0];
MIN_FOOTPRINT[1] = footprint[1];
memcpy(BEST_BOARD, board, sizeof(ibrd));
bots_debug(""N  %d\n"", MIN_AREA);
}
}
} else if (area < MIN_AREA) {
#pragma omp atomic"@240@@@@
./3769753/bloom-dbg.h@513@CRITICAL@#pragma omp critical(redundancyCheck)@"{

if (seq.length() < params.k + fpLookAhead - 1) {

if (contigEndKmers.find(v1) != contigEndKmers.end() &&
contigEndKmers.find(v2) != contigEndKmers.end()) {
redundant = true;
} else {
contigEndKmers.insert(v1);
contigEndKmers.insert(v2);"@239@@@@
./23245147/DfHpqX.cpp@339@CRITICAL@#pragma omp critical(DfHpqX__getForce_partProc)@"{
pForce->add(atomIndexA, Y, coef * gradA);
pForce->add(atomIndexB, Y, coef * gradB);
pForce->add(atomIndexC, Y, coef * gradC);
}"@239@@@@
./392927467/main.cpp@102@CRITICAL@#pragma omp critical@"{
MPI_Recv (recv_slave, max_size, MPI_INT,0,6, MPI_COMM_WORLD, &status);
MPI_Get_count(&status, MPI_INT,&size_of_recv);
cout<<""SLAVE ""<<rank<<"": "";

for (int i =0; i<size_of_recv; i++)
{
cout<<recv_slave[i]<<"" "";
}
cout<<endl<<endl<<endl;"@238@@@@
./31732163/sync.cpp@74@CRITICAL@#pragma omp critical(resize)@"{
size_t old = bucket[index].size();
if (old <= chunk) {
bucket[index].resize(old * 2);
std::fill(bucket[index].begin() + old, bucket[index].end(), -1);
if (verb)
std::fprintf(stderr, ""warning: stenc[%d] was reallocated\n"", index);
}
}"@237@@@@
./228656264/affinity-1.c@530@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2,#4 thread 3,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}
}"@237@@@@
./228656264/affinity-1.c@928@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#3 thread 2,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}"@237@@@@
./315333330/affinity-1.c@485@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2,#1 thread 3,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}
}"@237@@@@
./315333330/affinity-1.c@500@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2,#2 thread 3,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}
}"@237@@@@
./315333330/affinity-1.c@530@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2,#4 thread 3,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}
}"@237@@@@
./315333330/affinity-1.c@928@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#4,#3 thread 2,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}
}"@237@@@@
./62011740/equiv.hpp@389@CRITICAL@#pragma omp critical@"{
if (matches.size() > max_shared){
max_shared = matches.size();
sample = ref_pairs[i].first;
shared_intersection = matches.size();
total_union = read_hashes.size();
}
}"@237@@@@
./23245147/DfCD_Parallel.cpp@983@CRITICAL@#pragma omp critical(DfCD_Parallel__calcCholeskyVectorsOnTheFlyA_update_error)@"{
if (error < my_error) {
error = my_error;
error_global_loc = my_error_global_loc;
error_local_loc = my_error_local_loc;
}
}
}
rComm.allReduce_MAXLOC(&error, &error_global_loc);
global_diagonals[global_pivot[error_global_loc]] = error;"@236@@@@
./315333330/affinity-1.c@562@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#1 thread 2,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[0];
print_affinity (p);
printf (""\n"");
}
}"@236@@@@
./315333330/affinity-1.c@673@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#3 thread 2,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[0];
print_affinity (p);
printf (""\n"");
}
}"@236@@@@
./228656264/affinity-1.c@485@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2,#1 thread 3,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}"@235@@@@
./228656264/affinity-1.c@500@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2,#2 thread 3,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}"@235@@@@
./228656264/affinity-1.c@515@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2,#3 thread 3,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}"@235@@@@
./315333330/affinity-1.c@515@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#2,#3 thread 3,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[pp];
print_affinity (p);
printf (""\n"");
}"@235@@@@
./81815495/auxiliar_model_part_utilities.cpp@79@CRITICAL@#pragma omp critical@"{
list_of_properties.insert(buffer_list_of_properties.begin(),buffer_list_of_properties.end());
}"@235@@@@
./437699070/MandelbrotSetParallel.cpp@153@CRITICAL@#pragma omp critical@"{
z.real = neg_X + ((float)x * scale_real);
slave_colors[x + 1] = cal_pixel(z);
}"@235@@@@
./3769753/bloom-dbg.h@883@CRITICAL@#pragma omp critical(in)@"for (bufferSize = 0; bufferSize < SEQ_BUFFER_SIZE && readsUntilCheckpoint > 0;) {
FastaRecord rec;
good = in >> rec;
if (!good)
break;
#pragma omp atomic
readsUntilCheckpoint--;
buffer.push_back(rec);
bufferSize += rec.seq.length();
}"@234@@@@
./228656264/affinity-1.c@562@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#1 thread 2,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[0];
print_affinity (p);
printf (""\n"");
}"@234@@@@
./228656264/affinity-1.c@673@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3,#3 thread 2,%d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[0];
print_affinity (p);
printf (""\n"");
}"@234@@@@
./228656264/affinity-1.c@546@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3 thread %d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[0];
print_affinity (p);
printf (""\n"");
}"@229@@@@
./315333330/affinity-1.c@546@CRITICAL@#pragma omp critical@"{
struct place p = places_array[0].places[0];
int thr = omp_get_thread_num ();
printf (""#3 thread %d"", thr);
if (test_spread_master_close || test_true)
p = places_array[test_places].places[0];
print_affinity (p);
printf (""\n"");
}"@229@@@@
./36948145/buddhabrot_omp1.cpp@466@CRITICAL@#pragma omp critical@"{
const size_t n = iCel;
const double percent = (100.0 * n) / nCel;
static char  sNumerator[ 32 ];
itoaComma( n, sNumerator );

printf( ""%6.2f%% = %s / %s%s"", percent, sNumerator, sDenominator, gaBackspace );
fflush( stdout );
}"@228@@@@
./249790277/gmm.c@664@CRITICAL@#pragma omp critical@"{
clusterPosteriorSum_ = vl_calloc(sizeof(TYPE), numClusters) ;
means_ = vl_calloc(sizeof(TYPE), self->dimension * numClusters) ;
covariances_ = vl_calloc(sizeof(TYPE), self->dimension * numClusters) ;
}"@227@@@@
./163540180/fig4.58-critical-region-minval.c@40@CRITICAL@#pragma omp critical@"{
printf(""Thread %d entered critical region\n"",TID);
if ( Scale < LScale )
{
ssq = (Scale/LScale) * ssq + Lssq;
Scale = LScale;
printf(""\tThread %d: Reset Scale to %f\n"",TID,Scale);
} else {
ssq = ssq + (LScale/Scale) * Lssq;
}"@227@@@@
./607375912/Model.cpp@228@CRITICAL@#pragma omp critical@"{
for (size_t j = 0; j < alphabet_size; ++j) {
for (size_t k = 0; k < motif_width; ++k) {
nb_fg_ss[k][j] += nb_fg_ss_l[k][j];
nb_fg_ds[k][j] += nb_fg_ds_l[k][j];
}
nb_bg_ss[j] += nb_bg_ss_l[j];
nb_bg_ds[j] += nb_bg_ds_l[j];
}
}"@227@@@@
./497678098/tfo_finder.cpp@221@CRITICAL@#pragma omp critical (potentials)@"{
potentials.reserve(potentials.size() + tfo_args.potentials.size());
std::move(tfo_args.potentials.begin(), tfo_args.potentials.end(), std::back_inserter(potentials));
}
}
#endif
}
}

void find_tfo_motifs(const options& opts)"@226@@@@
./497678098/tts_finder.cpp@169@CRITICAL@#pragma omp critical (potentials)@"{
potentials.reserve(potentials.size() + tts_args.potentials.size());
std::move(tts_args.potentials.begin(), tts_args.potentials.end(), std::back_inserter(potentials));
}"@226@@@@
./73549492/Shaders.cpp@77@CRITICAL@#pragma omp critical@"{
Window::GetSingleton()->MakeContextCurrent();
glShaderSource(mFragmentShader, 1, &fragmentSourcePtr, nullptr);
}"@226@@@@
./3769753/nttest.cpp@223@CRITICAL@#pragma omp critical(uFile)@good = getSeq(uFile, line);@225@@@@
./106249716/patcc.cxx@387@CRITICAL@#pragma omp critical@"{
if (x_buckets[idx].min > coord_values[PDLN_LAT][i]) x_buckets[idx].min = coord_values[PDLN_LAT][i];
if (x_buckets[idx].max < coord_values[PDLN_LAT][i]) x_buckets[idx].max = coord_values[PDLN_LAT][i];
x_buckets[idx].num++;
}"@225@@@@
./106249716/patcc.cxx@400@CRITICAL@#pragma omp critical@"{
if (y_buckets[idx].min > coord_values[PDLN_LON][i]) y_buckets[idx].min = coord_values[PDLN_LON][i];
if (y_buckets[idx].max < coord_values[PDLN_LON][i]) y_buckets[idx].max = coord_values[PDLN_LON][i];
y_buckets[idx].num++;
}"@225@@@@
./81815495/inlet.cpp@322@CRITICAL@#pragma omp critical@"{
ids_to_remove.insert(ids_to_remove.end(), ids_to_remove_partial.begin(), ids_to_remove_partial.end());

for (unsigned int i = 0; i < ids_to_remove.size(); ++i){
mOriginInletSubmodelPartIndexes.erase(ids_to_remove[i]);
}
}"@224@@@@
./23245147/DfCD.cpp@2833@CRITICAL@#pragma omp critical(DfCD__setERIs)@"{
assert(this->ERI_cache_A_.find(IndexPair4A(shellIndexP, shellIndexQ, shellIndexR, shellIndexS)) !=
this->ERI_cache_A_.end());
values = this->ERI_cache_A_[IndexPair4A(shellIndexP, shellIndexQ, shellIndexR, shellIndexS)];
}"@223@@@@
./81815495/inlet.cpp@484@CRITICAL@#pragma omp critical@"{
ids_to_remove.insert(ids_to_remove.end(), ids_to_remove_partial.begin(), ids_to_remove_partial.end());

for (unsigned int i = 0; i < ids_to_remove.size(); ++i){
mOriginInletSubmodelPartIndexes.erase(ids_to_remove[i]);
}
}"@223@@@@
./81815495/nonlocal_damage_3D_utilities.hpp@124@CRITICAL@#pragma omp critical@"{
mGaussPointList.push_back( new GaussPoint(ConstitutiveLawVector[GPoint],AuxGlobalCoordinates,Weight) );
rAuxVariables.GaussPointCellMatrix[Row][Column][Section].push_back(mGaussPointList[NGPoints]);
NGPoints++;
}"@214@@@@
./274632175/task_csrmm.c@66@CRITICAL@#pragma omp critical@"{
pcnt = sync->pcnt++;
if ( sync->pcnt == sync->pcompl ) {
sync->pcnt = 0;
}
prof_add(&sync->prof, idx, 1.0);
if ( pcnt >= pcompl - release ) {
prof_reg(&sync->prof, idx, 0);
} else {
prof_reg(&sync->prof, idx, 1);"@214@@@@
./423823812/counting_sort.c@97@CRITICAL@#pragma omp critical@"{
for (size_t k = 0; k < C_len; k++)
{
C[k] += C_loc[k];
}
}
free(C_loc);
}
#elif defined(COUNT_OCCURRANCE_2)
#pragma omp parallel for default(none) shared(C) firstprivate(A, A_len, C_len, min) num_threads(threads)"@214@@@@
./537831675/bfs.cpp@56@CRITICAL@#pragma omp critical@"{
memcpy(new_frontier->vertices + new_frontier->count, local_frontier, sizeof(int) * local_count);
new_frontier->count += local_count;
}"@213@@@@
./81815495/mixed_generic_criteria.h@338@CRITICAL@#pragma omp critical@"{
for (int i = 0; i < mVariableSize; i++) {
rDofsCount[i] += dofs_counter_reduction[i];
rSolutionNormsVector[i] += var_solution_norm_reduction[i];
rIncreaseNormsVector[i] += var_correction_norm_reduction[i];
}
}"@211@@@@
./191530223/MainTable.cxx@431@CRITICAL@#pragma omp critical@"{
h = GetEntropy(4, P);
hx[0] = P[0] + P[1];
hx[1] = 1. - hx[0];

hy[0] = P[0] + P[2];
hy[1] = 1. - hy[0];

H = GetEntropy(2, hx, firstComponent) + GetEntropy(2, hy, secondComponent) - h;
file  << H << endl;"@207@@@@
./81815495/nonlocal_damage_2D_utilities.hpp@116@CRITICAL@#pragma omp critical@"{
mGaussPointList.push_back( new GaussPoint(ConstitutiveLawVector[GPoint],AuxGlobalCoordinates,Weight) );
rAuxVariables.GaussPointCellMatrix[Row][Column].push_back(mGaussPointList[NGPoints]);
NGPoints++;
}"@205@@@@
./81815495/rans_apply_exact_nodal_periodic_condition_process.cpp@170@CRITICAL@#pragma omp critical@"{
condition_id++;
auto p_condition = r_base_model_part.CreateNewCondition(
""PeriodicCondition"", condition_id, node_id_list, p_properties);
p_condition->Set(PERIODIC);
rMasterNode.Set(PERIODIC);
}"@202@@@@
./481917853/sobel_mpi_omp.cpp@64@CRITICAL@#pragma omp critical@"{
if (pixel_value < pixel_value_min) pixel_value_min = pixel_value;
}"@201@@@@
./481917853/sobel_omp.cpp@71@CRITICAL@#pragma omp critical@"{
if (pixel_value < pixel_value_min) pixel_value_min = pixel_value;
}"@201@@@@
./358055212/solve_BrasCPaccel.hpp@894@CRITICAL@#pragma omp critical@"{
for (int mode = 0; mode < TNS_ORDER; mode++)
{
Factors[mode] += ratio*local_Factors[mode];
Y_Factors[mode] += ratio*local_Y_Factors[mode];
Factors_prev[mode] += ratio*local_Factors_prev[mode];
}
}"@200@@@@
./77227085/rstest.cpp@505@CRITICAL@#pragma omp critical(io)@"{
std::string msg = std::string(argv[i]) + "" failed: "" + e.what();
#if !defined(__has_feature) || !__has_feature(thread_sanitizer)
cerr << msg << endl;
#endif
failedTests.try_emplace(argv[i], msg);
}"@199@@@@
./358055212/solve_BrasCPaccel.hpp@585@CRITICAL@#pragma omp critical@"{
for (int mode = 0; mode < TNS_ORDER; mode++)
{
Factors[mode] += ratio*local_Factors[mode];
Y_Factors[mode] += ratio*local_Y_Factors[mode];
Factors_prev[mode] += ratio*local_Factors_prev[mode];
}
}"@199@@@@
./121361183/omp_matvec.c@32@CRITICAL@#pragma omp critical@"{
total = total + c[i];
printf(""  thread %d did row %d\t c[%d]=%.2f\t"",tid,i,i,c[i]);
printf(""Running total= %.2f\n"",total);
}"@199@@@@
./330476364/loop_affine.c@78@CRITICAL@#pragma omp critical@"{
thrd = -1;
if (limits_hi[myid] - limits_lo[myid] > 0) {
thrd = myid;
}
else {
int thrd_iter = -1;
int temp_iter = 0;
for (int i = 0; i < nthreads; i++) {
int limits_d = limits_hi[i] - limits_lo[i];"@199@@@@
./23245147/TlCommunicate.cpp@565@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@198@@@@
./81815495/impose_rigid_movement_process.cpp@116@CRITICAL@#pragma omp critical@"{
r_rigid_model_part.AddMasterSlaveConstraints(constraints_buffer.begin(),constraints_buffer.end());
mrThisModelPart.AddMasterSlaveConstraints(constraints_buffer.begin(),constraints_buffer.end());
}"@198@@@@
./93911911/Internal.hpp@375@CRITICAL@#pragma omp critical@"if( parallel::g_scratchMem == nullptr ) parallel::g_scratchMem = (t_scratchMem*) common::allocate( sizeof(t_scratchMem),
ALIGNMENT.BASE.HEAP,
m_memTypes.hbw.scratchMem,
m_memTypes.huge.scratchMem );"@198@@@@
./116842157/sqs.cpp@382@CRITICAL@#pragma omp critical@"{
BOOST_LOG_TRIVIAL(debug) << ""do_pair_iterations::rank::"" << mpi_rank << ""::thread::"" << thread_id << ""::avg_loop_time = "" << avg_loop_time;
thread_timings[mpi_rank][thread_id] = avg_loop_time;
}"@196@@@@
./77235735/floorplan.c@312@CRITICAL@#pragma omp critical@"if (area < MIN_AREA) {
MIN_AREA         = area;
MIN_FOOTPRINT[0] = footprint[0];
MIN_FOOTPRINT[1] = footprint[1];
memcpy(BEST_BOARD, board, sizeof(ibrd));
bots_debug(""N  %d\n"", MIN_AREA);
}"@189@@@@
./77235735/floorplan.c@149@CRITICAL@#pragma omp critical@"if (area < MIN_AREA) {
MIN_AREA         = area;
MIN_FOOTPRINT[0] = footprint[0];
MIN_FOOTPRINT[1] = footprint[1];
memcpy(BEST_BOARD, board, sizeof(ibrd));
bots_debug(""N  %d\n"", MIN_AREA);
}"@189@@@@
./77235735/floorplan.c@201@CRITICAL@#pragma omp critical@"if (area < MIN_AREA) {
MIN_AREA         = area;
MIN_FOOTPRINT[0] = footprint[0];
MIN_FOOTPRINT[1] = footprint[1];
memcpy(BEST_BOARD, board, sizeof(ibrd));
bots_debug(""N  %d\n"", MIN_AREA);
}"@189@@@@
./81815495/pqmpm_partition_utilities.cpp@23@CRITICAL@#pragma omp critical@"KRATOS_ERROR << ""PartitionMasterMaterialPointsIntoSubPoints | Quadrature point geometry ID from the material point and ID of the quadrature point geometry to be attached are not equal!\n"";"@188@@@@
./89341144/parallel_swarm_search.cpp@234@CRITICAL@#pragma omp critical@"{
if (fitness_value < result.fitness_value)
{
result.normalised_agent = positions.col(n);
result.fitness_value = fitness_value;
randomize_topology = false;
}"@186@@@@
./106309967/dtc_openmp.cpp@258@CRITICAL@#pragma omp critical@"{
if(dividedData.find(attrVal) == dividedData.end()){
vector <int> x;
x.push_back(data[i]);
dividedData.insert(make_pair(attrVal,x));
}
else{
dividedData[attrVal].push_back(data[i]);
}
}"@186@@@@
./342916365/Funcoes.h@48@CRITICAL@#pragma omp critical@"{
if (fila->frente < fila->tras){

for (i=0;i<strlen(fila->linha[fila->frente].conteudo);i++){
l[i] = toupper (fila->linha[fila->frente].conteudo[i]);
}

Substring_count(l, palavra);
}
"@185@@@@
./610749801/parallel1.c@26@CRITICAL@#pragma omp critical@"{
f[i].x += mag * dir.x / dist;
f[i].y += mag * dir.y / dist;
f[i].z += mag * dir.z / dist;
f[j].x -= mag * dir.x / dist;
f[j].y -= mag * dir.y / dist;
f[j].z -= mag * dir.z / dist;
}"@183@@@@
./66961777/points_clustering.cpp@41@CRITICAL@#pragma omp critical@"{
cluster_mean[cluster_index] = ((cluster_mean[cluster_index] * cluster_count[cluster_index]) + points[i][0]) /
( cluster_count[cluster_index] + 1);
cluster_count[cluster_index]++;
}"@182@@@@
./81815495/logger.cpp@22@CRITICAL@#pragma omp critical@"{
GetDefaultOutputInstance().WriteMessage(mCurrentMessage);
for (auto i_output = outputs.begin(); i_output != outputs.end(); ++i_output)
(*i_output)->WriteMessage(mCurrentMessage);
}"@182@@@@
./109846964/main.cpp@362@CRITICAL@#pragma omp critical(pCreatureDisplay)@"{
int nbTry1 = 0, nbTry3 = 0;

#ifdef DISPLAY_ANIM
if (thisTime - creatureTime > 2*(creatureID/5)+5) {
creatureID++;
if (creatureID < animCreature.size())
{
creatureTime = thisTime;"@181@@@@
./345031193/main1.cpp@158@CRITICAL@#pragma omp critical@"{
res = norm / normb;
countIt++;

if ((countIt > 100000 && lastres > res) || res == INFINITY) {
if (tau < 0) {
printf(""Does not converge\n"");
res = 0;
} else {
tau = (-1)*parameter;"@181@@@@
./81815495/master_slave_process.cpp@59@CRITICAL@#pragma omp critical@"{
std::move(index_node_buffer.begin(),index_node_buffer.end(),back_inserter(index_node));
std::move(index_cond_buffer.begin(),index_cond_buffer.end(),back_inserter(index_cond));
}"@179@@@@
./72936111/server.h@182@CRITICAL@#pragma omp critical(CriticalClient)@"{
int socketPosition = -1;
for(int idxClient = 0 ; idxClient < nbClients ; ++idxClient){
if( clients[idxClient].first == inClientSocket ){
socketPosition = idxClient;
break;
}
}"@177@@@@
./274632175/task_dot_async.c@249@CRITICAL@#pragma omp critical@"{
if ( bitmap[idx] ) {
fp_t local_result[bn];
int j;
for ( j=0; j<bn; ++j ) {
local_result[j] = BLAS_dot(bm, X, i_one, Y, i_one);
X += m;
Y += m;
}
if ( dotid->create == id ) {"@176@@@@
./105016937/openmp_compression.cpp@128@CRITICAL@#pragma omp critical@"{
if(cluster.find(min_rgb_index)==cluster.end())
{    vector<int> v;
v.push_back(i);
cluster.insert(make_pair(min_rgb_index,v));
}
else
cluster[min_rgb_index].push_back(i);
}
}"@176@@@@
./3769753/RAlgorithmsShort.cpp@126@CRITICAL@#pragma omp critical(ReadSizes)@"{
for (const auto& i : hist) {
ReadSize* batch = nullptr;
bool found = false;
for (auto& b : ReadSize::readSizes) {
if (b.size == i.first) {
found = true;
batch = &b;
break;
}"@175@@@@
./389341661/main.cpp@46@CRITICAL@#pragma omp critical@"{
MPI_Send(&search_num, 1, MPI_INT, dest, master_tag, MPI_COMM_WORLD);
MPI_Send(&data_set1[ind], div, MPI_INT, dest, master_tag, MPI_COMM_WORLD);
dest += 1;
ind = ind + div;
}"@175@@@@
./528666630/wave.cpp@76@CRITICAL@#pragma omp critical@"{
rc = wave_function(i);
newval[i] = rc;
oldval[i] = values[i];
values[i] = newval[i];
}
if(i < 10 || i > 90){
printf(""thread#= %d  newval[%d]= %.8lf\n"", t, i, values[i]);
}
}"@175@@@@
./182564675/tmandel1.c@67@CRITICAL@#pragma omp critical@"{
long color = (long) ((k-1) * scale_color) + min_color;
if (setup_return == EXIT_SUCCESS) {
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}
}"@174@@@@
./81815495/memory_pool.h@59@CRITICAL@#pragma omp critical@"{
if (r_pools.size() <= BlockSize)
r_pools.resize(BlockSize + 1, nullptr);
}
}

if (r_pools[BlockSize] == nullptr) {
#pragma omp critical
{
if (r_pools[BlockSize] == nullptr)"@174@@@@
./81815495/move_particle_utility_pfem2.h@413@CRITICAL@#pragma omp critical@"{
if (mparticles_vector[freeparticle].GetEraseFlag()==true)
{
mparticles_vector[freeparticle].GetEraseFlag()=false;
keep_looking=false;
}
}
if (keep_looking==false)
break;
"@172@@@@
./274632175/task_csrmm.c@110@CRITICAL@#pragma omp critical@"{
if ( sync->create == id ) {
BLAS_axpy(1, FP_ONE, &local_result, i_one, result, i_one);
} else {
BLAS_copy(1, &local_result, i_one, result, i_one);
sync->create = id;
}
}"@171@@@@
./328225251/php_mt_seed.c@182@CRITICAL@#pragma omp critical@"do {
if (!*found)
putc('\n', stderr);
printf(""seed = 0x%08x = %u (PHP %s)\n"",
seed, seed, versions[version]);
(*found)++;
} while (version == PHP_LEGACY && !(seed++ & 1));"@171@@@@
./269991796/pi_mc_omp.c@56@CRITICAL@#pragma omp critical@"{
j = m;
pi = nIn / j * 4.0;
time(&tnew);
printf(""%14.10Lf%% in %2d:%02d : %.16Lf\n"", (j / n * 100), (int) (difftime(tnew, t) / 60), (int) difftime(tnew, t) % 60, pi);
}"@169@@@@
./276759666/Ejemplo_4_2_OpenMP.c@11@CRITICAL@#pragma omp critical@"{
printf(""Hilo %d: Línea 1\n"",tid);
if(tid==2) sleep(1);
if(tid==1) sleep(3);
printf(""Hilo %d: Línea 2\n"",tid);
if(tid==0) sleep(2);
printf(""Hilo %d: Línea 3\n"",tid);
}"@168@@@@
./176131462/sudoku_solver_parallel_b.c@12@CRITICAL@#pragma omp critical@"{
printf(""solution matrix\n"");
int row, col;
for (row = 0; row < box_sz; row++)
{
for (col = 0; col < box_sz; col++)
printf(""%d "", matrix[row][col]);
printf(""\n"");
}
}"@167@@@@
./308540723/openmp_code.c@33@CRITICAL@#pragma omp critical@"{
for (; it < itmax; it++) {
if (!working_iterations[it]) break;
}
if (it < itmax) {
working_iterations[it] = 1;
}
}"@166@@@@
./472427720/parallel_openmp_csr_Advanced.hpp@170@CRITICAL@#pragma omp critical@"{
if (global_start_p == queue_len)
{
work_remained = false;
}
else
{
local_start = global_start_p;
local_end = local_start + work_chunk;
global_start_p += work_chunk;"@166@@@@
./81815495/logger.cpp@42@CRITICAL@#pragma omp critical@"{
auto i = std::find(GetOutputsInstance().begin(), GetOutputsInstance().end(), pTheOutput);
if (i != GetOutputsInstance().end()) {
GetOutputsInstance().erase(i);
}
}"@165@@@@
./6987353/builtin.hpp@842@CRITICAL@#pragma omp critical@"{
b1_norm += loc_norm;
radius  += loc_radi;
}
}

if (++iter < power_iters) {
b1_norm = 1 / sqrt(b1_norm);
#pragma omp parallel for
for(ptrdiff_t i = 0; i < n; ++i) {"@165@@@@
./307084800/bugged3.c@48@CRITICAL@#pragma omp critical@"{
printf(""\nThread %d did section %d. The results are:\n"", tid, section);
for (i = 0; i < N; i++)
{
printf(""%f "", array[i]);
j++;
if (j == 6)
{
printf(""\n"");
j = 1;"@164@@@@
./242248042/ll.c@56@CRITICAL@#pragma omp critical@"{
if (head != tail) {
while (tail == head) ;
while (head + size < tail && size < CHUNK_SIZE) {
buf[size] = worklist[(head+size)%wlsize];
size++;
}
head += size;
}
}"@164@@@@
./146155120/omp_bug3.c@48@CRITICAL@#pragma omp critical@"{
printf(""\nThread %d did section %d. The results are:\n"", tid, section);
for (i=0; i<N; i++) {
printf(""%e  "",array[i]);
j++;
if (j == 6) {
printf(""\n"");
j = 1;
}
}"@164@@@@
./149035017/demo.c@118@CRITICAL@#pragma omp critical@"{
if (shared_max_density < max_density) {
shared_max_density = max_density;
}
if (shared_max_velocity2 < max_velocity2) {
shared_max_velocity2 = max_velocity2;
}
}"@163@@@@
./149035017/headless.c@89@CRITICAL@#pragma omp critical@"{
if (shared_max_density < max_density) {
shared_max_density = max_density;
}
if (shared_max_velocity2 < max_velocity2) {
shared_max_velocity2 = max_velocity2;
}
}"@163@@@@
./538481564/omp11.cpp@32@CRITICAL@#pragma omp critical@"{
if (a[i] % DIVIDER == 0 && a[i] > max) {
max = a[i];
}
}"@163@@@@
./3769753/RAlgorithmsShort.cpp@942@CRITICAL@#pragma omp critical(repeatInstancesMap)@"{
repeatInstancesMap.emplace(repeat.index(), std::vector<RepeatInstance>());
repeatInstancesMap.emplace((repeat ^ true).index(), std::vector<RepeatInstance>());
}"@162@@@@
./61810048/SimWindow.cpp@189@CRITICAL@#pragma omp critical@"#endif
mypatch = PatchesFactory::clone( vecPatches( 0 ), params, smpi, vecPatches.domain_decomposition_, h0 + patch_to_be_created[my_thread][j], n_moved, false );"@162@@@@
./179716970/U-Newmark-beta.c@788@CRITICAL@#pragma omp critical@"{
for (unsigned i = 0; i < Ndim; i++) {
if (ActiveDOFs.Nodes2Mask[Mask_dofs_A[i]] != -1) {
Lagrangian[Mask_dofs_A[i]] += InternalForcesDensity_Ap[i] * V0_p;
}
}"@162@@@@
./179716970/U-Static.c@475@CRITICAL@#pragma omp critical@"{
for (unsigned i = 0; i < Ndim; i++) {
if (ActiveDOFs.Nodes2Mask[Mask_dofs_A[i]] != -1) {
Lagrangian[Mask_dofs_A[i]] += InternalForcesDensity_Ap[i] * V0_p;
}
}"@162@@@@
./392454230/Heinritz-Hsiao.c@31@CRITICAL@#pragma omp critical@"{
if (tmpDist < mindist1) {
mindist2 = mindist1;
index2 = index1;
index1 = i;
mindist1 = tmpDist;
}
else if (tmpDist < mindist2) {
mindist2 = tmpDist;
index2 = i;"@162@@@@
./365493075/main.cpp@44@CRITICAL@#pragma omp critical@"{
privateNonce = nonce;
nonce++;
}"@162@@@@
./81683654/LockBasedBinaryListMap.h@364@CRITICAL@#pragma omp critical (check_update_pointer)@"{
if(	map->size <= (*prev_map_size) + map->umbral + all_t
&&	map->size >= map->umbral
&&	map->size >= (*prev_map_size) + map->umbral - all_t)
update_pointer=1;
}"@161@@@@
./61810048/DiagnosticScalar.cpp@594@CRITICAL@#pragma omp critical@"{
if( minloc.val < ( double )*fieldMin[ifield] ) {
*fieldMin[ifield] = minloc;
}
if( maxloc.val > ( double )*fieldMax[ifield] ) {
*fieldMax[ifield] = maxloc;
}
}"@161@@@@
./2997204/opencl_DES_bs_h_plug.c@192@CRITICAL@#pragma omp critical@"{
HANDLE_CLERROR(clSetKernelArg(kernels[id_gpu][salt_val], 0, sizeof(cl_mem), &buffer_map), ""Failed setting kernel argument buffer_map, kernel DES_bs_25.\n"");
}"@160@@@@
./179716970/U-Newmark-beta.c@894@CRITICAL@#pragma omp critical@"{
if (ActiveDOFs.Nodes2Mask[idx] != -1) {
Lagrangian[idx] +=
M_II[idx] * (alpha_1 * dU[idx] - alpha_2 * Un_dt[idx] -
alpha_3 * Un_dt2[idx] - b[idx % Ndim]);
}
}"@160@@@@
./179716970/U-Newmark-beta.c@856@CRITICAL@#pragma omp critical@"{
for (unsigned i = 0; i < Ndim; i++) {
if (ActiveDOFs.Nodes2Mask[Mask_dofs_A[i]] != -1) {
Lagrangian[Mask_dofs_A[i]] += LocalTractionForce_Ap[i] * A0_p;
}
}
}"@159@@@@
./179716970/U-Static.c@543@CRITICAL@#pragma omp critical@"{
for (unsigned i = 0; i < Ndim; i++) {
if (ActiveDOFs.Nodes2Mask[Mask_dofs_A[i]] != -1) {
Lagrangian[Mask_dofs_A[i]] += LocalTractionForce_Ap[i] * A0_p;
}
}
}"@159@@@@
./75787342/IUH_OL.cpp@82@CRITICAL@#pragma omp critical@"{
for (int i = 1; i <= m_nSubbsns; i++) {
m_Q_SBOF[i] += tmp_qsSub[i];
}
}"@158@@@@
./315333330/nesting-fail-1.c@117@CRITICAL@#pragma omp critical@"{
#pragma acc parallel
;
#pragma acc kernels
;
#pragma acc data
;
#pragma acc update host(i)
#pragma acc enter data copyin(i)
#pragma acc exit data delete(i)"@157@@@@
./106309967/dtc_openmp.cpp@155@CRITICAL@#pragma omp critical@"{
if(subDataCounts.find(subDataValue) == subDataCounts.end()){
subDataCounts.insert(make_pair(subDataValue,1));
}
else{
subDataCounts[subDataValue]++;
}
}
}"@156@@@@
./106249716/grid_decomposition.cxx@1444@CRITICAL@#pragma omp critical@"{
MPI_Isend(checksum, 1, MPI_UNSIGNED_LONG, processing_info->get_processing_unit(dst_common_id)->process_id,
tag, processing_info->get_mpi_comm(), *req);
}"@155@@@@
./106249716/grid_decomposition.cxx@1462@CRITICAL@#pragma omp critical@"{
MPI_Irecv(checksum, 1, MPI_UNSIGNED_LONG, processing_info->get_processing_unit(src_common_id)->process_id,
tag, processing_info->get_mpi_comm(), *req);
}"@155@@@@
./72936111/server.h@391@CRITICAL@#pragma omp critical(FileUpdate)@"{
if(check(newname))
{
std::ifstream fin(newname.c_str());
char buffer[BufferSize];
fin.read( buffer, BufferSize);
int lenghtRead= strlen( buffer );

do
{"@154@@@@
./2997204/oldoffice_fmt_plug.c@188@CRITICAL@#pragma omp critical@"{
any_cracked = oo_cracked[index] = 1;
if (oo_cur_salt->type < 4) {
cur_binary->has_mitm = 1;
memcpy(cur_binary->mitm, mitm_key[index], 5);
}
}"@154@@@@
./136172538/mandel-omp-for-row.c@68@CRITICAL@#pragma omp critical@"{
if (setup_return == EXIT_SUCCESS) {
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}
}"@154@@@@
./449282076/h5_problem2.c@65@CRITICAL@#pragma omp critical@"{
if (q->head != NULL) {
data = q->head->sdata;
struct node *del = q->head;
q->head = q->head->next;
free(del);
}
if (q->head == NULL) {
q->tail = NULL;
}"@154@@@@
./394534802/main.cpp@17@CRITICAL@#pragma omp critical@"{
cout<<""Enter choice (0=yes / 1 = no) for thread""<< omp_get_thread_num()<<"" = "";
cin>>choice;
if (choice == 1)
{
consensus = false;
}
}"@153@@@@
./74558351/test_omp_random_number_generator.cpp@43@CRITICAL@#pragma omp critical@"{
BOOST_TEST(0.0 <= real01_1);
BOOST_TEST(real01_1 < 1.0);
BOOST_TEST(0.0 <= real01_2);
BOOST_TEST(real01_2 < 1.0);
BOOST_TEST(real01_1 == real01_2);
}"@151@@@@
./3769753/Bloom.h@77@CRITICAL@#pragma omp critical(in)@"for (; good && bufferSize < taskIOBufferSize;) {
std::string seq;
good = in >> seq;
if (good) {
buffer.push_back(seq);
bufferSize += seq.length();
}
}"@150@@@@
./384698669/cpu_funcs.c@192@CRITICAL@#pragma omp critical@"{
if (is_swapable(return_mutant, &_best_mutant, *cpu_score, _best_score, data->is_max))
{
*cpu_score = _best_score;
*return_mutant = _best_mutant;
}
}"@150@@@@
./81815495/create_and_destroy.cpp@391@CRITICAL@#pragma omp critical@"{
r_modelpart.Elements().push_back(p_particle);
if (spheric_p_particle->IsNot(BLOCKED)){
mpAnalyticWatcher->Record(spheric_p_particle, r_modelpart);
}"@150@@@@
./355329433/Neighbourhood.cpp@195@CRITICAL@#pragma omp critical@"{
BoidsGlobalData.at(BoidsGlobal[Idx].FlockID).Remove(B);
BoidsGlobal[Idx].FlockID = FlockID;
BoidsGlobalData.at(FlockID).Add(B);
assert(IsValid());
}"@150@@@@
./242248042/testis.c@485@CRITICAL@#pragma omp critical@"{
for (i_imopVarPre77 = 0; i_imopVarPre77 < (1 << 11); i_imopVarPre77++) {
key_buff1[i_imopVarPre77] += prv_buff1_imopVarPre79[i_imopVarPre77];
}
}"@147@@@@
./497678098/tfo_finder.cpp@215@CRITICAL@#pragma omp critical (motifs)@"{
motifs.reserve(motifs.size() + tfo_args.motifs.size());
std::move(tfo_args.motifs.begin(), tfo_args.motifs.end(), std::back_inserter(motifs));
}"@146@@@@
./196579227/LevelSets.cpp@1355@CRITICAL@#pragma omp critical@"{
cout << ""Creating new panel for thread "" << thread_id << endl;
d_gamma_indices_per_thread[thread_id].push_back(new int_type_t[max_per_panel]);
}"@146@@@@
./3769753/BloomIO.h@55@CRITICAL@#pragma omp critical(in)@"for (; good && bufferSize < BUFFER_SIZE;) {
std::string seq;
good = in >> seq;
if (good) {
buffer.push_back(seq);
bufferSize += seq.length();
}
}"@145@@@@
./81815495/mpc_contact_search_process.cpp@65@CRITICAL@#pragma omp critical@"{
std::move(auxiliary_constraints_vector_buffer.begin(),auxiliary_constraints_vector_buffer.end(),back_inserter(auxiliary_constraints_vector));
}"@145@@@@
./249790277/kdtree.c@729@CRITICAL@#pragma omp critical@"{
numComparisons += thisNumComparisons ;
vl_kdforestsearcher_delete (searcher) ;
vl_free (neighbors) ;
}"@140@@@@
./115201963/main.cpp@174@CRITICAL@#pragma omp critical@"{ if(!BFS_Q.empty()){
}"@140@@@@
./148962559/rabbit_order.hpp@446@CRITICAL@#pragma omp critical@"{
npend = pends.size();
for (const vint v : pends) {
const vint u = merge(v, &nbrs, &g);
if (u == v) tops.push_back(v);
assert(u != vmax);
}"@140@@@@
./401825407/db_construction.cpp@173@CRITICAL@#pragma omp critical@"{
int one = 1;
MPI_Win_lock(MPI_LOCK_SHARED, 0, 0, win);
MPI_Fetch_and_op(&one, &i, MPI_INT, 0, 0, MPI_SUM, win);
MPI_Win_unlock(0, win);
}"@139@@@@
./401825407/rna_interaction_search.cpp@128@CRITICAL@#pragma omp critical@"{
int one = 1;
MPI_Win_lock(MPI_LOCK_SHARED, 0, 0, win);
MPI_Fetch_and_op(&one, &i, MPI_INT, 0, 1, MPI_SUM, win);
MPI_Win_unlock(0, win);
}"@139@@@@
./635173257/main.cpp@121@CRITICAL@#pragma omp critical@"{
if (weight < minimalSplitWeight) {
minimalSplitWeight = weight;
copy(config, config + configLength, minimalSplitConfig);
}
}"@139@@@@
./81815495/residualbased_elimination_builder_and_solver_with_constraints.h@647@CRITICAL@#pragma omp critical@"{
for (int i = 0; i < static_cast<int>(temp_indexes.size()); ++i) {
indices[i].insert(temp_indexes[i].begin(), temp_indexes[i].end());
}
}"@138@@@@
./81815495/residualbased_elimination_builder_and_solver.h@857@CRITICAL@#pragma omp critical@"{
for (int i = 0; i < static_cast<int>(temp_indexes.size()); ++i) {
indices[i].insert(temp_indexes[i].begin(), temp_indexes[i].end());
}
}"@138@@@@
./93911911/Internal.hpp@854@CRITICAL@#pragma omp critical@"
if( parallel::g_scratchMem != nullptr ) common::release( parallel::g_scratchMem,
m_memTypes.hbw.scratchMem,
m_memTypes.huge.scratchMem );"@138@@@@
./549299227/consumer_producer.cpp@40@CRITICAL@#pragma omp critical@"if (queue.size() != 0)
{
message = queue.front();
queue.pop();
cout << ""Consumer "" << current_thread << "" consumed "" << message << endl;
}"@138@@@@
./521918365/main.c@80@CRITICAL@#pragma omp critical@"{
if (iteration < shared_min) shared_min = iteration;
if (iteration > shared_max) shared_max = iteration;
}"@138@@@@
./214518629/calc_spec.c@229@CRITICAL@}@"{
if (ith != 0) {
for (j = 0, l = 0; j < spec -> npr_tot; j++) {
for (k = 0; k < spec -> prsz; k++, l++) {
sm_th0[j][k] += sm[j][k];
}
}
}"@138@@@@
./214518629/calc_spec.c@495@CRITICAL@}@"{
if (ith != 0) {
for (j = 0, l = 0; j < spec -> npr_tot; j++) {
for (k = 0; k < spec -> prsz; k++, l++) {
sm_th0[j][k] += sm[j][k];
}
}
}"@138@@@@
./81815495/from_json_check_result_process.cpp@812@CRITICAL@#pragma omp critical@"{
for (auto it_elem = elements_buffer.begin(); it_elem < elements_buffer.end(); ++it_elem)
mElementsArray.push_back(*(it_elem.base()));
}"@137@@@@
./449672678/multistart_hooke_mpi_omp.c@344@CRITICAL@#pragma omp critical@"{
if (fx < best_fx)
{
best_trial = trial * (myid + 1);
best_jj = jj;
best_fx = fx;
for (i = 0; i < nvars; i++)
best_pt[i] = endpt[i];
}
}"@137@@@@
./21635382/octree_openmp.c@155@CRITICAL@#pragma omp critical(leafMutex)@"{
leaf_counter++;
leaf = (Box*)realloc(leaf, leaf_counter * sizeof(Box));
leaf[leaf_counter - 1] = temp_box;
num_points += temp_box.n;
}"@136@@@@
./21635382/octree_openmp.c@145@CRITICAL@#pragma omp critical(boxMutex)@"{
temp_box.boxid = 0;
box[boxIndex] = temp_box;
temp_parent.child[temp_box.child_index] = 0;
box[temp_parent.boxid - 1] = temp_parent;
}"@136@@@@
./355329433/Simulator.cpp@144@CRITICAL@#pragma omp critical@"{
std::vector<Boid *> LocalBoids = F->Neighbourhood.GetBoids();
AllBoids.insert(AllBoids.end(), LocalBoids.begin(), LocalBoids.end());
}"@136@@@@
./537831675/bfs.cpp@143@CRITICAL@#pragma omp critical@"{
memcpy(new_frontier->vertices + new_frontier->count, local_frontier, sizeof(int) * local_count);
new_frontier->count += local_count;
}"@136@@@@
./448185761/mandelbrot.c@120@CRITICAL@#pragma omp critical@"for(col = 0; col<width; col++) {
XSetForeground (display, gc, couleur[col]);
XDrawPoint (display, win, gc, col, row);
XFlush(display);
}"@136@@@@
./303054735/q10.c@26@CRITICAL@#pragma omp critical@"{
if(full)
printf(""Buffer already full\n"");
else
{
item = 'A' + (i % 26);
add(item);
i++;
printf(""Thread %d Prodused %c\n"",tid, item);
}"@136@@@@
./303054735/q9.c@26@CRITICAL@#pragma omp critical@"{
if(full)
printf(""Buffer already full\n"");
else
{
item = 'A' + (i % 26);
add(item);
i++;
printf(""Thread %d Prodused %c\n"",tid, item);
}"@136@@@@
./345082539/Queens4.1.c@52@CRITICAL@#pragma omp critical@"{
mutation(NEW_POPULATION[gene1]);
mutation(NEW_POPULATION[gene2]);
}"@136@@@@
./345082539/Queens4.0.c@53@CRITICAL@#pragma omp critical@"{
mutation(NEW_POPULATION[gene1]);
mutation(NEW_POPULATION[gene2]);
}"@136@@@@
./81815495/spatial_methods.h@393@CRITICAL@#pragma omp critical@"{
if (current_max > global_max)
{
global_max = current_max;
global_id = current_id;
}
}"@136@@@@
./81815495/test_sparse_graph_serial.cpp@260@CRITICAL@#pragma omp critical@"{
if(pAgraph == nullptr )
pAgraph.swap(plocal_graph);
else
pAgraph->AddEntries(*plocal_graph);
}
}"@136@@@@
./106309967/dtc_openmp.cpp@204@CRITICAL@#pragma omp critical@"{
if(dataCount.find(outputClass) == dataCount.end()){
dataCount.insert(make_pair(outputClass,1));
}
else{
dataCount[outputClass]++;
}
}"@135@@@@
./242248042/testis.c@337@CRITICAL@#pragma omp critical@"{
for (i_imopVarPre76 = 0; i_imopVarPre76 < (1 << 11); i_imopVarPre76++) {
key_buff1[i_imopVarPre76] += prv_buff1[i_imopVarPre76];
"@134@@@@
./81815495/residualbased_elimination_builder_and_solver_with_constraints.h@1634@CRITICAL@#pragma omp critical@"{
auxiliar_constant_equations_ids.insert(auxiliar_temp_constant_equations_ids.begin(), auxiliar_temp_constant_equations_ids.end());
}"@133@@@@
./81815495/test_parallel_utilities.cpp@352@CRITICAL@#pragma omp critical@"{
this->max_value = std::max(this->max_value,rOther.max_value);
this->max_abs   = std::max(this->max_abs,std::abs(rOther.max_abs));
}"@133@@@@
./31732163/mesh.cpp@631@CRITICAL@#pragma omp critical@"{
quality[0] = std::min(quality[0], q_min);
quality[1] = std::max(quality[1], q_max);
quality[2] += q_tot;
nb.activ_elem += count;
}"@132@@@@
./89341144/parallel_swarm_search.cpp@89@CRITICAL@#pragma omp critical@"{
if (fitness_value <= result.fitness_value)
{
result.normalised_agent = positions.col(n);
result.fitness_value = fitness_value;
}
}"@132@@@@
./304078613/knn.cpp@127@CRITICAL@#pragma omp critical(updateNearestPoints)@"{
nearestPoints.insert(nearestPoints.begin() + j, vector<double>{temp, learn[i][3]});
nearestPoints.pop_back();
flgFound = true;
}"@130@@@@
./106309967/dtc_openmp.cpp@106@CRITICAL@#pragma omp critical@"{
if(classCount.find(classVal) == classCount.end()){
classCount.insert(make_pair(classVal,1));
}
else{
classCount[classVal]++;
}
}"@130@@@@
./23245147/DfHpqX.cpp@321@CRITICAL@#pragma omp critical(DfHpqX__getForce_partProc)@"{
pForce->add(atomIndexA, X, coef * gradA);
pForce->add(atomIndexB, X, coef * gradB);
pForce->add(atomIndexC, X, coef * gradC);
}"@129@@@@
./23245147/DfHpqX.cpp@357@CRITICAL@#pragma omp critical(DfHpqX__getForce_partProc)@"{
pForce->add(atomIndexA, Z, coef * gradA);
pForce->add(atomIndexB, Z, coef * gradB);
pForce->add(atomIndexC, Z, coef * gradC);
}"@129@@@@
./81815495/from_json_check_result_process.cpp@775@CRITICAL@#pragma omp critical@"{
for (auto it_node = nodes_buffer.begin(); it_node < nodes_buffer.end(); ++it_node)
mNodesArray.push_back(*(it_node.base()));
}"@128@@@@
./356685186/gen05.c@155@CRITICAL@#pragma omp critical@"{
*whoHasFinished = threadID;
*solversGenerations = generation;
for (int i=0; i<N; i++) fittestGene[i] = genes[bestGene][i];
}"@126@@@@
./392927467/main.cpp@69@CRITICAL@#pragma omp critical@"{
MPI_Send(send+count,dist, MPI_INT, i, 6, MPI_COMM_WORLD);
count+=dist;
MPI_Send(&search,1, MPI_INT, i, 6, MPI_COMM_WORLD);
}"@126@@@@
./228656264/omp_matvec.c@34@CRITICAL@#pragma omp critical@"{
total = total + c[i];
printf(""  thread %d did row %d\t c[%d]=%.2f\t"",tid,i,i,c[i]);
printf(""Running total= %.2f\n"",total);
}"@126@@@@
./315333330/omp_matvec.c@34@CRITICAL@#pragma omp critical@"{
total = total + c[i];
printf(""  thread %d did row %d\t c[%d]=%.2f\t"",tid,i,i,c[i]);
printf(""Running total= %.2f\n"",total);
}"@126@@@@
./229640188/pathtracer_MPI_OMP.c@349@CRITICAL@#pragma omp critical@"{
int midwork = fp+(lp-fp)/2;
int I[] = {midwork,lp};
MPI_Send(I, 2, MPI_INT, msg, SEND_WORK, MPI_COMM_WORLD);
lp = midwork;
}"@126@@@@
./188560468/R1ES_omp_alt.cpp@197@CRITICAL@#pragma omp critical@"if(func(x[i],num) < fbest){
#pragma omp parallel for
for(int n=0; n<N;n++){
xbest[n] = x[i][n];
}
fbest = func(xbest,num);
}
}"@126@@@@
./188560468/RmES_omp_alt.cpp@245@CRITICAL@#pragma omp critical@"if(func(x[i],num) < fbest){
#pragma omp parallel for
for(int n=0; n<N;n++){
xbest[n] = x[i][n];
}
fbest = func(xbest,num);
}
}"@126@@@@
./604432689/onesided.c@122@CRITICAL@#pragma omp critical@MPI_Put(sc->send_data + sc->request_count * sc->elt_size, 1, sc->datatype, remote_rank, remote_idx, 1, sc->datatype, sc->win);@126@@@@
./274632175/task_gemm.c@49@CRITICAL@#pragma omp critical@"{
if ( idx >= 0 ) {
pcnt = sync->pcnt++;
if ( sync->pcnt == sync->pcompl ) {
sync->pcnt = 0;
}
} else {
pcnt = sync->pcnt;
}
}"@126@@@@
./274632175/task_gemm.c@77@CRITICAL@#pragma omp critical@"{
if ( idx >= 0 ) {
pcnt = sync->pcnt++;
if ( sync->pcnt == sync->pcompl ) {
sync->pcnt = 0;
}
} else {
pcnt = sync->pcnt;
}
}"@126@@@@
./449672678/multistart_hooke_omp_tasks.c@332@CRITICAL@#pragma omp critical@"{
if (fx < best_fx) {
best_trial = trial;
best_jj = jj;
best_fx = fx;
for (i = 0; i < nvars; i++)
best_pt[i] = endpt[i];
}
}"@126@@@@
./449672678/multistart_hooke_omp.c@329@CRITICAL@#pragma omp critical@"{
if (fx < best_fx) {
best_trial = trial;
best_jj = jj;
best_fx = fx;
for (i = 0; i < nvars; i++)
best_pt[i] = endpt[i];
}
}
}"@126@@@@
./131303714/parallel_dobfs.cpp@56@CRITICAL@#pragma omp critical(adding)@"{
if(g[*neighbors.first].distance < 0){
g[*neighbors.first].distance = distance;
next.push_back(*neighbors.first);
}
}
}
}
}
"@125@@@@
./160418114/bnb_openMP.cpp@37@CRITICAL@#pragma omp critical@"if (s.get_cost() > best.get_cost())
best = s;
}
else
{
#pragma omp critical
if (s.get_cost() < best.get_cost())
best = s;
}
}"@125@@@@
./581187585/psp_process.cpp@1485@CRITICAL@#pragma omp critical@"for (unsigned int i = 0; i < msize; ++i) {
sol_rms_partial[i] += local_sol_rms[i];
sol_avg_partial[i] += local_sol_avg[i];
}"@124@@@@
./607375912/zagros.cpp@186@CRITICAL@#pragma omp critical@"{
best_kmers.push(kmer_info(kmer_info(kmer, expected, observed)));
if (best_kmers.size() > n_top_kmers)
best_kmers.pop();
}
"@124@@@@
./554401622/swarm_search.cpp@188@CRITICAL@#pragma omp critical@"{
if(result < best_global_result.result)
{
best_global_result.result = result;
best_global_result.x = particle.position;
}
}"@124@@@@
./315333330/pr68128-2.c@101@CRITICAL@#pragma omp critical@"{
#pragma omp target update to (a27)
#pragma omp target map (always, from: a28) private (a30)
{
a28++;
a29++;
a30 = a29;
}
}"@124@@@@
./472427720/parallel_openmp_csr_Advanced.hpp@116@CRITICAL@#pragma omp critical@"{
if (work_queue.empty() == true)
{
work_remained = false;
}
else
{
retrieved_work = work_queue.front();
work_queue.pop();
}"@124@@@@
./609929241/omp_critical_kmeans.c@73@CRITICAL@#pragma omp critical@"{
newClusterSize[index]++;
for (j=0; j<numCoords; j++){
newClusters[index*numCoords + j] += objects[i*numCoords + j];
}
}"@123@@@@
./69469951/vectorblocks.cpp@397@CRITICAL@#pragma omp critical@"{
if( processModel.totalThreads() < 128 ||
progressCounter % 16 == 0 )
progress->setCurrentProgress( progressCounter );
}"@123@@@@
./274632175/cg_main.h@71@CRITICAL@#pragma omp critical@"{
BLAS_axpy(bn, FP_ONE, local_result, i_one, result, i_one);
BLAS_axpy(bn, FP_ONE, local_result2, i_one, result2, i_one);
}"@123@@@@
./277890040/lu.cpp@1636@CRITICAL@#pragma omp critical@"{
sum[0] += sum0;
sum[1] += sum1;
sum[2] += sum2;
sum[3] += sum3;
sum[4] += sum4;
}
#pragma omp barrier

#pragma omp single"@123@@@@
./3769753/PopBubbles.cpp@212@CRITICAL@#pragma omp critical(g_popped)@"transform(sorted.begin() + 1, sorted.end(), back_inserter(g_popped), [](const ContigNode& c) {
return c.contigIndex();
});"@122@@@@
./356685186/fs03.c@86@CRITICAL@#pragma omp critical@"{
threadSolved = omp_get_thread_num();
for (int w=0; w<N; w++)
finalPosY[w] = posY[w];
finalSteps = steps;
maxQueen = i;
}"@122@@@@
./81815495/nodal_values_interpolation_process.cpp@102@CRITICAL@#pragma omp critical@"{
std::move(to_extrapolate_nodes_buffer.begin(),to_extrapolate_nodes_buffer.end(),back_inserter(to_extrapolate_nodes));
}"@121@@@@
./61810048/Laser.cpp@540@CRITICAL@#pragma omp critical@"{
amp *= extraProfile->valueAt( pos, t );
}"@121@@@@
./554401622/random_search.cpp@64@CRITICAL@#pragma omp critical@"{
if(result < best_result)
{
best_result = result;
best_position = current_point;
}
}"@121@@@@
./148962559/edge_list_to_csr_performance_measure_deg_descending.cpp@282@CRITICAL@#pragma omp critical@"log_info(""edge incorrect: %s, %d, %d"", FormatWithCommas(i).c_str(), verify_g.edge_dst[i],
new_neighbors[i]);
err_cnt++;
}"@121@@@@
./3769753/RAlgorithmsShort.cpp@715@CRITICAL@#pragma omp critical(resolution)@"{
resolution.repeatSupportMap[node.index()] = supportMap;
updateStats(resolution, supports, supportMap, inHistSample);
}"@120@@@@
./401825407/db_construction.cpp@193@CRITICAL@#pragma omp critical@"{
idx = j++;
all_computed_names.push_back(names[indices[i]]);
all_computed_sequences.push_back(sequences[indices[i]]);
}"@120@@@@
./81815495/calculate_wave_height_utility.cpp@176@CRITICAL@#pragma omp critical@"{
if (rOther.distance < this->distance) {
this->distance = rOther.distance;
this->wave_height = rOther.wave_height;
}
}"@119@@@@
./136172538/mandel-omp-for-point.c@69@CRITICAL@#pragma omp critical@"{
if (setup_return == EXIT_SUCCESS) {
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}
}"@119@@@@
./69469951/vectorblocks.cpp@472@CRITICAL@#pragma omp critical@"{
if( resourceModel.totalCPUs() < 128 ||
progressCounter % 16 == 0 )
progress->setCurrentProgress( progressCounter );
}"@119@@@@
./60191570/success_critical_02.c@21@CRITICAL@#pragma omp critical(B)@"{
unsigned char val_of_flagB = j & 0x1;
if (flagB != val_of_flagB)
__builtin_abort();
flagB = (~val_of_flagB) & 0x1;
}"@118@@@@
./60191570/success_critical_02.c@14@CRITICAL@#pragma omp critical(A)@"{
unsigned char val_of_flagA = j & 0x1;
if (flagA != val_of_flagA)
__builtin_abort();
flagA = (~val_of_flagA) & 0x1;
}"@118@@@@
./581187585/psp_process.cpp@2007@CRITICAL@#pragma omp critical@"for (unsigned int i = 0; i < msize; ++i) {
rms[i] += local_rms[i];
avg[i] += local_avg[i];
gain[i] += local_gain[i];
}"@118@@@@
./81815495/calculate_water_fraction.h@158@CRITICAL@#pragma omp critical@"{
if ( local_thread_water_height > all_threads_water_height ) all_threads_water_height = local_thread_water_height;
}"@117@@@@
./303054735/q10.c@59@CRITICAL@#pragma omp critical@"{
if(empty)
printf(""Buffer empty\n"");
else
{
j++;
item = removee();
printf(""Thread %d Consumed %c\n"",tid, item);
}
}"@116@@@@
./303054735/q9.c@59@CRITICAL@#pragma omp critical@"{
if(empty)
printf(""Buffer empty\n"");
else
{
j++;
item = removee();
printf(""Thread %d Consumed %c\n"",tid, item);
}
}"@116@@@@
./436468599/NotWorking.cpp@8@CRITICAL@#pragma omp critical@"{
work -= workSpeed;
actualWork[workerNum] += workSpeed;
}"@116@@@@
./61810048/Laser.cpp@549@CRITICAL@#pragma omp critical@"{
if( magnitude )
{
delete magnitude   ;
magnitude   =NULL;
}
if( phase )
{
delete phase       ;
phase       =NULL;"@115@@@@
./3769753/Bloom.h@91@CRITICAL@#pragma omp critical(cerr)@"{
count++;
if (count % LOAD_PROGRESS_STEP == 0)
std::cerr << ""Loaded "" << count << "" reads into bloom filter\n"";
}"@114@@@@
./249790277/kdtree.c@687@CRITICAL@#pragma omp critical@"{
searcher = vl_kdforest_new_searcher(self) ;
neighbors = vl_calloc (sizeof(VlKDForestNeighbor), numNeighbors) ;
}"@114@@@@
./81815495/calculate_water_fraction.h@203@CRITICAL@#pragma omp critical@"{
if ( local_thread_max_courant > all_threads_max_courant ) all_threads_max_courant = local_thread_max_courant;
}"@113@@@@
./408823577/05_order_of_threads.c@23@CRITICAL@#pragma omp critical@"if ( order == my_thread_id )
{
printf( ""\tgreetings from thread num %d\n"", my_thread_id );
order++;
done = 1;
}
}"@113@@@@
./60191570/success_critical_01.c@12@CRITICAL@#pragma omp critical@"{
unsigned char val_of_flag = j & 0x1;
if (flag != val_of_flag)
__builtin_abort();
flag = (~val_of_flag) & 0x1;
}"@113@@@@
./2997204/tezos_fmt_plug.c@123@CRITICAL@#pragma omp critical@"{
warned = 1;
fprintf(stderr,
""Warning: over-long combination(s) of e-mail address and candidate password\n"");
}"@112@@@@
./86997234/main.cpp@389@CRITICAL@#pragma omp critical@"{
if (localChildren.size() != 0)
children.insert(children.end(), localChildren.begin(), localChildren.end());
}"@111@@@@
./23245147/DfEriX.cpp@249@CRITICAL@#pragma omp critical(DfEriX__getJ_P_to_rho)@"{
const int numOfAux = this->m_nNumOfAux;
for (int i = 0; i < numOfAux; ++i) {
pRho->add(i, local_rho[i]);
}
}"@110@@@@
./73549492/Shaders.cpp@58@CRITICAL@#pragma omp critical@"{
Window::GetSingleton()->MakeContextCurrent();
glShaderSource(mVertexShader, 1, &vertexSourcePtr, nullptr);
}"@110@@@@
./604432689/onesided.c@38@CRITICAL@#pragma omp critical@MPI_Get(g->output + local_idx * g->elt_size, 1, g->datatype, remote_rank, remote_idx, 1, g->datatype, g->win);@110@@@@
./402750164/main.cpp@74@CRITICAL@#pragma omp critical@"if(current_node->right == nullptr)
{
current_node->right = new node(arr[i], current_node);
flag = false;
}
}"@108@@@@
./449282076/h5_problem2.c@49@CRITICAL@#pragma omp critical@"{
if (q->tail == NULL) {
q->head = _new;
q->tail = _new;
} else {
q->tail->next = _new;
q->tail = _new;
}
}"@107@@@@
./589215327/optimization.cpp@256@CRITICAL@#pragma omp critical@"{
counter++;
if (next_factor < factor)
{
all_shops = moved;
factor = next_factor;
next_factor = 0;
}
else
{"@107@@@@
./69469951/khistogram.cpp@1385@CRITICAL@#pragma omp critical@"{
progress->setCurrentProgress( windowCloneManager( currentWindow )->getEndTime( iRow ) - beginTime );
}"@104@@@@
./81815495/residualbased_block_builder_and_solver.h@1016@CRITICAL@#pragma omp critical@"{
mInactiveSlaveDofs.insert(auxiliar_inactive_slave_dofs.begin(), auxiliar_inactive_slave_dofs.end());
}"@104@@@@
./402750164/main.cpp@90@CRITICAL@#pragma omp critical@"if(current_node->left == nullptr)
{
current_node->left = new node(arr[i], current_node);
flag = false;
}"@104@@@@
./72936111/server.h@202@CRITICAL@#pragma omp critical(CriticalClient)@"{
if(nbClients != MaximumClients){
clients[nbClients++].first = inClientSocket;
cliendAdded = true;
}
}"@103@@@@
./81815495/skin_detection_process.cpp@290@CRITICAL@#pragma omp critical@"{
std::move(conditions_ids_buffer.begin(),conditions_ids_buffer.end(),back_inserter(conditions_ids));
}"@103@@@@
./148962559/edge_list_to_csr_performance_measure.cpp@197@CRITICAL@#pragma omp critical@"log_info(""edge incorrect: %s, %d, %d"", FormatWithCommas(i).c_str(), verify_g.edge_dst[i], adj_lst[i]);"@102@@@@
./121857435/online_EM_funcs.hpp@237@CRITICAL@#pragma omp critical@"{
res.S_pjk += S_pjk;
res.S_ipk += S_ipk;
S_ppk += S_ppk_local;
delta_log_PS += delta_log_PS_local;
}"@101@@@@
./242248042/test37.c@5@CRITICAL@#pragma omp critical@"{
#pragma omp atomic read
b = a;
#pragma omp atomic
a = a + 2;
#pragma omp critical (name)
{
b++;
}
}"@101@@@@
./3769753/ParallelFilter.cpp@111@CRITICAL@#pragma omp critical(uFile)@"{
good = static_cast<bool>(getline(uFile, hline));
good = static_cast<bool>(getline(uFile, line));
}"@100@@@@
./3769753/RAlgorithmsShort.cpp@705@CRITICAL@#pragma omp critical(resolution)@"{
repeats++;
inHistSample = (repeats <= HIST_SAMPLE_SIZE);
skip = (repeats > REPEAT_CASES_LIMIT);
}"@99@@@@
./23245147/DfHpqX.cpp@242@CRITICAL@#pragma omp critical(DfHpqX__getForce_partProc)@"{
pForce_woX->add(atomIndexA, X, coef * dKin_dA);
pForce_woX->add(atomIndexB, X, coef * dKin_dB);
}"@99@@@@
./23245147/DfHpqX.cpp@276@CRITICAL@#pragma omp critical(DfHpqX__getForce_partProc)@"{
pForce_woX->add(atomIndexA, Z, coef * dKin_dA);
pForce_woX->add(atomIndexB, Z, coef * dKin_dB);
}"@99@@@@
./228656264/task-3.C@29@CRITICAL@#pragma omp critical@"{
j += i;
l += k;
}
}
i++;
#pragma omp task firstprivate (i) shared (j, l)
{
#pragma omp critical
{"@99@@@@
./81815495/explicit_solver_strategy.cpp@226@CRITICAL@#pragma omp critical@"{
neighbour_walls_vector[j]->GetVectorOfGluedParticles().push_back(mListOfSphericParticles[i]);
}"@97@@@@
./81815495/test_sparse_graph_serial.cpp@369@CRITICAL@#pragma omp critical@"{
if(pAgraph == nullptr )
pAgraph.swap(plocal_graph);
else
pAgraph->AddEntries(*plocal_graph);
}"@96@@@@
./81815495/simple_mortar_mapper_process.cpp@259@CRITICAL@#pragma omp critical@"{
std::move(points_buffer.begin(),points_buffer.end(),back_inserter(point_list_destination));
}"@95@@@@
./81815495/simple_mortar_mapper_process.cpp@238@CRITICAL@#pragma omp critical@"{
std::move(points_buffer.begin(),points_buffer.end(),back_inserter(point_list_destination));
}"@95@@@@
./46390503/bf.cpp@115@CRITICAL@#pragma omp critical@"for(int xx=0; xx < nearestContactPoint.size(); xx++)
result.push_back(nearestContactPoint[xx]);"@95@@@@
./46390503/penalty.cpp@205@CRITICAL@#pragma omp critical@"for(int xx=0; xx < nearestContactPoint.size(); xx++)
result.push_back(nearestContactPoint[xx]);"@95@@@@
./81815495/apply_chimera_process.cpp@367@CRITICAL@#pragma omp critical@"{
mrMainModelPart.RemoveMasterSlaveConstraintFromAllLevels(constraint_id);
removed_counter++;
}"@95@@@@
./62011740/rkmh.cpp@1421@CRITICAL@#pragma omp critical@"{
for (int j = 0; j < read_hash_lens[i]; ++j){
read_hash_to_depth[ read_hashes[i][j]] += 1;
}
}"@95@@@@
./81815495/fracture_propagation_3D_utilities.hpp@1389@CRITICAL@#pragma omp critical@"{
rPropagationData.FracturePointsCellMatrix[Row][Column][Section].push_back(MyFracturePoint);
}"@95@@@@
./81815495/memory_pool.h@67@CRITICAL@#pragma omp critical@"{
if (r_pools[BlockSize] == nullptr)
r_pools[BlockSize] = new FixedSizeMemoryPool(BlockSize);
}"@95@@@@
./81815495/contact_residualbased_elimination_builder_and_solver_with_constraints.h@256@CRITICAL@#pragma omp critical@"{
rModelPart.AddMasterSlaveConstraints(constraints_buffer.begin(),constraints_buffer.end());
}"@94@@@@
./81815495/explicit_solver_continuum.cpp@407@CRITICAL@#pragma omp critical@"{
(*mpContact_model_part).Elements().push_back(p_new_contact_element);
used_bonds_counter++;
}"@94@@@@
./81815495/explicit_solver_strategy.cpp@1431@CRITICAL@#pragma omp critical@"{
(*mpContact_model_part).Elements().push_back(p_new_contact_element);
used_bonds_counter++;
}"@94@@@@
./179716970/U-Static.c@577@CRITICAL@#pragma omp critical@"{
if (ActiveDOFs.Nodes2Mask[idx] != -1) {
Lagrangian[idx] +=
- M_II[idx] * b[idx % Ndim];
}
}"@93@@@@
./596098733/23-Flush-OpenMP.c@11@CRITICAL@#pragma omp critical@"{
shared_var += local_var;
printf(""Thread %d updated shared_var to %d\n"", tid, shared_var);
}"@93@@@@
./142900392/lab2_5d.c@11@CRITICAL@#pragma omp critical@"{
data = id;
printf(""Greetings from process %d out of %d with Data %d\n"", id, total, data);
}"@93@@@@
./188832080/kmeans.cpp@248@CRITICAL@#pragma omp critical@"for (color_t c = 0; c < cn; ++c)
{
agg_sums_y[c] += sums_y[c];
agg_sums_x[c] += sums_x[c];
}"@92@@@@
./188832080/kmeans.cpp@254@CRITICAL@#pragma omp critical@"for (color_t c = 0; c < cn; ++c)
{
agg_counts[c] += counts[c];
converge &= local_converge;
}"@92@@@@
./81815495/mapper_vertex_morphing_adaptive_radius.cpp@143@CRITICAL@#pragma omp critical@"{
for (auto &r_gp : rOther.gp_vector.GetContainer())
{
this->gp_vector.push_back(r_gp);
}
}"@91@@@@
./81815495/create_and_destroy.cpp@768@CRITICAL@#pragma omp critical@"{
r_modelpart.Nodes().push_back(pnew_node);
r_modelpart.Elements().push_back(p_particle);
}"@91@@@@
./3769753/RAlgorithmsShort.cpp@967@CRITICAL@#pragma omp critical(supportedPaths)@"{
if (supportedPaths.find(path) != supportedPaths.end()) {
supportedPaths.erase(path);
}
}"@90@@@@
./61810048/DiagnosticTrack.cpp@493@CRITICAL@#pragma omp critical@"{
for( unsigned int iPart=0; iPart<s; iPart++ ) {
particles.id( iPart ) = ++latest_Id;
}
}"@90@@@@
./81815495/internal_variables_interpolation_process.cpp@131@CRITICAL@#pragma omp critical@"{
std::move(points_buffer.begin(),points_buffer.end(),back_inserter(this_point_vector));
}"@90@@@@
./604432689/onesided.c@76@CRITICAL@#pragma omp critical@MPI_Put(sc->constant, 1, sc->datatype, remote_rank, remote_idx, 1, sc->datatype, sc->win);@90@@@@
./179716970/U-Newmark-beta.c@1032@CRITICAL@#pragma omp critical@"{
MatSetValues(Jacobian, Ndim, Mask_dofs_A, Ndim, Mask_dofs_B,
Jacobian_p, ADD_VALUES);
}"@89@@@@
./179716970/U-Static.c@753@CRITICAL@#pragma omp critical@"{
MatSetValues(Jacobian, Ndim, Mask_dofs_A, Ndim, Mask_dofs_B,
Jacobian_p, ADD_VALUES);
}"@89@@@@
./81815495/find_global_nodal_neighbours_for_entities_process.cpp@239@CRITICAL@#pragma omp critical@"{
for (auto& r_gp : rOther.gp_vector.GetContainer()) {
this->gp_vector.push_back(r_gp);
}"@89@@@@
./179716970/U-Newmark-beta.c@356@CRITICAL@#pragma omp critical@"{
VecSetValues(Lumped_MassMatrix, Ndim, Mask_dofs_A,
Local_Mass_Matrix_p, ADD_VALUES);
}"@88@@@@
./179716970/U-Static.c@659@CRITICAL@#pragma omp critical@"{
VecSetValues(Lumped_MassMatrix, Ndim, Mask_dofs_A,
Local_Mass_Matrix_p, ADD_VALUES);
}"@88@@@@
./209143275/main.cpp@87@CRITICAL@#pragma omp critical@"{
a1_STACKf.push(x[0]);
if(tid==0) usleep(1e6);
y=x[0];
#pragma omp atomic
x[0]+=x[0];
}"@88@@@@
./81815495/spatial_methods.h@459@CRITICAL@#pragma omp critical@"{
if (current_min < global_min)
{
global_min = current_min;
global_id = current_id;
}
}"@87@@@@
./31732163/rmat.cpp@72@CRITICAL@#pragma omp critical@"{
if (deg.max < deg_max_local) {
deg.max = deg_max_local;
}
deg.avg += deg_sum_local;
}"@87@@@@
./81815495/fracture_propagation_3D_utilities.hpp@992@CRITICAL@#pragma omp critical@"{
InterfaceGaussPointOldCellMatrix[Row][Column][Section].push_back(MyGaussPointOld);
}"@86@@@@
./81815495/fracture_propagation_2D_utilities.hpp@1116@CRITICAL@#pragma omp critical@"{
rPropagationData.FracturePointsCellMatrix[Row][Column].push_back(MyFracturePoint);
}"@86@@@@
./117122510/matrix_kernels.cpp@125@CRITICAL@#pragma omp critical@"{
non_local_cols.insert(thread_non_local_cols.begin(),
thread_non_local_cols.end());
}"@86@@@@
./23245147/DfOverlapX.cpp@596@CRITICAL@#pragma omp critical(DfOverlapX__getForce)@"{
pForce->add(atomIndexA, Y, coef * dSdA);
pForce->add(atomIndexB, Y, coef * dSdB);
}"@85@@@@
./23245147/DfOverlapX.cpp@612@CRITICAL@#pragma omp critical(DfOverlapX__getForce)@"{
pForce->add(atomIndexA, Z, coef * dSdA);
pForce->add(atomIndexB, Z, coef * dSdB);
}"@85@@@@
./343896296/v2.cpp@83@CRITICAL@#pragma omp critical@"{
C->coo.insert( C->coo.end(), coo.coo.begin(), coo.coo.end() );
C->nnz += coo.nnz;
}"@85@@@@
./343896296/v3.cpp@82@CRITICAL@#pragma omp critical@"{
C->coo.insert( C->coo.end(), coo.coo.begin(), coo.coo.end() );
C->nnz += coo.nnz;
}"@85@@@@
./299666975/percolation.c@123@CRITICAL@#pragma omp critical@"{
CLUSTER fst = { .id = amountOfClusters++, .length = 0};
clusterList[clTop] = fst;
}"@85@@@@
./554401622/random_search.cpp@112@CRITICAL@#pragma omp critical@"{
if(result < best_result)
{
best_result = result;
best_position = current_point;
}
}"@85@@@@
./554401622/random_search.cpp@188@CRITICAL@#pragma omp critical@"{
if(result < best_result)
{
best_result = result;
best_position = current_point;
}
}"@85@@@@
./343896296/v4.cpp@95@CRITICAL@#pragma omp critical@"{
C->coo.insert( C->coo.end(), coo.coo.begin(), coo.coo.end() );
C->nnz += coo.nnz;
}"@85@@@@
./389341661/main.cpp@58@CRITICAL@#pragma omp critical@"{
MPI_Send(&abort, 1, MPI_INT, dest, master_tag, MPI_COMM_WORLD);
dest = dest + 1;
}"@84@@@@
./242248042/ft.c@1255@CRITICAL@#pragma omp critical@"{
sums[i_imopVarPre117].real += chk.real;
sums[i_imopVarPre117].imag += chk.imag;
}"@83@@@@
./449120470/main.cpp@118@CRITICAL@#pragma omp critical@"{
int data = id;
secondStage(id, keyValuePairVector, countedKeyValuePairsVector);
}"@83@@@@
./242248042/old.c@1023@CRITICAL@#pragma omp critical@"{
sum[0] += sum0;
sum[1] += sum1;
sum[2] += sum2;
sum[3] += sum3;
sum[4] += sum4;
}"@83@@@@
./93849114/2.hello.c@8@CRITICAL@#pragma omp critical@"{
id =omp_get_thread_num();
printf(""(%d) Hello "",id);
printf(""(%d) world!\n"",id);
}"@83@@@@
./240264505/vtk_import.cpp@377@CRITICAL@#pragma omp critical@merged_image_data = Importer::mergeImageData(merged_image_data, single_image_data);@83@@@@
./111514856/histogram.c@77@CRITICAL@#pragma omp critical@for (i = 0; i < histogram_size; i++) histogram[i] += hist_temp[current_thread][i];@82@@@@
./343896296/v1.cpp@47@CRITICAL@#pragma omp critical@"{
C.coo.insert( C.coo.end(), coo.coo.begin(), coo.coo.end() );
C.nnz += coo.nnz;
}"@82@@@@
./61401280/timer.h@72@CRITICAL@#pragma omp critical@"{
mach_timebase_info(&info);
seconds_per_unit = (info.numer / info.denom) / 1e9;
}"@82@@@@
./84231963/sudoku.c@123@CRITICAL@#pragma omp critical@"{
if (!solved)
{
solvedgrid = mystack;
solved = true;
}
}"@82@@@@
./289039618/critical2.c@29@CRITICAL@#pragma omp critical@"{
if (thread == 0)
{
sleep(2);
}
if (thread == 1)
{
usleep(10);
}
if (thread == 2)"@82@@@@
./163540180/fig4.55-critical-region.c@40@CRITICAL@#pragma omp critical (update_sum)@"{
sum += sumLocal;
printf(""TID=%d: sumLocal = %d sum = %d\n"",TID,sumLocal,sum);
}"@81@@@@
./405671279/mandel-omp-point-taskloop.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./405671279/mandel-omp-optional-row.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./405671279/mandel-omp-point-taskloop-nogroup.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./405671279/mandel-omp-optional-point.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./93849114/mandel-omp.c@67@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./93849114/mandel-omp-taskloop-point.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./93849114/mandel-omp-task-point.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./93849114/mandel-omp-taskloop-row.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./93849114/mandel-omp-task-row.c@70@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./93849114/mandel-omp-for-row.c@69@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./93849114/mandel-omp-for-point.c@69@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./93849114/mandel-omp-copy.c@67@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./337197435/mandel-omp-taskgroup.c@72@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./337197435/mandel-omp.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./337197435/mandel-omp-row-for-schedule.c@68@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./337197435/mandel-omp-taskloop-v2.c@70@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./337197435/mandel-omp-taskloop.c@70@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./337197435/mandel-omp-task.c@71@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./136172538/mandel-omp-taskloop-point.c@94@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./136172538/mandel-omp-taskloop-row.c@94@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./405671279/mandel-omp-point-task.c@72@CRITICAL@#pragma omp critical@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./405671279/mandel-omp-row-taskloop.c@70@CRITICAL@@"{
XSetForeground (display, gc, color);
XDrawPoint (display, win, gc, col, row);
}"@81@@@@
./81815495/hole_cutting_utility.cpp@187@CRITICAL@#pragma omp critical@"{
if (n_faces_map[ids] == 1)
ordered_skin_face_nodes_map[ids] = unsorted_ids;
}"@79@@@@
./106249716/processing_unit_mgt.cxx@205@CRITICAL@#pragma omp critical@"{
send_packets.push_back(Thread_comm_packet(buf, count*size, src, dst, tag));
}"@79@@@@
./138425568/process.cpp@120@CRITICAL@#pragma omp critical@"{
totalR+=avgImage[imgI];
totalG+=avgImage[imgI+1];
totalB+=avgImage[imgI+2];
}"@79@@@@
./73549492/Slave.cpp@42@CRITICAL@#pragma omp critical@MPI_Send(colorData, 4, MPI_FLOAT, 0, (int) MessageType::Color, MPI_COMM_WORLD);@79@@@@
./81815495/fracture_propagation_2D_utilities.hpp@762@CRITICAL@#pragma omp critical@"{
InterfaceGaussPointOldCellMatrix[Row][Column].push_back(MyGaussPointOld);
}"@77@@@@
./196579227/LevelSets.cpp@548@CRITICAL@#pragma omp critical@"{
index_mask_pairs.push_back(pair<int, Mat>(i, bw_ims[thread_id].clone()));
}"@77@@@@
./81815495/explicit_solver_strategy.cpp@1579@CRITICAL@#pragma omp critical@"{
p_wall->mNeighbourSphericParticles.push_back(mListOfSphericParticles[i]);
}"@77@@@@
./202712923/atomic_detail.h@198@CRITICAL@#pragma omp critical@"{
old = *address;
*address = (old == T(0) || old > arg) ? arg : old - T(1);
}"@77@@@@
./229640188/pathtracer_MPI_OMP.c@374@CRITICAL@#pragma omp critical@"{
demande = 0;
var = 0;
}"@77@@@@
./315333330/critical-1.c@6@CRITICAL@#pragma omp critical(foo)@"{
bar(1);
bar(2);
}"@76@@@@
./75787342/IUH_SED_OL.cpp@82@CRITICAL@#pragma omp critical@"{
for (int i = 1; i <= m_nSubbsns; i++) {
m_sedtoCh[i] += tmp_sed2ch[i];
}
}"@76@@@@
./88261066/tsp_openmp.c@43@CRITICAL@#pragma omp critical@"if (curr_res < final_res) {
copyToFinal(curr_pat);
final_res = curr_res;
}"@74@@@@
./439055859/rescale_correlation.h@235@CRITICAL@#pragma omp critical@"{
full_xi_function.sum(&thread_xi_function);
thread_xi_function.reset();
}"@74@@@@
./338941423/util.h@42@CRITICAL@#pragma omp critical@"{
enQueue(file_name_queue, file_name, strlen(file_name));
file_count++;
}"@73@@@@
./3769753/RAlgorithmsShort.cpp@1130@CRITICAL@#pragma omp critical(vertices2add)@vertices2add.push_back(NewVertex(instance.original, instance.instance));@72@@@@
./315333330/nesting-2.c@100@CRITICAL@#pragma omp critical@"{
#pragma omp simd
for (j = 0; j < 10; j++)
#pragma omp ordered simd
;
}"@72@@@@
./69469951/window.cpp@2388@CRITICAL@#pragma omp critical@"{
progress->setCurrentProgress( currentTime - getWindowBeginTime() );
}"@71@@@@
./423823812/counting_sort.c@73@CRITICAL@#pragma omp critical@"{
if (l_min < min)
{
min = l_min;
}
if (l_max > max)
{
max = l_max;
}
}"@71@@@@
./293300824/graph.hpp@88@CRITICAL@#pragma omp critical(queue_update)@queue.insert(queue.end(), private_queue.begin(), private_queue.end());@70@@@@
./293300824/graph.hpp@122@CRITICAL@#pragma omp critical(queue_update)@queue.insert(queue.end(), private_queue.begin(), private_queue.end());@70@@@@
./23245147/DfCD.cpp@2773@CRITICAL@#pragma omp critical(DfCD__calcERIs)@{ this->ERI_cache_A_.insert(local_cache.begin(), local_cache.end()); }@70@@@@
./23245147/DfCD.cpp@2411@CRITICAL@#pragma omp critical(DfCD__calcDiagonals_kernel_1)@{ pI2PR->insert(pI2PR->end(), local_I2PR.begin(), local_I2PR.end()); }@70@@@@
./23245147/DfCD.cpp@2237@CRITICAL@#pragma omp critical(DfCD__calcDiagonals_kernel_1)@{ pI2PQ->insert(pI2PQ->end(), local_I2PQ.begin(), local_I2PQ.end()); }@70@@@@
./229640188/pathtracer_MPI_OMP.c@385@CRITICAL@#pragma omp critical@"{
current_p = fp++;
ok = (current_p<lp);
if(!ok && var) demande = 1;
}"@70@@@@
./60191570/success_critical_03.c@5@CRITICAL@#pragma omp critical@"{
x++;
}"@70@@@@
./81815495/shell_5p_element.cpp@504@CRITICAL@#pragma omp critical@GetGeometry().GetGeometryParent(0).SetValue(DIRECTOR_COMPUTED, false);@70@@@@
./3769753/MergePaths.cpp@284@CRITICAL@#pragma omp critical(gout)@"if (!edge(u, v, gout).second) {
add_edge(u, v, gout);
added = true;
}"@69@@@@
./21635382/octree_openmp.c@120@CRITICAL@#pragma omp critical(boxMutex)@"{
temp_box = box[boxIndex];
temp_parent = box[temp_box.parent - 1];
}"@69@@@@
./481917853/sobel_omp.cpp@77@CRITICAL@#pragma omp critical@"{
if (pixel_value > pixel_value_max) pixel_value_max = pixel_value;
}"@69@@@@
./481917853/sobel_mpi_omp.cpp@70@CRITICAL@#pragma omp critical@"{
if (pixel_value > pixel_value_max) pixel_value_max = pixel_value;
}"@69@@@@
./121857435/online_EM_funcs.hpp@114@CRITICAL@#pragma omp critical@"{
S_pjk += S_pjk_local;
S_ipk += S_ipk_local;
S_ppk += S_ppk_local;
}"@69@@@@
./81815495/explicit_builder.h@407@CRITICAL@#pragma omp critical@"{
dof_global_set.insert(dofs_tmp_set.begin(), dofs_tmp_set.end());
}"@68@@@@
./81815495/explicit_integration_utilities.cpp@164@CRITICAL@#pragma omp critical@if (stable_delta_time < delta_time) delta_time = stable_delta_time;@67@@@@
./285634219/cpu_voxelizer.cpp@166@CRITICAL@#pragma omp critical@"{
voxel_table[int_location] = (voxel_table[int_location] ^ mask);
}"@67@@@@
./81815495/initial_stress_3D_utilities.hpp@178@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l][s].push_back((*(itElemOld.base())));
}"@67@@@@
./81815495/mapping_variables_3D_utilities.hpp@152@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l][s].push_back((*(itElemOld.base())));
}"@67@@@@
./81815495/mapping_variables_3D_utilities.hpp@343@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l][s].push_back((*(itElemOld.base())));
}"@67@@@@
./81815495/fracture_propagation_3D_utilities.hpp@644@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l][s].push_back((*(itElemOld.base())));
}"@67@@@@
./69469951/khistogram.cpp@1374@CRITICAL@#pragma omp critical@"{
progress->setCurrentProgress( progress->getCurrentProgress() );
}"@67@@@@
./242248042/testis.c@162@CRITICAL@#pragma omp critical@"{
for (i = 0; i < (1 << 11); i++) {
key_buff1[i] += prv_buff1[i];
}"@67@@@@
./93911911/Shared.h@187@CRITICAL@#pragma omp critical@for( std::size_t l_en = 0; l_en < l_nEns; l_en++ ) l_arr[l_en] = 0;@67@@@@
./81815495/fracture_propagation_3D_utilities.hpp@716@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l][s].push_back((*(itElemOld.base())));
}"@67@@@@
./298456736/bruteforce-omp.c@32@CRITICAL@#pragma omp critical@"{
printf(""Password found: %s\n"", passwordToTest);
result = FOUND;
}"@67@@@@
./96631497/SimulationNBodyV2Intrinsics.hxx@225@CRITICAL@#pragma omp critical@rclosNeighj.store(this->closestNeighborDist + jVec * mipp::N<T>());@67@@@@
./106249716/grid_decomposition.cxx@1325@CRITICAL@#pragma omp critical@update_workloads(num_points, ids_start, ids_end, kill_tiny_region);@67@@@@
./548297608/task11.cpp@21@CRITICAL@#pragma omp critical@"if (a[l] % D == 0 && max < a[l]) {
max = a[l];
isChanged = true;
}"@66@@@@
./449120470/main.cpp@105@CRITICAL@#pragma omp critical@"{
int data = id;
firstStage(id, keyValuePairVector, wordVector);
}"@66@@@@
./197342552/primsomp.h@28@CRITICAL@#pragma omp critical@"{
if (min_local < min)
{
min = min_local;
index = index_local;
}
}"@66@@@@
./202712923/atomic_detail.h@61@CRITICAL@#pragma omp critical@"{
old = *address;
*address = (old == expected) ? desired : old;
}"@65@@@@
./81815495/initial_stress_2D_utilities.hpp@156@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l].push_back((*(itElemOld.base())));
}"@64@@@@
./81815495/fracture_propagation_2D_utilities.hpp@535@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l].push_back((*(itElemOld.base())));
}"@64@@@@
./81815495/mapping_variables_2D_utilities.hpp@144@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l].push_back((*(itElemOld.base())));
}"@64@@@@
./81815495/mapping_variables_2D_utilities.hpp@321@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l].push_back((*(itElemOld.base())));
}"@64@@@@
./81815495/fracture_propagation_2D_utilities.hpp@476@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l].push_back((*(itElemOld.base())));
}"@64@@@@
./81815495/mapping_variables_2D_utilities.hpp@132@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l].push_back((*(itElemOld.base())));
}"@64@@@@
./81815495/mapping_variables_2D_utilities.hpp@309@CRITICAL@#pragma omp critical@"{
ElementOldCellMatrix[k][l].push_back((*(itElemOld.base())));
}"@64@@@@
./81815495/nonlocal_damage_2D_utilities.hpp@171@CRITICAL@#pragma omp critical@"{
rMyGaussPoint.NeighbourPoints.push_back(&rMyNeighbourPoint);
}"@64@@@@
./81815495/nonlocal_damage_3D_utilities.hpp@188@CRITICAL@#pragma omp critical@"{
rMyGaussPoint.NeighbourPoints.push_back(&rMyNeighbourPoint);
}"@64@@@@
./315333330/pr42234.C@5@CRITICAL@#pragma omp critical@"{
int j;
for (j = 0; j < foo (); j++)
;
if (0)
if (x >= 4)
;
}
}"@64@@@@
./23245147/DfCD_Parallel.cpp@970@CRITICAL@#pragma omp critical(DfCD_Parallel__calcCholeskyVectorsOnTheFlyA_updateL)@"{
L.set(pivot_i, m, l_m_pi);
global_diagonals[pivot_i] -= ll;
}"@63@@@@
./179716970/U-Newmark-beta.c@1303@CRITICAL@#pragma omp critical@"{
jacobian_I[Mask_node_A] += m__x__ShapeFunction_pA * J_n1_p;
}"@63@@@@
./95979680/parallel.c@90@CRITICAL@#pragma omp critical@"{
for (i = 0; i < max_value; i++)
count[i] += local_count[i];
}"@63@@@@
./354506695/main.cpp@107@CRITICAL@#pragma omp critical@"{
TopTen.TableN[NN + 1] = make_pair(i, temp);
TopTen.Tsort();
}"@63@@@@
./274632175/task_dot.c@55@CRITICAL@#pragma omp critical@"{
BLAS_axpy(bn, FP_ONE, local_result, i_one, result, i_one);
}"@62@@@@
./273021503/aprioriomp.cpp@340@CRITICAL@#pragma omp critical@"{
FOR_MAP(ii,temp)
{
C[ii->first]+=ii->second;
}
temp.clear();"@62@@@@
./84281731/Sobel.cpp@53@CRITICAL@#pragma omp critical@thread_rows.push_back(std::make_pair(thread_id, i*chunkSize));@62@@@@
./84281731/Sobel.cpp@67@CRITICAL@#pragma omp critical@thread_rows.push_back(std::make_pair(thread_id, i*chunkSize));@62@@@@
./304078613/min_max.cpp@43@CRITICAL@#pragma omp critical@nxv.insert(nxv.end(), nxv_private.begin(), nxv_private.end());@62@@@@
./304078613/standard_scaler.cpp@42@CRITICAL@#pragma omp critical@nxv.insert(nxv.end(), nxv_private.begin(), nxv_private.end());@62@Err:508@@@
./81815495/create_and_destroy.cpp@650@CRITICAL@#pragma omp critical@"{
r_clusters_modelpart.Elements().push_back(p_new_cluster);
}"@61@@@@
./81815495/define_2d_wake_process.cpp@146@CRITICAL@#pragma omp critical@"{
mTrailingEdgeElementsOrderedIds.push_back(rElement.Id());
}"@61@@@@
./81815495/thermal_explicit_solver_strategy.cpp@82@CRITICAL@#pragma omp critical@"{
if (diff_time < min_diff_time) min_diff_time = diff_time;
}"@61@@@@
./84542403/testsuite_parallel.hpp@57@CRITICAL@#pragma omp critical@"{
m_stats.m_num_fails += fails;
m_stats.m_num_errs += errs;
}"@61@@@@
./179716970/U-Newmark-beta.c@1314@CRITICAL@#pragma omp critical@"{
jacobian_I[idx] = jacobian_I[idx]/Lumped_Mass[idx*Ndim];
}"@60@@@@
./500140678/HeightTesting.h@27@CRITICAL@#pragma omp critical@"{
max_values = std::vector<double>(omp_get_max_threads());
}"@60@@@@
./242248042/is.c@196@CRITICAL@#pragma omp critical@"{
for( i=0; i<MAX_KEY; i++ )
key_buff1[i] += prv_buff1[i];
}"@60@@@@
./242248042/is-orig.c@196@CRITICAL@#pragma omp critical@"{
for( i=0; i<MAX_KEY; i++ )
key_buff1[i] += prv_buff1[i];
}"@60@@@@
./182386153/DNASequencesCompareWithNeedlemanWunsch.cpp@159@CRITICAL@#pragma omp critical@std::copy(calcSet.begin(), calcSet.end(), calcList.begin());@60@@@@
./356685186/tsp_rnd07.c@103@CRITICAL@#pragma omp critical@B = 1 + (int)(  ((float) rand())*(N-2)/((float)RAND_MAX)  );@60@@@@
./106476798/Problem1LargeDataSet.c@126@CRITICAL@#pragma omp critical@"{
insert_value_into_map(map, store, i, ARRAY_SIZE * nth);
}"@59@@@@
./187437533/Fourier.cpp@23@CRITICAL@#pragma omp critical@"{
Data.push_back(FourierElements(Sum, Freq, Phase, Amp));
}"@59@@@@
./106476798/Problem1LargeDataSet.c@131@CRITICAL@#pragma omp critical@"{
insert_store_into_map(map, store, i, ARRAY_SIZE * nth);
}"@59@@@@
./315333330/a.14.1.c@9@CRITICAL@#pragma omp critical (name)@"{
#pragma omp parallel
{
#pragma omp single
{
i++;
}
}
}"@58@@@@
./92494521/DRB139-worksharingcritical-orig-no.c@9@CRITICAL@#pragma omp critical (name)@"{
#pragma omp parallel
{
#pragma omp single
{
i++;
}
}
}"@58@@@@
./95979680/omp_code_solution_a.c@131@CRITICAL@#pragma omp critical@"if ((finish-start) > elapsed)
elapsed = (finish-start);
}"@57@@@@
./95979680/omp_code_false_sharing.c@107@CRITICAL@#pragma omp critical@"if ((finish-start) > elapsed)
elapsed = (finish-start);
}"@57@@@@
./284826364/disposable.c@94@CRITICAL@#pragma omp critical@"{
if (LOCAL_MIN_DSV < MIN_DSV)
MIN_DSV = LOCAL_MIN_DSV;
}"@57@@@@
./284826364/disposable.c@99@CRITICAL@#pragma omp critical@"{
if (LOCAL_MAX_DSV > MAX_DSV)
MAX_DSV = LOCAL_MAX_DSV;
}"@57@@@@
./107320494/host_vector.cpp@947@CRITICAL@#pragma omp critical@"if(val > value)
{
value = val;
index = i;
}"@57@@@@
./157857606/tsp.cpp@218@CRITICAL@#pragma omp critical@minCycle = min(make_pair(localMin,initPopl[0]),minCycle);@57@@@@
./81815495/mpm_search_element_utility.h@77@CRITICAL@#pragma omp critical@rGeom.SetValue(GEOMETRY_NEIGHBOURS, geometry_neighbours);@57@@@@
./289039618/critical1.c@10@CRITICAL@#pragma omp critical@"{
x += omp_get_thread_num();
}"@57@@@@
./248028642/labirynt_omp.cpp@58@CRITICAL@#pragma omp critical (threadCounter)@"{
threadCounter++;
currentThreadIndex = threadCounter;
}"@56@@@@
./274632175/task_gemm.c@26@CRITICAL@#pragma omp critical@"{
log_record(sync, it, EVENT_PRIORITY, idx, (float)p);
}"@56@@@@
./160418114/bnb_openMP.cpp@55@CRITICAL@#pragma omp critical@"{
for (int l = 0; l < ret.size(); l++)
q.push(ret[l]);
}"@56@@@@
./160418114/bnb_openMP.cpp@67@CRITICAL@#pragma omp critical@"{
for (int l = 0; l < ret.size(); l++)
q.push(ret[l]);
}"@56@@@@
./242248042/test51.c@23@CRITICAL@#pragma omp critical@"{
s2 += tid;
}"@56@@@@
./345082539/Queens4.1.c@49@CRITICAL@#pragma omp critical@crossover(NEW_POPULATION[gene1], NEW_POPULATION[gene2]);@56@@@@
./345082539/Queens4.0.c@50@CRITICAL@#pragma omp critical@crossover(NEW_POPULATION[gene1], NEW_POPULATION[gene2]);@56@@@@
./23245147/DfTaskCtrl.cpp@1251@CRITICAL@#pragma omp critical(DfTaskCtrl__selectShellArrayByDistribution_alive)@{ ++(this->cutoffAlive_distribution_[shellPairType]); }@55@@@@
./23245147/DfTaskCtrl.cpp@1396@CRITICAL@#pragma omp critical(DfTaskCtrl__makeDistributedCutoffTable_alive)@{ ++(this->cutoffAlive_distribution_[shellPairType]); }@55@@@@
./285965062/graphStats.c@237@CRITICAL@#pragma omp critical (MEMCPY)@memcpy(to + bufIndex, right, rightLen * sizeof(float));@55@@@@
./228117517/graphStats.c@237@CRITICAL@#pragma omp critical (MEMCPY)@memcpy(to + bufIndex, right, rightLen * sizeof(float));@55@@@@
./95979680/omp_code_solution_b.c@115@CRITICAL@#pragma omp critical@"if ((finish-start) > elapsed)
elapsed = (finish-start);"@55@@@@
./242248042/ft-orig.c@476@CRITICAL@#pragma omp critical@"{
sums[i].real += chk.real;
sums[i].imag += chk.imag;
}"@55@@@@
./242248042/ft.c@2130@CRITICAL@#pragma omp critical@"{
sums[i].real += chk.real;
sums[i].imag += chk.imag;
}"@55@@@@
./116965614/ft.cpp@695@CRITICAL@#pragma omp critical@"{
sums[i].real += chk.real;
sums[i].imag += chk.imag;
}"@55@@@@
./122826324/calc_par.cpp@63@CRITICAL@#pragma omp critical@"{
if (max_err_wave > max_err) max_err = max_err_wave;
}"@55@@@@
./95812973/Event.cpp@130@CRITICAL@#pragma omp critical@"{
this->updateMonteCarloSummary(teams, probability);
}"@54@@@@
./23245147/DfTaskCtrl.cpp@1400@CRITICAL@#pragma omp critical(DfTaskCtrl__makeDistributedCutoffTable_all)@{ ++(this->cutoffAll_distribution_[shellPairType]); }@53@@@@
./23245147/DfTaskCtrl.cpp@1773@CRITICAL@#pragma omp critical(DfTaskCtrl__isAliveBySchwarzCutoff_alive)@{ ++(this->cutoffAlive_schwarz_[shellQuartetType]); }@53@@@@
./23245147/DfTaskCtrl.cpp@1796@CRITICAL@#pragma omp critical(DfTaskCtrl__isAliveBySchwarzCutoff_alive)@{ ++(this->cutoffAlive_schwarz_[shellQuartetType]); }@53@@@@
./23245147/DfCD.cpp@3203@CRITICAL@#pragma omp critical(DfCD__calcCholeskyVectors)@"{
L_xm[i] += l_m_pi;
d[pivot_i] -= l_m_pi * l_m_pi;
}"@53@@@@
./285965062/graphStats.c@232@CRITICAL@#pragma omp critical (MEMCPY)@memcpy(to + bufIndex, left, leftLen * sizeof(float));@53@@@@
./228117517/graphStats.c@232@CRITICAL@#pragma omp critical (MEMCPY)@memcpy(to + bufIndex, left, leftLen * sizeof(float));@53@@@@
./589215327/optimization.cpp@246@CRITICAL@#pragma omp critical@"{
factor += curr_factor;
next_factor += new_factor;
}"@53@@@@
./90575672/mg.c@622@CRITICAL@#pragma omp critical@max_rnmu = (my_rnmu > max_rnmu) ? my_rnmu : max_rnmu;@53@@@@
./61810048/Laser.h@135@CRITICAL@#pragma omp critical@amp = spaceAndTimeProfile_->complexValueAt( pos, t );@53@@@@
./210781113/phasechanges.cxx@127@CRITICAL@#pragma omp critical(phase_change_simple_subduction)@"{
hydms.append_marker(eta, el, 0);
++hydem[el][0];
}"@52@@@@
./68946407/sudoku.c@332@CRITICAL@#pragma omp critical (soln)@"{
soln_found = 1;
soln_matrix = curr_grid->matrix;
}"@52@@@@
./546806621/omp_critical.c@59@CRITICAL@#pragma omp critical@"{
if (numbers[i] > maxval){
maxval = numbers[i];
}
}"@52@@@@
./242248042/ep.c@218@CRITICAL@#pragma omp critical@"{
for (i = 0; i <= 10 - 1; i++) {
q[i] += qq[i];
}
}"@52@@@@
./132911537/main.c@826@CRITICAL@#pragma omp critical@"{
allWords[*iterator] = strings[i];
(*iterator)++;
}"@52@@@@
./23245147/DfTaskCtrl.cpp@1800@CRITICAL@#pragma omp critical(DfTaskCtrl__isAliveBySchwarzCutoff_all)@{ ++(this->cutoffAll_schwarz_[shellQuartetType]); }@51@@@@
./23245147/TlCommunicate.cpp@1920@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@50@@@@
./23245147/TlCommunicate.cpp@2227@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@50@@@@
./23245147/TlCommunicate.cpp@1971@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@50@@@@
./23245147/TlCommunicate.cpp@2258@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@50@@@@
./23245147/TlCommunicate.cpp@2141@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@50@@@@
./23245147/TlCommunicate.cpp@2096@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@50@@@@
./23245147/TlCommunicate.cpp@1833@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@50@@@@
./23245147/TlCommunicate.cpp@2013@CRITICAL@#pragma omp critical(TlCommunicate_nonBlockingCommParamTable_update)@{ this->nonBlockingCommParamTable_[key] = param; }@50@@@@
./23245147/DfTaskCtrl.cpp@1582@CRITICAL@#pragma omp critical(DfTaskCtrl__selectShellPairArrayTableByDensity_add_alive)@{ ++(this->cutoffAlive_density_[shellPairType]); }@50@@@@
./23245147/DfTaskCtrl.cpp@1687@CRITICAL@#pragma omp critical(DfTaskCtrl__selectShellPairArrayTableByDensity_add_alive)@{ ++(this->cutoffAlive_density_[shellPairType]); }@50@@@@
./202712923/atomic_detail.h@159@CRITICAL@#pragma omp critical@"{
old = *address;
*address = std::min(old, arg);
}"@50@@@@
./202712923/atomic_detail.h@172@CRITICAL@#pragma omp critical@"{
old = *address;
*address = std::max(old, arg);
}"@50@@@@
./242248042/lu-orig.c@1586@CRITICAL@#pragma omp critical@std::vector<IndexPair4S> calcList(calcSet.size());@50@@@@
./69469951/window.cpp@2256@CRITICAL@#pragma omp critical@paramProgress->setCurrentProgress( ++currentRow );@50@@@@
./160418114/bnb_hybrid.cpp@153@CRITICAL@#pragma omp critical@"for (int i = 0; i < v.size(); i++)
q.push(v[i]);
"@49@@@@
./81815495/create_and_destroy.cpp@563@CRITICAL@#pragma omp critical@"{
r_modelpart.Elements().push_back(p_particle);
}"@49@@@@
./81815495/create_and_destroy.cpp@522@CRITICAL@#pragma omp critical@"{
r_modelpart.Elements().push_back(p_particle);
}"@49@@@@
./81815495/distributed_matrix.hpp@1213@CRITICAL@#pragma omp critical@"{
b1_loc_norm += t_norm;
loc_radius  += t_radi;
}"@49@@@@
./6987353/distributed_matrix.hpp@1213@CRITICAL@#pragma omp critical@"{
b1_loc_norm += t_norm;
loc_radius  += t_radi;
}"@49@@@@
./315333330/a.35.5.c@7@CRITICAL@#pragma omp critical@"{
work (n, 0);
#pragma omp barrier
work (n, 1);
}"@49@@@@
./81815495/apply_constant_interpolate_line_pressure_process.hpp@392@CRITICAL@#pragma omp critical@MaxNodeID = std::max<int>(MaxNodeID, rNode.Id());@49@@@@
./23245147/tl_sparse_matrix.h@193@CRITICAL@#pragma omp critical(TlSparseMatrix__add)@{ this->m_aMatrix[KeyType(row, col)] += value; }@48@@@@
./23245147/DfTaskCtrl.cpp@1586@CRITICAL@#pragma omp critical(DfTaskCtrl__selectShellPairArrayTableByDensity_add_all)@{ ++(this->cutoffAll_density_[shellPairType]); }@48@@@@
./23245147/DfTaskCtrl.cpp@1691@CRITICAL@#pragma omp critical(DfTaskCtrl__selectShellPairArrayTableByDensity_add_all)@{ ++(this->cutoffAll_density_[shellPairType]); }@48@@@@
./302674724/search_max_openmp.c@30@CRITICAL@#pragma omp critical (cs_a_max)@"{
if(a_max < a_max_local) a_max = a_max_local;
}"@48@@@@
./242248042/ep-orig.c@93@CRITICAL@#pragma omp critical@"{
for (i = 0; i <= NQ - 1; i++) q[i] += qq[i];
}"@48@@@@
./116965614/ep.cpp@136@CRITICAL@#pragma omp critical@"{
for (i = 0; i <= NQ - 1; i++) q[i] += qq[i];
}"@48@@@@
./40821917/muParserBase.cpp@1446@CRITICAL@#pragma omp critical@"{
pThread[ct] = nThreadID;
pIdx[ct] = i;
ct++;
}"@48@@@@
./277890040/ep.cpp@150@CRITICAL@#pragma omp critical@"{
for (i = 0; i <= NQ - 1; i++) q[i] += qq[i];
}"@48@@@@
./81815495/spgemm.hpp@374@CRITICAL@#pragma omp critical@max_row_width = std::max(max_row_width, my_max);@48@@@@
./81815495/sparse_matrix_multiplication_utility.h@224@CRITICAL@#pragma omp critical@max_row_width = std::max(max_row_width, my_max);@48@@@@
./6987353/spgemm.hpp@374@CRITICAL@#pragma omp critical@max_row_width = std::max(max_row_width, my_max);@48@@@@
./23245147/tl_sparse_matrix.h@184@CRITICAL@#pragma omp critical(TlSparseMatrix__set)@{ this->m_aMatrix[KeyType(row, col)] = value; }@47@@@@
./72529136/bst_parallel.cpp@70@CRITICAL@#pragma omp critical(output)@"ofs << words[i] << "" "" << reverse_word << endl;"@47@@@@
./72529136/vec_parallel.cpp@43@CRITICAL@#pragma omp critical(output)@"ofs << reverse_word << "" "" << words[i] << endl;"@47@@@@
./81815495/logger.cpp@32@CRITICAL@#pragma omp critical@"{
GetOutputsInstance().push_back(pTheOutput);
}"@47@@@@
./82070754/task10.cpp@35@CRITICAL@#pragma omp critical@"if (matrix[i][j] < min) {
min = matrix[i][j];
}"@47@@@@
./23245147/DfPopulation.cpp@57@CRITICAL@#pragma omp critical(DfPopulation__getGrossAtomPop)@{ answer[atomIndex] += grossOrbPop[aoIndex]; }@46@@@@
./249790277/kmeans.c@364@CRITICAL@#pragma omp critical@searcher = vl_kdforest_new_searcher (forest) ;@46@@@@
./252666983/rdf.c@77@CRITICAL@#pragma omp critical@for(i = 0; i < res; i++) bins[i] += p_bins[i];@46@@@@
./242248042/criticalOne.c@21@CRITICAL@#pragma omp critical@"{
S1 = 1;
s1 = s1 + 2;
s2 = s1;
arr[i] = 10;
}"@46@@@@
./572223235/main.c@62@CRITICAL@#pragma omp critical@sum_matrix = matrix_sum(sum_matrix, temp_sum);@46@@@@
./61810048/Laser.h@127@CRITICAL@#pragma omp critical@amp = spaceAndTimeProfile_->valueAt( pos, t );@46@@@@
./81815495/mpm_search_element_utility.h@226@CRITICAL@#pragma omp critical@rMissingConditions.push_back(&*condition_itr);@46@@@@
./69469951/window.cpp@558@CRITICAL@#pragma omp critical@progress->setCurrentProgress( currentObject );@46@@@@
./81815495/create_and_destroy.cpp@182@CRITICAL@#pragma omp critical@"{
r_modelpart.Nodes().push_back(pnew_node);
}"@45@@@@
./31732163/partition.cpp@159@CRITICAL@#pragma omp critical@"if (nb.parts < nb_col) {
nb.parts = nb_col;
}"@45@@@@
./81815495/builtin.hpp@842@CRITICAL@#pragma omp critical@"{
b1_norm += loc_norm;
radius  += loc_radi;
}"@45@@@@
./166241939/par.hpp@49@CRITICAL@#pragma omp critical@"{
reduction = lambda(reduction, priv_part);
}"@45@@@@
./160418114/bnb_openMP.cpp@43@CRITICAL@#pragma omp critical@"if (s.get_cost() < best.get_cost())
best = s;"@45@@@@
./81815495/pqmpm_partition_utilities.cpp@165@CRITICAL@#pragma omp critical@"KRATOS_INFO(""MPMSearchElementUtility::Check"")"@45@@@@
./302674724/search_max_openmp.c@68@CRITICAL@#pragma omp critical(a_max)@if(a_max < a_max_local) a_max = a_max_local;@44@@@@
./211799119/lemon-tc.cpp@33@CRITICAL@#pragma omp critical@actual_num_threads = actual_num_threads + 1;@44@@@@
./479812853/kmeans_parakmeans.cpp@83@CRITICAL@#pragma omp critical@global_centers[i][j] += local_centers[i][j];@44@@@@
./410821171/Practice7.cpp@74@CRITICAL@#pragma omp critical(MAXVALUE)@"{
if (max < data1[i]) {
max = data1[i];
}
}"@43@@@@
./3769753/PopBubbles.cpp@346@CRITICAL@#pragma omp critical(cerr)@"cerr << nbranches << "" paths (too many)\n"";"@43@@@@
./394157680/task1.cpp@12@CRITICAL@#pragma omp critical@"{
int temp = count;
temp++;
count = temp;
}"@43@@@@
./457767085/ParallelFastLHE.cpp@105@CRITICAL@#pragma omp critical@"{
all_luts[std::make_tuple(i, j)] = lut;
}"@43@@@@
./116965614/mg.cpp@698@CRITICAL@#pragma omp critical@"{
s += p_s;
if (p_a > *rnmu) *rnmu = p_a;
}"@43@@@@
./67013333/common.h@61@CRITICAL@#pragma omp critical@"{
if(*ptr == old_val) {
*ptr = new_val;
}
}"@43@@@@
./69469951/khistogram.cpp@1273@CRITICAL@#pragma omp critical@progress->setCurrentProgress( currentRow );@43@@@@
./81815495/cuthill_mckee.hpp@41@CRITICAL@#pragma omp critical@"{
maxDegree = std::max(maxDegree, maxd);
}"@42@@@@
./6987353/cuthill_mckee.hpp@41@CRITICAL@#pragma omp critical@"{
maxDegree = std::max(maxDegree, maxd);
}"@42@@@@
./228656264/ctor-4.C@47@CRITICAL@#pragma omp critical@"{
assert (e_inner == 0);
e_inner = this;
}"@42@@@@
./315333330/ctor-4.C@47@CRITICAL@#pragma omp critical@"{
assert (e_inner == 0);
e_inner = this;
}"@42@@@@
./228656264/ctor-3.C@46@CRITICAL@#pragma omp critical@"{
assert (e_inner == 0);
e_inner = this;
}"@42@@@@
./315333330/ctor-3.C@46@CRITICAL@#pragma omp critical@"{
assert (e_inner == 0);
e_inner = this;
}"@42@@@@
./81815495/mpm_search_element_utility.h@189@CRITICAL@#pragma omp critical@rMissingElements.push_back(&*element_itr);@42@@@@
./161077928/sdd.c@114@CRITICAL@#pragma omp critical (inc_min)@"{
min=B[i][j];
min_row=i;
min_column=j;
}"@41@@@@
./85618549/RoadRepresentation.cpp@61@CRITICAL@#pragma omp critical@"{
LUT_dispOfRow.at<int>(row, 0) = disp;
}"@41@@@@
./452763130/counting_sort.c@16@CRITICAL@#pragma omp critical@"{
if (array[i] < *min)
*min = array[i];
}"@41@@@@
./452763130/counting_sort.c@23@CRITICAL@#pragma omp critical@"{
if (array[i] > *max)
*max = array[i];
}"@41@@@@
./183025748/SequenceAlignment.c@21@CRITICAL@#pragma omp critical@read_all_seq(FILE_NAME, SEQ_SIZE, LIMIT);@41@@@@
./483750905/matrix.c@247@CRITICAL@#pragma omp critical@adder += matrix_A[i][j] * matrix_B[j][a];@41@@@@
./149614655/bf-omp.cpp@131@CRITICAL@#pragma omp critical@has_change = has_change || my_has_change;@41@@@@
./106249716/grid_decomposition.cxx@1273@CRITICAL@#pragma omp critical@decomp->local_leaf_nodes.push_back(node);@41@@@@
./3769753/MIBloomFilter.hpp@144@CRITICAL@#pragma omp critical(stderr)@"cerr << ""Failed to Load header"" << endl;"@40@@@@
./77235735/knapsack.c@172@CRITICAL@#pragma omp critical@bots_number_of_tasks += number_of_tasks;@40@@@@
./23245147/DfCD.cpp@2484@CRITICAL@#pragma omp critical(DfCD__calcDiagonalsA_kernel_2)@{ pDiagonalMat->merge(local_diagMat); }@39@@@@
./23245147/DfCD.cpp@2239@CRITICAL@#pragma omp critical(DfCD__calcDiagonals_kernel_2)@{ pDiagonalMat->merge(local_diagMat); }@39@@@@
./23245147/DfCD.cpp@2308@CRITICAL@#pragma omp critical(DfCD__calcDiagonals_kernel_2)@{ pDiagonalMat->merge(local_diagMat); }@39@@@@
./60191570/success_priority_01.c@14@CRITICAL@#pragma omp critical( my_lock )@"{
if( done == 0 )
*var = 0;
done = 1;
}"@39@@@@
./282853714/kahnAlgorithm.c@44@CRITICAL@#pragma omp critical (c1)@headL = insertNode(headL, headS->data);@39@@@@
./202712923/atomic_detail.h@48@CRITICAL@#pragma omp critical@"{
old = *address;
*address = desired;
}"@39@@@@
./212375578/09.cpp@32@CRITICAL@#pragma omp critical@"if (localMax > max) {
max = localMax;
}"@39@@@@
./212375578/09.cpp@28@CRITICAL@#pragma omp critical@"if (localMin < min) {
min = localMin;
}"@39@@@@
./212375578/11.cpp@14@CRITICAL@#pragma omp critical@"if (array[i] > max) {
max = array[i];
}"@39@@@@
./449282076/h5_problem2.c@123@CRITICAL@#pragma omp critical@"{
if (lines->head == NULL) {
val = 1;
}"@39@@@@
./96631497/SimulationNBodyV2.hxx@173@CRITICAL@#pragma omp critical@closNeighj = std::min(closNeighj, rij);@39@@@@
./106249716/grid_decomposition.cxx@1275@CRITICAL@#pragma omp critical@decomp->all_leaf_nodes.push_back(node);@39@@@@
./106249716/grid_decomposition.cxx@2255@CRITICAL@#pragma omp critical@decomp->all_leaf_nodes.push_back(node);@39@@@@
./438852969/scalar_product.cpp@60@CRITICAL@#pragma omp critical@scalar_product = scalar_product + prod;@39@@@@
./3769753/MIBloomFilter.hpp@205@CRITICAL@#pragma omp critical(stderr)@"cerr << ""Loading data vector"" << endl;"@38@@@@
./139841722/game_statistics.cpp@54@CRITICAL@#pragma omp critical(possession_update)@"{
ball_possession.reduce(distances);
}"@38@@@@
./81815495/cluster3D.cpp@161@CRITICAL@#pragma omp critical@"{
(*p_max_Id)++;
max_Id = *p_max_Id;
}"@38@@@@
./423543851/amicable_omp.c@70@CRITICAL@#pragma omp critical@"{
sum_all += (a + b);
vsote[a] = -1;
}"@38@@@@
./250192223/OpenQR.cpp@737@CRITICAL@#pragma omp critical@"{
expectedQrCodes.push_back(qrcode);
}"@38@@@@
./541299735/chudnovsky_simplified_expression_blocks.c@71@CRITICAL@#pragma omp critical@mpfr_add(pi, pi, local_pi, MPFR_RNDN);@38@@@@
./541299735/bbp_blocks.c@43@CRITICAL@#pragma omp critical@mpfr_add(pi, pi, local_pi, MPFR_RNDN);@38@@@@
./541299735/bellard_recursive_power_cyclic.c@69@CRITICAL@#pragma omp critical@mpfr_add(pi, pi, local_pi, MPFR_RNDN);@38@@@@
./541299735/bellard_bit_shift_power_cyclic.c@33@CRITICAL@#pragma omp critical@mpfr_add(pi, pi, local_pi, MPFR_RNDN);@38@@@@
./249790277/in_element.cpp@45@CRITICAL@#pragma omp critical@IJV.push_back(Triplet<Scalar>(e,r,1));@38@@@@
./215497623/checkerboard_openmp.cpp@118@CRITICAL@#pragma omp critical@result[pRowInd[i]+j] += tempResult[j];@38@@@@
./555688434/min_max.c@11@CRITICAL@#pragma omp critical@"if(min<global_min){
global_min=min;
}"@37@@@@
./555688434/min_max.c@25@CRITICAL@#pragma omp critical@"if(max>global_max){
global_max=max;
}"@37@@@@
./77235735/concom.c@56@CRITICAL@#pragma omp critical@"{
visited[i] = 1;
components[cc]++;
}"@37@@@@
./182564675/tsynch.c@20@CRITICAL@#pragma omp critical@result += (result_even + result_odd);@37@@@@
./62011740/rkmh.cpp@320@CRITICAL@#pragma omp critical@++read_hash_to_depth[ hashes[i][j] ];@37@@@@
./285965062/graphStats.c@258@CRITICAL@#pragma omp critical (MEMCPY)@memcpy(x, buf, len * sizeof(float));@36@@@@
./228117517/graphStats.c@258@CRITICAL@#pragma omp critical (MEMCPY)@memcpy(x, buf, len * sizeof(float));@36@@@@
./499040711/image_reconstruction3.c@108@CRITICAL@#pragma omp critical@if ( d < min ) { min = d; mx = x2; }@36@@@@
./499040711/image_reconstruction2.c@96@CRITICAL@#pragma omp critical@if ( d < min ) { min = d; mx = x2; }@36@@@@
./202712923/atomic_detail.h@77@CRITICAL@#pragma omp critical@"{
old = *address;
*address += arg;
}"@36@@@@
./202712923/atomic_detail.h@145@CRITICAL@#pragma omp critical@"{
old = *address;
*address ^= arg;
}"@36@@@@
./202712923/atomic_detail.h@94@CRITICAL@#pragma omp critical@"{
old = *address;
*address -= arg;
}"@36@@@@
./202712923/atomic_detail.h@111@CRITICAL@#pragma omp critical@"{
old = *address;
*address &= arg;
}"@36@@@@
./202712923/atomic_detail.h@128@CRITICAL@#pragma omp critical@"{
old = *address;
*address |= arg;
}"@36@@@@
./457797436/omp_main_lock.c@23@CRITICAL@#pragma omp critical@"{
assert (x == y);
x = y + 1;
y++;
}"@36@@@@
./84231963/sudoku.c@78@CRITICAL@#pragma omp critical@"{
if (top!=NULL)
{
curr = pop();
}
}"@36@@@@
./250192223/OpenQR.cpp@684@CRITICAL@#pragma omp critical@"{
positionPatterns.push_back(tmp);
}"@36@@@@
./277890040/ft.cpp@447@CRITICAL@#pragma omp critical@chk = dcomplex_add(chk, chk_worker);@36@@@@
./106249716/grid_decomposition.cxx@2320@CRITICAL@#pragma omp critical@(*leaf_nodes_found).push_back(node);@36@@@@
./316496740/Class.cpp@27@CRITICAL@#pragma omp critical@Classes[argmin_idx].emplace_back(i);@36@@@@
./285634219/cuBool_gpu.h@374@CRITICAL@#pragma omp critical(kiss)@config_i.seed = fast_kiss32(state);@35@@@@
./499040711/image_reconstruction3.c@88@CRITICAL@#pragma omp critical@if ( d < min ) { min = d; my = y2;}@35@@@@
./23245147/DfCD.cpp@2857@CRITICAL@#pragma omp critical(DfCD__setERIs_set_answer)@{ answer[i] += values.at(index); }@34@@@@
./167942829/cluster.cpp@148@CRITICAL@#pragma omp critical@"{
pointsChange += changedPoints;
}"@34@@@@
./228656264/critical-2.c@16@CRITICAL@#pragma omp critical@"for (i = 0; i < N; i++)
A[i] += 1;"@34@@@@
./315333330/critical-2.c@16@CRITICAL@#pragma omp critical@"for (i = 0; i < N; i++)
A[i] += 1;"@34@@@@
./250192223/OpenQR.cpp@643@CRITICAL@#pragma omp critical@"{
squareContours.push_back(tmp);
}"@34@@@@
./444027145/2-trap1.c@60@CRITICAL@#pragma omp critical@*global_result_p += my_result * h;@34@@@@
./261549670/ParallelKMeans.hpp@90@CRITICAL@#pragma omp critical@minPropDist[j] = minDist[j] / sum;@34@@@@
./361866782/parser.cpp@89@CRITICAL@#pragma omp critical@table[l][s][gram[j][0][0]] = true;@34@@@@
./70791926/Attack.cpp@142@CRITICAL@#pragma omp critical@solutions.push_back(keysBackward);@34@@@@
./315333330/target-critical-1.c@42@CRITICAL@#pragma omp critical (crit2)@"for (i = 0; i < N; i++)
B[i]++;
}"@33@@@@
./228656264/target-critical-1.c@17@CRITICAL@#pragma omp critical (crit1)@"for (i = 0; i < N; i++)
A[i]++;
}"@33@@@@
./315333330/target-critical-1.c@17@CRITICAL@#pragma omp critical (crit1)@"for (i = 0; i < N; i++)
A[i]++;
}"@33@@@@
./81815495/update_thermal_model_part_process.hpp@120@CRITICAL@#pragma omp critical@{ ids.push_back(it_elem->Id()); }@33@@@@
./170941811/openmp.cpp@205@CRITICAL@#pragma omp critical@if (dmin < absmin) absmin = dmin;@33@@@@
./56463083/openmp.cpp@66@CRITICAL@#pragma omp critical@if (dmin < absmin) absmin = dmin;@33@@@@
./81815495/rom_residuals_utility.h@253@CRITICAL@#pragma omp critical@"{
noalias(a_phi) += temp_a_phi;
}"@33@@@@
./510505991/Q1.cpp@89@CRITICAL@#pragma omp critical@"{
if(Prime<itr){
Prime = itr;
}
}"@33@@@@
./510505991/Q1.cpp@99@CRITICAL@#pragma omp critical@"{
if(Prime<itr){
Prime = itr;
}
}"@33@@@@
./510505991/Q1.cpp@130@CRITICAL@#pragma omp critical@"{
if(Prime<itr){
Prime = itr;
}
}"@33@@@@
./510505991/Q1.cpp@140@CRITICAL@#pragma omp critical@"{
if(Prime<itr){
Prime = itr;
}
}"@33@@@@
./510505991/Q1.cpp@109@CRITICAL@#pragma omp critical@"{
if(Prime<itr){
Prime = itr;
}
}"@33@@@@
./510505991/Q1.cpp@150@CRITICAL@#pragma omp critical@"{
if(Prime<itr){
Prime = itr;
}
}"@33@@@@
./58348790/tiled_parallel_outer_for_kk.c@71@CRITICAL@#pragma omp critical@"{
C[i][j] += A[i][k] * B[k][j];
}"@33@@@@
./58348790/tiled_parallel_outer_for_k.c@71@CRITICAL@#pragma omp critical@"{
C[i][j] += A[i][k] * B[k][j];
}"@33@@@@
./301893557/omp_prim.c@55@CRITICAL@#pragma omp critical@edges = insert_node(edge, edges);@33@@@@
./46390503/read.cpp@185@CRITICAL@#pragma omp critical@uniqueVertices.push_back(vertex);@33@@@@
./116842157/sqs.cpp@345@CRITICAL@#pragma omp critical@best_objective = objective_local;@33@@@@
./3769753/RAlgorithmsShort.cpp@525@CRITICAL@#pragma omp critical(maxSupport)@"{
if (unknown) {
end = true;
}
}"@32@@@@
./3769753/RAlgorithmsShort.cpp@511@CRITICAL@#pragma omp critical(maxSupport)@"{
if (unknown) {
end = true;
}
}"@32@@@@
./81815495/spatial_methods.h@288@CRITICAL@#pragma omp critical@"{
global_variance += variance;
}"@32@@@@
./81815495/calculate_water_fraction.h@252@CRITICAL@#pragma omp critical@int main(int argc, char *argv[])@32@@@@
./246400188/kmeans_parallel.c@201@CRITICAL@#pragma omp critical@n_points[i] += part_n_points[i];@32@@@@
./246400188/7_kmeans_parallel.c@214@CRITICAL@#pragma omp critical@n_points[i] += part_n_points[i];@32@@@@
./448724645/bz_mesh.cpp@180@CRITICAL@#pragma omp critical@list_energies.push_back(energy);@32@@@@
./448724645/bz_mesh.cpp@203@CRITICAL@#pragma omp critical@list_energies.push_back(energy);@32@@@@
./81815495/distributed_matrix.hpp@1127@CRITICAL@#pragma omp critical@radius = std::max(radius, emax);@32@@@@
./81815495/builtin.hpp@777@CRITICAL@#pragma omp critical@radius = std::max(radius, emax);@32@@@@
./6987353/distributed_matrix.hpp@1127@CRITICAL@#pragma omp critical@radius = std::max(radius, emax);@32@@@@
./6987353/builtin.hpp@777@CRITICAL@#pragma omp critical@radius = std::max(radius, emax);@32@@@@
./229640188/pathtracer_MPI_OMP.c@364@CRITICAL@}@"{
var = 1;
fp=I1[0];
lp=I1[1];
}"@32@@@@
./3769753/MergePaths.cpp@432@CRITICAL@#pragma omp critical(out)@inserted = out.insert(*pathIt);@31@@@@
./227389214/tree_mesh_builder.cpp@81@CRITICAL@#pragma omp critical(emitTriangle)@mTriangles.push_back(triangle);@31@@@@
./227389214/loop_mesh_builder.cpp@53@CRITICAL@#pragma omp critical(emitTriangle)@mTriangles.push_back(triangle);@31@@@@
./23245147/DfCD.cpp@2669@CRITICAL@#pragma omp critical(DfCD__getCalcList)@{ calcSet.insert(indexPair4); }@31@@@@
./439117495/tree_mesh_builder.cpp@105@CRITICAL@#pragma omp critical(critical)@mTriangles.push_back(triangle);@31@@@@
./439117495/loop_mesh_builder.cpp@61@CRITICAL@#pragma omp critical(crit)@mTriangles.push_back(triangle);@31@@@@
./228656264/target-critical-1.c@42@CRITICAL@#pragma omp critical (crit2)@"for (i = 0; i < N; i++)
B[i]++;"@31@@@@
./81683654/LockFreeBinaryListMap.c@53@CRITICAL@#pragma omp critical@"{
gettimeofday(&start, NULL);
}"@31@@@@
./81683654/LockBasedBinaryListMap.c@50@CRITICAL@#pragma omp critical@"{
gettimeofday(&start, NULL);
}"@31@@@@
./81683654/LockFreeBinaryArrayMap.c@66@CRITICAL@#pragma omp critical@"{
gettimeofday(&start, NULL);
}"@31@@@@
./81683654/ConcurrentLinkedListMap.c@37@CRITICAL@#pragma omp critical@"{
gettimeofday(&start, NULL);
}"@31@@@@
./108110961/OpenMP_Report1.cpp@52@CRITICAL@#pragma omp critical@"{
average += sum / Nelements;
}"@31@@@@
./315333330/Wparentheses-3.c@163@CRITICAL@#pragma omp critical@"{
if (b)
bar ();
else
baz ();
}"@31@@@@
./315333330/Wparentheses-1.c@163@CRITICAL@#pragma omp critical@"{
if (b)
bar ();
else
baz ();
}"@31@@@@
./282155944/example11.c@9@CRITICAL@#pragma omp critical@"if (A[i] > max)
{
max = A[i];
}"@31@@@@
./58348790/max.c@16@CRITICAL@#pragma omp critical@"{
if (a[i] > max)
max = a[i];
}"@31@@@@
./242248042/criticalConstruct.c@6@CRITICAL@#pragma omp critical@"{
localX += 20;
localX -= 10;
}"@31@@@@
./124574336/nvector_openmp.c@718@CRITICAL@#pragma omp critical@"{
if (tmin < min) min = tmin;
}"@31@@@@
./124574336/nvector_openmp.c@901@CRITICAL@#pragma omp critical@"{
if (tmin < min) min = tmin;
}"@31@@@@
./124574336/nvector_openmp.c@667@CRITICAL@#pragma omp critical@"{
if (tmax > max)
max = tmax;
}"@31@@@@
./3769753/RAlgorithmsShort.cpp@964@CRITICAL@#pragma omp critical(unsupportedPaths)@unsupportedPaths.insert(path);@30@@@@
./371900770/omp.cpp@49@CRITICAL@#pragma omp critical@"{
max_sum = segment_max_sum;
}"@30@@@@
./81815495/from_json_check_result_process.cpp@256@CRITICAL@#pragma omp critical@"{
mErrorMessage += ss.str();
}"@30@@@@
./371900770/omp.cpp@70@CRITICAL@#pragma omp critical@"{
max_sum = segment_max_sum;
}"@30@@@@
./289039618/critical_multiple.c@10@CRITICAL@#pragma omp critical@"{
x += omp_get_thread_num();
}"@30@@@@
./124247514/reduction-clauseModificado7.c@20@CRITICAL@#pragma omp critical@suma+=a[omp_get_thread_num()];@30@@@@
./438852969/scalar_product.cpp@124@CRITICAL@#pragma omp critical@"{
total[i] = scalar_product;
}"@30@@@@
./23245147/TlEspField.cpp@45@CRITICAL@#pragma omp critical(TlEspField__makeEspFld)@{ values[gridIndex] += esp; }@29@@@@
./23245147/TlEspField.cpp@75@CRITICAL@#pragma omp critical(TlEspField__makeEspFld)@{ values[gridIndex] += esp; }@29@@@@
./23245147/TlDensField.cpp@32@CRITICAL@#pragma omp critical(TlDensField__makeDensFld)@{ values[gridIndex] += rho; }@29@@@@
./3769753/bloom-dbg.h@926@CRITICAL@#pragma omp critical(readLog)@streams.readLogOut << result;@29@@@@
./3769753/DistanceEst.cpp@632@CRITICAL@#pragma omp critical(in)@readPairs(it, last, records);@29@@@@
./21635382/octree_openmp.c@169@CRITICAL@#pragma omp critical(boxMutex)@"{
box[boxIndex] = temp_box;
}"@29@@@@
./21635382/octree_openmp.c@162@CRITICAL@#pragma omp critical(boxMutex)@"{
box[boxIndex] = temp_box;
}"@29@@@@
./3769753/MergePaths.cpp@782@CRITICAL@#pragma omp critical(atomicInc)@out = it == last ? it : it++;@29@@@@
./161696083/test_task_depend_iterator.cpp@20@CRITICAL@#pragma omp critical@"{
threadOrder.push_back(i);
}"@29@@@@
./512222906/main.cpp@225@CRITICAL@#pragma omp critical@"if (a > max_a) {
max_a = a;
}"@29@@@@
./636093179/omp_prac2.c@13@CRITICAL@#pragma omp critical@"{
total_Sum += partial_Sum;
}"@29@@@@
./13330867/refcount.c@324@CRITICAL@#pragma omp critical@error = MAX(error,num_error);@29@@@@
./3769753/RAlgorithmsShort.cpp@961@CRITICAL@#pragma omp critical(supportedPaths)@supportedPaths.insert(path);@28@@@@
./3769753/RAlgorithmsShort.cpp@1135@CRITICAL@#pragma omp critical(edges2add)@edges2add.push_back(NewEdge(@28@@@@
./3769753/RAlgorithmsShort.cpp@1145@CRITICAL@#pragma omp critical(edges2add)@edges2add.push_back(NewEdge(@28@@@@
./189645273/ParallelNeedlemanWunsch.cpp@67@CRITICAL@#pragma omp critical@"{
addReport(ii, j, score);
}"@28@@@@
./81815495/periodic_interface_process.hpp@127@CRITICAL@#pragma omp critical@"{
rE[ie].Set(ACTIVE,true);
}"@28@@@@
./308846402/MCTS.h@188@CRITICAL@#pragma omp critical@backpropogate(result, path);@28@@@@
./3769753/DistanceEst.cpp@250@CRITICAL@#pragma omp critical(g_recMA)@g_recMA = min(g_recMA, ma);@27@@@@
./23245147/DfCD.cpp@2638@CRITICAL@#pragma omp critical(DfCD__getCalcList)@{ calcSet.insert(index4); }@27@@@@
./23245147/DfCD.cpp@3355@CRITICAL@#pragma omp critical(DfCD__getCalcList_K_half)@{ calcSet.insert(index4); }@27@@@@
./23245147/DfCD.cpp@3360@CRITICAL@#pragma omp critical(DfCD__getCalcList_K_half)@{ calcSet.insert(index4); }@27@@@@
./23245147/DfCD.cpp@3266@CRITICAL@#pragma omp critical(DfCD__getCalcList_K_full)@{ calcSet.insert(index4); }@27@@@@
./250192223/OpenQR.cpp@808@CRITICAL@#pragma omp critical@"{
qrcodes.push_back(tmp);
}"@27@@@@
./250192223/OpenQR.cpp@874@CRITICAL@#pragma omp critical@"{
qrcodes.push_back(tmp);
}"@27@@@@
./315333330/Wparentheses-3.c@69@CRITICAL@#pragma omp critical@"if (b)
bar ();
else
Baz ();"@27@@@@
./315333330/Wparentheses-1.c@69@CRITICAL@#pragma omp critical@"if (b)
bar ();
else
Baz ();"@27@@@@
./149614655/bf-omp.cpp@114@CRITICAL@#pragma omp critical@dist[v] = dist[u] + weight;@27@@@@
./261549670/ParallelKMeans.hpp@145@CRITICAL@#pragma omp critical@clusters[clusterId].Add(i);@27@@@@
./88884801/trapezoidal_integral.cpp@22@CRITICAL@#pragma omp critical@integral += local_integral;@27@@@@
./144825443/openMP_Points2Tiles.cpp@112@CRITICAL@#pragma omp critical@vcPoints.push_back(tPoint);@27@@@@
./144825443/openMP_Points2Tiles.cpp@127@CRITICAL@#pragma omp critical@vcPoints.push_back(tPoint);@27@@@@
./285634219/cuBool_gpu.h@372@CRITICAL@#pragma omp critical(kiss)@seed = fast_kiss32(state);@26@@@@
./315333330/nesting-1.c@211@CRITICAL@#pragma omp critical (foo)@#pragma omp critical (bar)@26@@@@
./315333330/nesting-1.c@224@CRITICAL@#pragma omp critical (bar)@#pragma omp critical (bar)@26@@@@
./154528299/cpp_omp_sample.cpp@46@CRITICAL@#pragma omp critical@"{
total = total + myid ;
}"@26@@@@
./450431845/kdtreehybrid.cpp@131@CRITICAL@#pragma omp critical@"{
vect.push_back({a,b});
}"@26@@@@
./450431845/kdtree.cpp@126@CRITICAL@#pragma omp critical@"{
vect.push_back({a,b});
}"@26@@@@
./450431845/Kd_tree_MPI_openmp.cpp@126@CRITICAL@#pragma omp critical@"{
vect.push_back({a,b});
}"@26@@@@
./153533248/block_chain.cpp@55@CRITICAL@#pragma omp critical@"{
_modified_hash = true;
}"@26@@@@
./291746844/prime_num_sum.c@24@CRITICAL@#pragma omp critical@primesum = primesum + num;@26@@@@
./315333330/nesting-1.c@214@CRITICAL@#pragma omp critical@#pragma omp critical (baz)@26@@@@
./587538036/dotp.c@8@CRITICAL@#pragma omp critical@global_sum += x[i] * y[i];@26@@@@
./541299735/chudnovsky_simplified_expression_integers_blocks.c@69@CRITICAL@#pragma omp critical@mpf_add(pi, pi, local_pi);@26@@@@
./541299735/chudnovsky_all_factorials_blocks.c@75@CRITICAL@#pragma omp critical@mpf_add(pi, pi, local_pi);@26@@@@
./541299735/bbp_cyclic.c@42@CRITICAL@#pragma omp critical@mpf_add(pi, pi, local_pi);@26@@@@
./541299735/chudnovsky_simplified_expression_snake_like.c@56@CRITICAL@#pragma omp critical@mpf_add(pi, pi, local_pi);@26@@@@
./541299735/chudnovsky_simplified_expression_cheater.c@83@CRITICAL@#pragma omp critical@mpf_add(pi, pi, local_pi);@26@@@@
./261549670/ParallelKMeans.hpp@141@CRITICAL@#pragma omp critical@P.SetClusterId(clusterId);@26@@@@
./249790277/prob_1.cpp@118@CRITICAL@#pragma omp critical@integralValue += my_value;@26@@@@
./116842157/sqs.cpp@341@CRITICAL@#pragma omp critical@results.push_back(result);@26@@@@
./315333330/critical-4.c@6@CRITICAL@#pragma omp critical(foo)@#pragma omp critical(bar)@25@@@@
./315333330/critical-4.c@20@CRITICAL@#pragma omp critical(foo)@#pragma omp critical(foo)@25@@@@
./23245147/DfHpqX.cpp@496@CRITICAL@#pragma omp critical(DfHpqX__getESP)@{ (*pValues)[r] += esp; }@25@@@@
./106476798/Problem1LargeDataSet.c@140@CRITICAL@#pragma omp critical@"{
count += local_count;
}"@25@@@@
./242248042/test51.c@12@CRITICAL@#pragma omp critical@"{
s1 += tid;
s2 += tid;
}"@25@@@@
./242248042/criticalOne.c@11@CRITICAL@#pragma omp critical@"{
s1 = s1 + 2;
s2 = s1;
}"@25@@@@
./524786911/q1.cpp@28@CRITICAL@#pragma omp critical@"{
if (i > loc)
loc = i;
}"@25@@@@
./241424068/reduction-modificado.c@23@CRITICAL@#pragma omp critical@suma = suma + suma_local;@25@@@@
./315333330/critical-4.c@5@CRITICAL@#pragma omp critical@#pragma omp critical(foo)@25@@@@
./315333330/critical-1.c@11@CRITICAL@#pragma omp critical@#pragma omp critical(foo)@25@@@@
./531045827/pi_critical2.c@18@CRITICAL@#pragma omp critical@pi +=  4.0 / (1.0 + x*x);@25@@@@
./242248042/atomicConstructSimple.c@12@CRITICAL@#pragma omp critical@#pragma omp atomic update@25@@@@
./171899553/mcOmp.c@26@CRITICAL@#pragma omp critical@state2 = rand_r(&state1);@25@@@@
./352144340/char_freq_par_critical.c@51@CRITICAL@#pragma omp critical@freq[buffer[i] - base]++;@25@@@@
./215497623/columnStripe_openmp.cpp@79@CRITICAL@#pragma omp critical@result[i] += localResult;@25@@@@
./62011740/rkmh.cpp@336@CRITICAL@#pragma omp critical@++ref_to_sample_depth[x];@25@@@@
./3769753/bloom-dbg.h@558@CRITICAL@#pragma omp critical(trace)@streams.traceOut << rec;@24@@@@
./3769753/DistanceEst.cpp@345@CRITICAL@#pragma omp critical(out)@out << ss.str() << '\n';@24@@@@
./23245147/DfCD.cpp@3454@CRITICAL@#pragma omp critical(DfCD__setERIs_set_answer)@{ value += coef * tmp; }@24@@@@
./23245147/DfCD.cpp@3445@CRITICAL@#pragma omp critical(DfCD__setERIs_set_answer)@{ value += coef * tmp; }@24@@@@
./23245147/DfCD.cpp@3472@CRITICAL@#pragma omp critical(DfCD__setERIs_set_answer)@{ value += coef * tmp; }@24@@@@
./242248042/criticalOne.c@16@CRITICAL@#pragma omp critical@"{
s2 = 5;
arr[i] = 16;
}"@24@@@@
./165330523/pi_spmd_final.c@39@CRITICAL@#pragma omp critical@full_sum += partial_sum;@24@@@@
./255312505/nqueens-p3.c@41@CRITICAL@#pragma omp critical@check = SOLUTION_EXISTS;@24@@@@
./193826361/pi_spmd_final.c@29@CRITICAL@#pragma omp critical@full_sum += partial_sum;@24@@@@
./419120644/main.cpp@47@CRITICAL@#pragma omp critical@result += thread_result;@24@@@@
./81815495/test_chunk.cpp@192@CRITICAL@#pragma omp critical@"buffer << ""UknownError"";"@24@@@@
./31732163/metric.cpp@154@CRITICAL@#pragma omp critical@field.complexity += phi;@24@@@@
./31732163/matching.cpp@130@CRITICAL@#pragma omp critical@*count += local_matched;@24@@@@
./3769753/RAlgorithmsShort.cpp@1116@CRITICAL@#pragma omp critical(edges2remove)@edges2remove.push_back(@23@@@@
./3769753/RAlgorithmsShort.cpp@1125@CRITICAL@#pragma omp critical(edges2remove)@edges2remove.push_back(@23@@@@
./106407740/sudoku_parallel.c@318@CRITICAL@#pragma omp critical (pool)@current = removeItem();@23@@@@
./106407740/sudoku_parallel.c@358@CRITICAL@#pragma omp critical (pool)@current = removeItem();@23@@@@
./282853714/kahnAlgorithm.c@55@CRITICAL@#pragma omp critical (c1)@insertNode(headS, j+1);@23@@@@
./248943258/time.c@46@CRITICAL@#pragma omp critical@"{
result += integral;
}"@23@@@@
./124574336/nvector_openmp.c@1153@CRITICAL@#pragma omp critical@"{
dotprods[i] += sum;
}"@23@@@@
./315333330/a.31.2.c@19@CRITICAL@#pragma omp critical@"{
a += a_p;
b ^= b_p;
}"@23@@@@
./255312505/nqueens-p2.c@44@CRITICAL@#pragma omp critical@SOLUTION_EXISTS = true;@23@@@@
./255312505/nqueens-p1.c@44@CRITICAL@#pragma omp critical@SOLUTION_EXISTS = true;@23@@@@
./255312505/nqueens-p3.c@49@CRITICAL@#pragma omp critical@SOLUTION_EXISTS = true;@23@@@@
./268835699/eliminate-branches.h@38@CRITICAL@#pragma omp critical@tree.eraseBranch(root);@23@@@@
./268835699/eliminate-branches.h@66@CRITICAL@#pragma omp critical@tree.eraseBranch(root);@23@@@@
./268835699/eliminate-branches.h@94@CRITICAL@#pragma omp critical@tree.eraseBranch(root);@23@@@@
./268835699/eliminate-branches.h@123@CRITICAL@#pragma omp critical@tree.eraseBranch(root);@23@@@@
./122359169/main.cpp@230@CRITICAL@#pragma omp critical@suggest_solution(next);@23@@@@
./419120644/main.cpp@61@CRITICAL@#pragma omp critical@tests.push_back(value);@23@@@@
./302674724/openmp_petle_simple.c@21@CRITICAL@#pragma omp critical(suma_parallel)@suma_parallel += a[i];@22@@@@
./293300824/graph.hpp@255@CRITICAL@#pragma omp critical(queue_update)@queue.push_back(next);@22@@@@
./23245147/DfCD.cpp@1771@CRITICAL@#pragma omp critical(DfCD__calcCholeskyVectorsOnTheFlyA)@{ L_xm[i] += l_m_pi; }@22@@@@
./315333330/a.13.1.c@12@CRITICAL@#pragma omp critical (yaxis)@iy_next = dequeue (y);@22@@@@
./315333330/a.13.1.c@9@CRITICAL@#pragma omp critical (xaxis)@ix_next = dequeue (x);@22@@@@
./81815495/spatial_methods.h@159@CRITICAL@#pragma omp critical@"{
global_sum += sum;
}"@22@@@@
./81815495/spatial_methods.h@77@CRITICAL@#pragma omp critical@"{
global_sum += sum;
}"@22@@@@
./303054735/q5.c@32@CRITICAL@#pragma omp critical@"{
sum = sum + t_sum;
}"@22@@@@
./87859189/mesh.cpp@210@CRITICAL@#pragma omp critical@"{
addVertex(pt, i);

}"@22@@@@
./424335383/Questao02.c@21@CRITICAL@#pragma omp critical@resultado += operacao;@22@@@@
./424335383/Questao03.c@25@CRITICAL@#pragma omp critical@resultado += operacao;@22@@@@
./149614655/bf-omp.cpp@116@CRITICAL@#pragma omp critical@relaxed_times[v] += 1;@22@@@@
./81815495/hole_cutting_utility.cpp@162@CRITICAL@#pragma omp critical@n_faces_map[ids] += 1;@22@@@@
./81815495/distributed_matrix.hpp@1162@CRITICAL@#pragma omp critical@b0_loc_norm += t_norm;@22@@@@
./3769753/MIBloomFilter.hpp@559@CRITICAL@#pragma omp critical@m_data[pos] |= s_mask;@22@@@@
./6987353/distributed_matrix.hpp@1162@CRITICAL@#pragma omp critical@b0_loc_norm += t_norm;@22@@@@
./302674724/openmp_petle.c@82@CRITICAL@#pragma omp critical(suma_parallel)@suma_parallel += tmp;@21@@@@
./166030797/main.c@32@CRITICAL@#pragma omp critical@"{
s1 += res;
num++;
}"@21@@@@
./447856665/omp.h@93@CRITICAL@#pragma omp critical@"{
res += local_sum;
}"@21@@@@
./596098733/14-SharedVariables-OpenMP.c@14@CRITICAL@#pragma omp critical@"{
shared_counter++;
}"@21@@@@
./79154277/deadlock.cpp@26@CRITICAL@#pragma omp critical@"{
sum += ii;
foo();
}"@21@@@@
./93849114/pi_omp_critical.c@32@CRITICAL@#pragma omp critical@sum += 4.0/(1.0+x*x);@21@@@@
./93849114/pi-v4.c@31@CRITICAL@#pragma omp critical@sum += 4.0/(1.0+x*x);@21@@@@
./268889840/omp_critical.cpp@33@CRITICAL@#pragma omp critical@dot_prod +=  aux_dot;@21@@@@
./31732163/matching.cpp@171@CRITICAL@#pragma omp critical@param.found |= found;@21@@@@
./315333330/nesting-1.c@221@CRITICAL@#pragma omp critical (foo2)@#pragma omp critical@20@@@@
./242248042/scoping.c@51@CRITICAL@#pragma omp critical@"{
l10: y += p + q;
}"@20@@@@
./315333330/nesting-1.c@227@CRITICAL@#pragma omp critical@#pragma omp critical@20@@@@
./315333330/critical-4.c@13@CRITICAL@#pragma omp critical@#pragma omp critical@20@@@@
./242248042/test51.c@27@CRITICAL@#pragma omp critical@"{
s1 += tid;
}"@20@@@@
./514584527/omp-mandelbrot.c@68@CRITICAL@#pragma omp critical@drawpixel( x, y, v);@20@@@@
./546806621/parallel.c@51@CRITICAL@#pragma omp critical@maxval = numbers[i];@20@@@@
./538481564/omp15.cpp@31@CRITICAL@#pragma omp critical@result.push_back(i);@20@@@@
./81815495/builtin.hpp@804@CRITICAL@#pragma omp critical@b0_norm += loc_norm;@20@@@@
./6987353/builtin.hpp@804@CRITICAL@#pragma omp critical@b0_norm += loc_norm;@20@@@@
./75643695/Pi.hpp@50@CRITICAL@#pragma omp critical@integral += fa + fb;@20@@@@
./241908038/example2.c@31@CRITICAL@#pragma omp critical(sum)@sum += private_sum;@19@@@@
./242248042/test37.c@11@CRITICAL@#pragma omp critical (name)@"{
b++;
}"@19@@@@
./242248042/input.c@51@CRITICAL@#pragma omp critical@"{
diff += mydiff;
}"@19@@@@
./457767085/VideoCreator.cpp@63@CRITICAL@#pragma omp critical@"{
writer << base;
}"@19@@@@
./228656264/task-3.C@38@CRITICAL@#pragma omp critical@"{
j += i;
l += k;
}"@19@@@@
./315333330/task-3.C@38@CRITICAL@#pragma omp critical@"{
j += i;
l += k;
}"@19@@@@
./293133048/ompFunctions.c@80@CRITICAL@#pragma omp critical@"{
has_zero = 1;
}
}"@19@@@@
./228656264/task-3.C@11@CRITICAL@#pragma omp critical@"{
j += i;
l += k;
}"@19@@@@
./228656264/task-3.C@20@CRITICAL@#pragma omp critical@"{
j += i;
l += k;
}"@19@@@@
./315333330/task-3.C@11@CRITICAL@#pragma omp critical@"{
j += i;
l += k;
}"@19@@@@
./315333330/task-3.C@20@CRITICAL@#pragma omp critical@"{
j += i;
l += k;
}"@19@@@@
./315333330/task-3.C@29@CRITICAL@#pragma omp critical@"{
j += i;
l += k;
}"@19@@@@
./124574336/nvector_openmp.c@1404@CRITICAL@#pragma omp critical@"{
nrm[i] += sum;
}
"@19@@@@
./555688434/sum_for_reduction.c@17@CRITICAL@#pragma omp critical@t2=omp_get_wtime();@19@@@@
./248943258/solution.c@44@CRITICAL@#pragma omp critical@result += integral;@19@@@@
./81815495/mass_conservation_check_process.cpp@162@CRITICAL@#pragma omp critical@r_dist = -aux_dist;@19@@@@
./202712923/atomic_detail.h@30@CRITICAL@#pragma omp critical@current = *address;@19@@@@
./202712923/atomic_detail.h@39@CRITICAL@#pragma omp critical@*address = desired;@19@@@@
./948139/mcmap.cpp@97@CRITICAL@#pragma omp critical@{ s.increment(); }@18@@@@
./92494521/DRB091-threadprivate2-orig-no.c@16@CRITICAL@#pragma omp critical@"{
sum= sum+sum0;
}"@18@@@@
./92494521/DRB085-threadprivate-orig-no.c@20@CRITICAL@#pragma omp critical@"{
sum= sum+sum0;
}"@18@@@@
./92494521/DRB084-threadprivatemissing-orig-yes.c@18@CRITICAL@#pragma omp critical@"{
sum= sum+sum0;
}"@18@@@@
./92494521/DRB092-threadprivatemissing2-orig-yes.c@14@CRITICAL@#pragma omp critical@"{
sum= sum+sum0;
}"@18@@@@
./124574336/nvector_openmp.c@1463@CRITICAL@#pragma omp critical@"{
nrm[i] += sum;
}"@18@@@@
./149035017/schedule.c@30@CRITICAL@#pragma omp critical@"{
print(tid, i);
}"@18@@@@
./84231963/sudoku.c@132@CRITICAL@#pragma omp critical@"{
push(mystack);
}"@18@@@@
./116200058/openmp_bellman_ford_fast_with_queue.cpp@106@CRITICAL@#pragma omp critical@"{
queue.push(v);
}"@18@@@@
./131303714/parallel_dobfs.cpp@38@CRITICAL@#pragma omp critical@next.push_back(i);@18@@@@
./81815495/mass_conservation_check_process.cpp@159@CRITICAL@#pragma omp critical@r_dist = aux_dist;@18@@@@
./81815495/smoothed_aggr_emin.hpp@216@CRITICAL@#pragma omp critical@denum[c] += v * v;@18@@@@
./157382526/openmp_bellman_ford.cpp@107@CRITICAL@#pragma omp critical@has_change = true;@18@@@@
./6987353/smoothed_aggr_emin.hpp@216@CRITICAL@#pragma omp critical@denum[c] += v * v;@18@@@@
./3769753/RAlgorithmsShort.cpp@695@CRITICAL@#pragma omp critical(cerr)@progressUpdate();@17@@@@
./3769753/RAlgorithmsShort.cpp@722@CRITICAL@#pragma omp critical(cerr)@progressUpdate();@17@@@@
./3769753/RAlgorithmsShort.cpp@977@CRITICAL@#pragma omp critical(cerr)@progressUpdate();@17@@@@
./3769753/RAlgorithmsShort.cpp@1155@CRITICAL@#pragma omp critical(cerr)@progressUpdate();@17@@@@
./282853714/kahnAlgorithm.c@51@CRITICAL@#pragma omp critical (c2)@indegree[j] -= 1;@17@@@@912
./291746844/critical_construct.c@15@CRITICAL@#pragma omp critical@pop = stack[top];@17@@@@
./121361183/reduction-omp-carte.c@19@CRITICAL@#pragma omp critical@sum=sum+sum_part;@17@@@@
./632337621/critical_construct.c@16@CRITICAL@#pragma omp critical@pop = stack[top];@17@@@@
./531045827/pi_critical.c@20@CRITICAL@#pragma omp critical@pi += sum * step;@17@@@@
./199429937/parallel_pi_critical.c@27@CRITICAL@#pragma omp critical@pi += sum * step;@17@@@@
./242248042/atomicConstructSimple.c@6@CRITICAL@#pragma omp critical@#pragma omp flush@17@@@@
./555688434/sum_parallel.c@27@CRITICAL@#pragma omp critical@sum+=partial_sum;@17@@@@
./555688434/sum_for.c@23@CRITICAL@#pragma omp critical@sum+=partial_sum;@17@@@@
./417862355/quids.hpp@165@CRITICAL@#pragma omp critical@avg += local_avg;@17@@@@
./64853404/metamorph_openmp.c@332@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@163@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@450@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@273@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@625@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@436@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@741@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@544@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@255@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@90@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@391@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@218@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@509@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@328@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@567@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@382@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@683@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@490@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp_mic.c@598@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./64853404/metamorph_openmp.c@799@CRITICAL@#pragma omp critical@{ sum += psum; }@16@@@@
./92494521/DRB172-critical2-orig-no.c@13@CRITICAL@#pragma omp critical@"{
q[9] += 1.0;
}"@16@@@@
./93849114/pi_omp.c@35@CRITICAL@#pragma omp critical@sum += sumlocal;@16@@@@
./256562535/fast.c@14@CRITICAL@#pragma omp critical@sum += localSum;@16@@@@
./92494521/DRB181-SmithWaterman-yes.c@87@CRITICAL@#pragma omp critical@*maxPos = index;@16@@@@
./165330523/map_reduce.c@46@CRITICAL@#pragma omp critical@res = f(res, e);@16@@@@
./73482458/sum.cpp@33@CRITICAL@#pragma omp critical(dummy)@sum += vecA[i];@15@@@@
./457767085/VideoCreator.cpp@32@CRITICAL@#pragma omp critical@"{
cap >> img;
}"@15@@@@
./131722549/critical.c@41@CRITICAL@#pragma omp critical@pi += sum*step;@15@@@@
./495107670/main.c@112@CRITICAL@#pragma omp critical@countBars[j]++;@15@@@@
./298456736/dictionary-omp.c@57@CRITICAL@#pragma omp critical@result = FOUND;@15@@@@
./142172127/critical.cpp@47@CRITICAL@#pragma omp critical@pi += sum*step;@15@@@@
./81815495/smoothed_aggr_emin.hpp@206@CRITICAL@#pragma omp critical@omega[ca] += v;@15@@@@
./6987353/smoothed_aggr_emin.hpp@206@CRITICAL@#pragma omp critical@omega[ca] += v;@15@@@@
./182564675/tsynch.c@10@CRITICAL@#pragma omp critical(even)@result_even++;@14@@@@
./242248042/allCFG.c@99@CRITICAL@#pragma omp critical@"{
x = x + 6;
}"@14@@@@
./242248042/allKnown.c@99@CRITICAL@#pragma omp critical@"{
x = x + 6;
}"@14@@@@
./242248042/allCFG.c@147@CRITICAL@#pragma omp critical@"{
x = x + 6;
}"@14@@@@
./242248042/allKnown.c@147@CRITICAL@#pragma omp critical@"{
x = x + 6;
}"@14@@@@
./242248042/test51.c@18@CRITICAL@#pragma omp critical@"{
s1 += tid;
}"@14@@@@
./139055661/thread4_1.c@18@CRITICAL@#pragma omp critical@"{
sum+=lsum;
}"@14@@@@
./124247514/pmv-OpenMP-b.c@44@CRITICAL@#pragma omp critical@v2[f] += suma;@14@@@@
./483750905/pi.c@150@CRITICAL@#pragma omp critical@sum = sum + x;@14@@@@
./483750905/menuUltimoJuan.c@197@CRITICAL@#pragma omp critical@sum = sum + x;@14@@@@
./256562535/Critical.c@22@CRITICAL@#pragma omp critical@sum+=localsum;@14@@@@
./242289757/2_parallel_pi_v3.c@29@CRITICAL@#pragma omp critical@pi = pi + sum;@14@@@@
./356685186/gen06.c@108@CRITICAL@#pragma omp critical@seed = rand();@14@@@@
./71593983/subfun.c@42@CRITICAL@#pragma omp critical@*value += val;@14@@@@
./71593983/barrier.c@14@CRITICAL@#pragma omp critical@s = s + extra;@14@@@@
./538481564/omp9.cpp@36@CRITICAL@#pragma omp critical@max = d[i][j];@14@@@@
./538481564/omp9.cpp@41@CRITICAL@#pragma omp critical@min = d[i][j];@14@@@@
./548297608/task09.cpp@24@CRITICAL@#pragma omp critical@min = d[i][j];@14@@@@
./548297608/task09.cpp@28@CRITICAL@#pragma omp critical@max = d[i][j];@14@@@@
./419120644/test.cpp@69@CRITICAL@#pragma omp critical@result += tmp;@14@@@@
./571082615/OpenWP.cpp@99@CRITICAL@#pragma omp critical@s += m_arr[i];@14@@@@
./3769753/DistanceEst.cpp@289@CRITICAL@#pragma omp critical(out)@"out << ""G\t*"""@13@@@@
./182564675/tsynch.c@14@CRITICAL@#pragma omp critical(odd)@result_odd++;@13@@@@
./189645273/ParallelNeedlemanWunsch.cpp@57@CRITICAL@#pragma omp critical@"{
ii = i++;
}"@13@@@@
./596098733/08-RaceCondition-OpenMP.c@11@CRITICAL@#pragma omp critical@"{
sum += i;
}"@13@@@@
./122663460/appFor-OpenMP-vSched.C@83@CRITICAL@#pragma omp critical@sum += mySum;@13@@@@
./122663460/app2For_vSched-omp.C@214@CRITICAL@#pragma omp critical@sum += mySum;@13@@@@
./122663460/appFor_vSched-omp.C@61@CRITICAL@#pragma omp critical@sum += mySum;@13@@@@
./122663460/testOneFor_omp-lols.C@71@CRITICAL@#pragma omp critical@sum += mySum;@13@@@@
./122663460/appFor_omp-lols.C@69@CRITICAL@#pragma omp critical@sum += mySum;@13@@@@
./166300666/pi.c@23@CRITICAL@#pragma omp critical@sonuc += sum;@13@@@@
./241424068/pmv-OPM-b.c@50@CRITICAL@#pragma omp critical@v2[i] += num;@13@@@@
./578563146/ask3.c@68@CRITICAL@#pragma omp critical@d_total += d;@13@@@@
./578563146/ask3.c@70@CRITICAL@#pragma omp critical@r_total += r;@13@@@@
./449282076/h5_problem2.c@35@CRITICAL@#pragma omp critical@ptr->idata++;@13@@@@
./488716055/3_pi_spmd_sync.cpp@27@CRITICAL@#pragma omp critical@sum += sum_p;@13@@@@
./73482458/sum.cpp@48@CRITICAL@#pragma omp critical(par_sum)@sum += psum;@12@@@@
./302674724/openmp_watki_zmienne.c@28@CRITICAL@#pragma omp critical(a_shared)@a_shared ++;@12@@@@
./315333330/block-9.c@11@CRITICAL@#pragma omp critical@{ case 2:; }@12@@@@
./315333330/block-10.c@17@CRITICAL@#pragma omp critical@{ case 2:; }@12@@@@
./60191570/success_parallel_05.cpp@20@CRITICAL@#pragma omp critical@"{
e.n = n;
}"@12@@@@
./109233621/critical.c@7@CRITICAL@#pragma omp critical@"{
count++;
}"@12@@@@
./60191570/success_parallel_04.cpp@18@CRITICAL@#pragma omp critical@"{
e.n = n;
}"@12@@@@
./60191570/success_parallel_03.cpp@18@CRITICAL@#pragma omp critical@"{
e.n = n;
}"@12@@@@
./60191570/success_parallel_02.cpp@16@CRITICAL@#pragma omp critical@"{
e.n = n;
}"@12@@@@
./242248042/CriticalBeginLink.c@6@CRITICAL@#pragma omp critical@"{
int x;
}"@12@@@@
./242248042/CriticalEndLink.c@6@CRITICAL@#pragma omp critical@"{
int x;
}"@12@@@@
./242248042/CriticalBodyLink.c@7@CRITICAL@#pragma omp critical@"{
int x;
}"@12@@@@
./405455996/code.cpp@26@CRITICAL@#pragma omp critical@solutions++;@12@@@@
./356992498/calculatePI.cpp@43@CRITICAL@#pragma omp critical@sum += temp;@12@@@@
./81815495/test_chunk.cpp@187@CRITICAL@#pragma omp critical@buffer << e;@12@@@@
./482460652/datarace.cpp@19@CRITICAL@#pragma omp critical@sum += a[i];@12@@@@
./289039618/critical_multiple.c@15@CRITICAL@#pragma omp critical@"{
x += 1;
}"@11@@@@
./636093179/41.c@13@CRITICAL@#pragma omp critical@sum+= psum;@11@@@@
./176131462/sudoku_solver_parallel_c.c@36@CRITICAL@#pragma omp critical@*found = 1;@11@@@@
./176131462/sudoku_solver_parallel_c.c@63@CRITICAL@#pragma omp critical@*found = 1;@11@@@@
./632610376/main.cpp@103@CRITICAL@#pragma omp critical@"{
sum--;
}"@10@@@@
./632610376/main.cpp@94@CRITICAL@#pragma omp critical@"{
sum++;
}"@10@@@@
./178010771/vectorSum.c@17@CRITICAL@#pragma omp critical@sum+=v[i];@10@@@@
./176131462/test.c@24@CRITICAL@#pragma omp critical@found = 1;@10@@@@
./127649281/pi_parallel.cpp@40@CRITICAL@#pragma omp critical@pi += sum;@10@@@@
./92494521/DRB148-critical1-orig-gpu-yes.c@11@CRITICAL@#pragma omp critical(sublock)@var -= 2;@9@@@@
./2997204/oldoffice_fmt_plug.c@140@CRITICAL@#pragma omp critical@"{
any_cracked = oo_cracked[index] = 1;
cur_binary->has_mitm = 1;
memcpy(cur_binary->mitm, mitm_key[index], 5);
}"@9@@@@
./99503853/critical_section.c@14@CRITICAL@#pragma omp critical@"{
x+=1;
}"@9@@@@
./166300666/shared.c@7@CRITICAL@#pragma omp critical@toplam++;@9@@@@
./382028151/palindrome.c@40@CRITICAL@#pragma omp critical@flag = 1;@9@@@@
./182564675/tworkshare.c@26@CRITICAL@#pragma omp critical@result++;@9@@@@
./546806621/omp_critical.c@72@CRITICAL@#pragma omp critical@num_n0++;@9@@@@
./267597733/9.norace1.c@7@CRITICAL@#pragma omp critical@sum += i;@9@@@@
./84927230/summation.cpp@25@CRITICAL@#pragma omp critical@sum += i;@9@@@@
./315333330/critical-4.c@21@CRITICAL@#pragma omp critical(foo)@bar (0);@8@@@@
./315333330/critical-4.c@7@CRITICAL@#pragma omp critical(bar)@bar (0);@8@@@@
./60191570/success_critical_03.c@9@CRITICAL@#pragma omp critical(A)@"{
x++;
}"@8@@@@
./242248042/CriticalBodyLink.c@3@CRITICAL@#pragma omp critical@"{
100;
}"@8@@@@
./315333330/pr29965-9.C@22@CRITICAL@#pragma omp critical@throw 0;@8@@@@
./315333330/critical-4.c@14@CRITICAL@#pragma omp critical@bar (0);@8@@@@
./60191570/success_01.c@15@CRITICAL@#pragma omp critical@sol = 1;@8@@@@
./60191570/success_01.c@23@CRITICAL@#pragma omp critical@sol = 1;@8@@@@
./60191570/success_01.c@47@CRITICAL@#pragma omp critical@sol = 1;@8@@@@
./60191570/success_01.c@59@CRITICAL@#pragma omp critical@sol = 1;@8@@@@
./182564675/tnested.c@14@CRITICAL@#pragma omp critical@total++;@8@@@@
./315333330/critical-1.c@12@CRITICAL@#pragma omp critical(foo)@bar(3);@7@@@@
./73482458/variables.c@10@CRITICAL@#pragma omp critical(add_first)@var1++;@7@@@@
./235702162/DRB074-flush-orig-yes.c@5@CRITICAL@#pragma omp critical@*q = 1;@7@@@@
./228656264/pr36802-2.c@30@CRITICAL@#pragma omp critical@i += 1;@7@@@@
./228656264/pr36802-3.c@27@CRITICAL@#pragma omp critical@i += 1;@7@@@@
./228656264/pr35549.c@19@CRITICAL@#pragma omp critical@i += 1;@7@@@@
./380775248/monte_carlo_omp.c@28@CRITICAL@#pragma omp critical@P += A;@7@@@@
./315333330/pr29965-3.c@47@CRITICAL@#pragma omp critical@baz ();@7@@@@
./315333330/block-0.C@4@CRITICAL@#pragma omp critical@bar ();@7@@@@
./315333330/pr36802-2.c@30@CRITICAL@#pragma omp critical@i += 1;@7@@@@
./315333330/pr36802-3.c@27@CRITICAL@#pragma omp critical@i += 1;@7@@@@
./315333330/pr35549.c@19@CRITICAL@#pragma omp critical@i += 1;@7@@@@
./315333330/critical-1.c@4@CRITICAL@#pragma omp critical@bar(0);@7@@@@
./92494521/DRB074-flush-orig-yes.c@5@CRITICAL@#pragma omp critical@*q = 1;@7@@@@
./424335383/Questao02.c@13@CRITICAL@#pragma omp critical@x += 2;@7@@@@
./424335383/Questao03.c@17@CRITICAL@#pragma omp critical@x += 2;@7@@@@
./92494521/DRB148-critical1-orig-gpu-yes.c@9@CRITICAL@#pragma omp critical(addlock)@var++;@6@@@@
./315333330/critical-3.c@4@CRITICAL@#pragma omp critical (xyzzy)@bar();@6@@@@
./256562535/slow.c@9@CRITICAL@#pragma omp critical@sum++;@6@@@@
./315333330/pr79664.C@91@CRITICAL@#pragma omp critical@i = 1;@6@@@@
./92494521/DRB144-critical-missingreduction-orig-gpu-yes.c@9@CRITICAL@#pragma omp critical@var++;@6@@@@
./348737038/multithreaded_sum_N.c@23@CRITICAL@#pragma omp critical@s=s+i;@6@@@@
./348737038/addition_n_number.c@23@CRITICAL@#pragma omp critical@s=s+i;@6@@@@
./136107867/task3_1.c@36@CRITICAL@#pragma omp critical(N1)@N1++;@5@@@@
./136107867/task3_3.c@35@CRITICAL@#pragma omp critical(N1)@N1++;@5@@@@
./136107867/task3_2.c@36@CRITICAL@#pragma omp critical(N1)@N1++;@5@@@@
./136107867/task3_1.c@39@CRITICAL@#pragma omp critical(N0)@N0++;@5@@@@
./136107867/task3_3.c@38@CRITICAL@#pragma omp critical(N0)@N0++;@5@@@@
./136107867/task3_2.c@39@CRITICAL@#pragma omp critical(N0)@N0++;@5@@@@
./315333330/pr86025.c@7@CRITICAL@#pragma omp critical (foo)@i++;@4@@@@
./315333330/pr37346.C@8@CRITICAL@#pragma omp critical@i++;@4@@@@
./315333330/pr86025.c@12@CRITICAL@#pragma omp critical@i++;@4@@@@
./242248042/enforcer.c@32@CRITICAL@#pragma omp critical@x++;@4@@@@
./88884801/odd_even_sort.c@143@CRITICAL@#pragma omp critical@i++;@4@@@@
./82070754/task12.cpp@24@CRITICAL@#pragma omp critical@n++;@4@@@@
./60191570/success_task_24.cpp@14@CRITICAL@#pragma omp critical@"{
}"@3@@@@
./134549171/criticalsection-tasks.c@7@CRITICAL@#pragma omp critical@{ }@3@@@@
./81815495/apply_chimera_process.cpp@546@CRITICAL@#pragma omp critical@"{
mrMainModelPart.RemoveMasterSlaveConstraintFromAllLevels(constraint_id);
}"@1@@@@
